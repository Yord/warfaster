{"version":3,"sources":["ui/Aeternus_Continuum.png","ui/Fallback.png","ui/Empyrean.png","ui/Iron_Star_Alliance.png","ui/Lost_Legion.png","ui/Marcher_Worlds.png","ui/Wild_Card.png","messages.js","state/utils.js","state/AppSync.js","state/CypherCodecs.js","state/Cyphers.js","state/Dragging.js","state/FactionModels.js","state/Factions.js","state/Lists.js","state/PageIds.js","state/Url.js","state/WildCardModels.js","state/Models.js","state/WarjackWeapons.js","ui/App.js","businessLogic/processes/jsonp.js","state/WikiPages.js","businessLogic/processes/cacheWikiPages/cacheWikiPages.js","businessLogic/processes/cacheWikiPages/updateCache.js","businessLogic/processes/partitionBy.js","businessLogic/processes/cacheWikiPages/fetchPageIds.js","businessLogic/processes/cacheWikiPages/index.js","businessLogic/core/parse/utils.js","businessLogic/core/parse/parseCypherText.js","businessLogic/core/parse/parsers.js","businessLogic/core/parse/parseCypherCodecsText.js","businessLogic/core/parse/parseFactionModelsText.js","businessLogic/core/parse/parseFactionsText.js","businessLogic/core/parse/parseModelText.js","businessLogic/core/parse/parseWarjackWeapon.js","businessLogic/core/parse/parseWildCardText.js","businessLogic/processes/parseWikiPages.js","businessLogic/processes/triggerFetchWikiPages.js","businessLogic/processes/base62.js","businessLogic/processes/ui.js","businessLogic/processes/index.js","state/Version.js","state/index.js","index.js"],"names":["CardDragEnded","message","CardDragStarted","MenuItemClicked","FetchPageIdsSlice","FetchWikiPage","FetchedWikiPage","FetchWikiPageRevisions","FetchedWikiPageRevisions","RefreshWikiPages","type","payload","immer","f","state","action","produce","identity","StateShard","namespace","init","actions","selectors","dispatch","Object","fromEntries","entries","map","functionName","keys","name","args","a","pipe","fs","AppSync","data","sync","done","reasons","select","addReasons","selectDone","selectReasons","CypherCodecs","cypherCodecs","set","selectPages","codec","Cypher","page","selectByPage","find","Cyphers","cyphers","cypher","values","flat","Dragging","ui","dragging","activate","deactivate","FactionModels","factionModels","models","selectModelPages","model","Name","Factions","factions","Lists","lists","oneEmptyList","addCard","pageId","card","hidden","cards","push","addEmptyList","moveListBy","listIndex","by","length","list","splice","removeCard","source","cardIndex","removeList","setCardCortex","cortexIds","setCardVehicleWeapon","vehicleWeaponId","setCardWarjackWeapons","hardpointNameIndex","warjackWeaponId","warjackWeaponIds","setListTitle","title","toggleCard","moveCard","destination","PageIds","pageIds","addPages","pageIdByTitle","selectByPages","pages","reduce","acc","selectPageByPageId","statePageId","undefined","Url","url","WildCardModels","wildCardModels","wildCards","wildCard","faction","Models","WarjackWeapons","warjackWeapons","warjackWeapon","Header","Layout","Footer","Content","TextArea","Input","SubMenu","Menu","FactionImage","src","Aeternus_Continuum","alt","height","Empyrean","Iron_Star_Alliance","Lost_Legion","Marcher_Worlds","Wild_Card","Fallback","App","connect","initialized","syncReasons","sort","text","Type","Subtype","subtype","_","join","flatMap","pageIdByPage","filter","details","hardpoints","hardpointNames","parseHardpoints","cortexSelections","cortex","advantages","advantage","category","categoryId","warjackWeaponSelections","selection","vehicleWeaponSelection","Cyphers2","Faction","dragStart","event","dragEnd","menuItemClicked","stopPropagation","target","value","setUrl","bookmark","document","querySelector","navigator","userAgent","match","range","createRange","selectNodeContents","window","getSelection","removeAllRanges","addRange","setSelectionRange","open","key","label","React","useState","openDrawer","setOpenDrawer","className","onDragStart","onDragEnd","droppableId","provided","ref","innerRef","droppableProps","style","animation","color","DeleteOutlined","href","placeholder","id","openKeys","onOpenChange","mode","triggerSubMenuAction","icon","gutter","xs","sm","md","lg","xl","xxl","placement","trigger","align","offset","onClick","cursor","display","paddingRight","fontSize","padding","PlusSquareOutlined","UpSquareOutlined","paddingLeft","DownSquareOutlined","span","generateListNamePlaceholder","maxLength","autoSize","onChange","Universal","i","count","size","draggableId","index","draggableProps","dragHandleProps","hoverable","Meta","avatar","width","textAlign","replace","vehicleWeaponName","cortexName","weaponIds","weaponId","weapon","pow","effect","squadSize","deploymentCost","baseSize","health","wildCardFactions","weaponPoints","modelStats","stat","specialRules","Fragment","weapons","ruleIndex","rule","colSpan","maneuvers","defaultValue","fontStyle","onSelect","Option","cortexes","advantageIndex","chassisSpecialRules","hardpointName","warjackWeaponNames","location","cost","warjackWeaponName","split","weaponDetails","release","lore","margin","SyncOutlined","spin","reason","description","Date","getFullYear","onKeyDown","factionName","visible","onClose","mask","closeIcon","MenuUnfoldOutlined","ItemGroup","shortName","slice","Item","w1","w2","j","indexOf","b","c1","c2","factionNames","justFactions","factionsPresent","types","cyperTypes","vehicleWeapon","rHardpointGroup","results","n","RegExp","repeat","exec","hardpointCount","parseInt","groupCount","groupName","console","error","s","jsonp","Promise","resolve","reject","callbackName","Math","round","random","body","removeChild","script","createElement","appendChild","WikiPages","addPage","removePage","selectPageByPage","selectPagesByPageIds","includes","pageid","selectPageIds","cacheWikiPages","fetchWikiPage","addWikiPage","all","actionChannel","wikiPageChannel","take","call","parsePage","put","parse","delay","updateCache","refreshWikiPages","fetchWikiPageRevisions","refreshOutdatedWikiPages","pageidsList","ids","pageids","revisionsChannel","revisionsQuery","pageRevisions","query","revInfoByPageId","revision","missing","revid","max","revisions","revInfo","partitionBy","array","arrays","fetchPageIds","fetchPageIds2","fetchPageIdsSlice","cachedPageIds","factionsSet","factionModelPages","wildCardPages","cypherPages","pageSlices","processedCount","pageIdsSliceChannel","pageInfo","titleToPageId","pageList","encodeURIComponent","cacheWikiPages2","cleanText","prepareDOM","doc","DOMParser","parseFromString","querySelectorAll","forEach","node","parentNode","parseCypherText","removeUndefinedValues","extractLink","helper","texts","tagName","nextSibling","innerText","trim","extractParagraphs","p","hrefs","obj","Array","isArray","parseAnchorTable","table","header","th","tr","td","anchors","parseAnchor","row","titleColon","hrefTitle","parseCypherCodecsText","cypherCodecsTable","cypherCodec","parseFactionModelsText","parseFactionsText","collectFactions","anchor","parseModelText","factionAndTypes","extractList","extractText","extractDefinitions","extractWeaponSelection","definitions","parseDefinitionText","extractCortexes","modelStatsData","modelStatsLength","from","weaponsData","weaponsList","tds","stats","previousWeapons","lastWeapon","weaponDetailsTable","weaponDetailsData","detailsHeader","as","pairs","innerHTML","definition","groups","parseWarjackWeapon","prefix","res","availableFor","pointCostNode","pointCost","locationNode","specialRulesP","specialRule","childNodes","textContent","textNode","previousSibling","nodeValue","insertAdjacentText","remove","nodeName","entry","colonIndex","acc2","index2","parseWildCardText","h1OrTable","factionAndModels","h1","last","parseWikiPages","identifyCortexSelections","categories","buildWarjackWeaponSelections","fetchPages","cortexCategories","weaponPages","Cost","Location","Weapon","categoryTexts","findClosestCategory","triggerFetchWikiPages","triggerFetchFactions","factionPages","digitsBase62","toBase62","result","updateCards","removeCards","setDraggingTrue","setDraggingFalse","updateUrl","parseListsFromQuery","parseListsFromQuery2","parseLists","fetchWeaponsIfWarjackAdded","fetchCardOnShow","startsWith","sourceListIndex","sourcePosition","destinationListIndex","destinationPosition","history","replaceState","renderWarjackWeaponIds","codeLength","padStart","maxPageId","ceil","log","v","e","origin","pathname","loadChannel","eventChannel","emitter","addEventListener","removeEventListener","urlParams","URLSearchParams","search","params","version","exponent","listIndexes","substring","parseList","pageWithoutTarget","encodedList","parseCards","rest","blockEnd","delimiter","decode","string","normalizedString","NaN","fromBase62","strings","processes","fetchInitialData","refresh","Version","objects","initAll","namespaces","group","saga","createSagaMiddleware","store","persistedState","localStorage","getItem","JSON","latestState","composedEnhancers","composeWithDevTools","applyMiddleware","createStore","subscribe","setItem","stringify","getState","initStore","ReactDOM","render","getElementById","run"],"mappings":"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","file":"static/js/main.1b23fbc9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Aeternus_Continuum.d1b19d0e.png\";","export default __webpack_public_path__ + \"static/media/Fallback.1ae05c50.png\";","export default __webpack_public_path__ + \"static/media/Empyrean.4ab49225.png\";","export default __webpack_public_path__ + \"static/media/Iron_Star_Alliance.82d76402.png\";","export default __webpack_public_path__ + \"static/media/Lost_Legion.78737fb2.png\";","export default __webpack_public_path__ + \"static/media/Marcher_Worlds.61a330cf.png\";","export default __webpack_public_path__ + \"static/media/Wild_Card.3da9dbca.png\";","const CardDragEnded = message(\"CARD/DRAG_ENDED\");\nconst CardDragStarted = message(\"CARD/DRAG_STARTED\");\nconst MenuItemClicked = message(\"MENU_ITEM/CLICKED\");\n\nconst FetchPageIdsSlice = message(\"PAGE_IDS_SLICE/FETCH\");\nconst FetchWikiPage = message(\"WIKI_PAGE/FETCH\");\nconst FetchedWikiPage = message(\"WIKI_PAGE/FETCHED\");\nconst FetchWikiPageRevisions = message(\"WIKI_PAGE_REVISIONS/FETCH\");\nconst FetchedWikiPageRevisions = message(\"WIKI_PAGE_REVISIONS/FETCHED\");\nconst RefreshWikiPages = message(\"WIKI_PAGES/REFRESH\");\n\nexport {\n  CardDragEnded,\n  CardDragStarted,\n  FetchPageIdsSlice,\n  FetchedWikiPage,\n  FetchedWikiPageRevisions,\n  FetchWikiPage,\n  FetchWikiPageRevisions,\n  MenuItemClicked,\n  RefreshWikiPages,\n};\n\nfunction message(type) {\n  return (payload = {}) => ({ type, payload });\n}\n","import produce from \"immer\";\n\nconst initAll = (...objects) =>\n  pipe(...objects.map((obj) => produce(obj.init)));\n\nconst immer = (f) => (state, action) => produce(f(action) || identity)(state);\n\nconst StateShard = (namespace, init, actions, selectors) => ({\n  namespace,\n  init,\n  dispatch: Object.fromEntries(\n    Object.entries(actions).map(([functionName, f]) => [\n      namespace + \".\" + functionName,\n      f,\n    ])\n  ),\n  ...Object.fromEntries(\n    Object.keys(actions).map((functionName) => [\n      functionName,\n      (payload = {}) => ({ type: namespace + \".\" + functionName, payload }),\n    ])\n  ),\n  ...Object.fromEntries(\n    Object.entries(selectors).map(([name, f]) => [\n      name,\n      (...args) =>\n        (state) =>\n          f(state, ...args),\n    ])\n  ),\n});\n\nexport { StateShard, immer, initAll };\n\nfunction identity(a) {\n  return a;\n}\n\nfunction pipe(...fs) {\n  return (a) => {\n    for (const f of fs) {\n      a = f(a);\n    }\n    return a;\n  };\n}\n","import { StateShard } from \"./utils\";\n\nconst AppSync = StateShard(\n  \"AppSync\",\n  init,\n  { done, addReasons },\n  { selectDone, selectReasons }\n);\n\nexport { AppSync };\n\nfunction init(state) {\n  if (!state.data) {\n    state.data = {};\n  }\n\n  if (!state.data.sync) {\n    state.data.sync = {};\n  }\n\n  state.data.sync.done = false;\n  state.data.sync.reasons = [];\n}\n\n// Actions\n\nfunction done(state) {\n  const sync = select(state);\n  sync.done = true;\n}\n\nfunction addReasons(state, { reasons }) {\n  const sync = select(state);\n  sync.reasons = [...sync.reasons, ...reasons];\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.data.sync;\n}\n\nfunction selectDone(state) {\n  const sync = select(state);\n  return sync.done;\n}\n\nfunction selectReasons(state) {\n  const sync = select(state);\n  return sync.reasons;\n}\n","import { StateShard } from \"./utils\";\n\nconst CypherCodecs = StateShard(\n  \"CypherCodecs\",\n  init,\n  { set },\n  { select, selectPages, selectByPage }\n);\n\nexport { CypherCodecs };\n\nfunction init(state) {\n  if (!state.data) {\n    state.data = {};\n  }\n\n  state.data.cypherCodecs = [];\n}\n\n// Actions\n\nfunction set(state, { cypherCodecs }) {\n  state.data.cypherCodecs = cypherCodecs;\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.data.cypherCodecs;\n}\n\nfunction selectPages(state) {\n  const codecs = select(state);\n  return codecs.map((codec) => codec.Cypher.page);\n}\n\nfunction selectByPage(state, page) {\n  const codecs = select(state);\n  return codecs.find((codec) => codec.Cypher.page === page);\n}\n","import { StateShard } from \"./utils\";\n\nconst Cyphers = StateShard(\"Cyphers\", init, { set }, { select, selectByPage });\n\nexport { Cyphers };\n\nfunction init(state) {\n  if (!state.data) {\n    state.data = {};\n  }\n\n  state.data.cyphers = {};\n}\n\n// Actions\n\nfunction set(state, { page, cypher }) {\n  const cyphers = select(state);\n  cyphers[page] = cypher;\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.data.cyphers;\n}\n\nfunction selectByPage(state, page) {\n  const cyphers = select(state);\n  return Object.values(cyphers)\n    .flat()\n    .find((cypher) => cypher.name.page === page);\n}\n","import { StateShard } from \"./utils\";\n\nconst Dragging = StateShard(\n  \"Dragging\",\n  init,\n  { activate, deactivate },\n  { select }\n);\n\nexport { Dragging };\n\nfunction init(state) {\n  if (!state.ui) {\n    state.ui = {};\n  }\n\n  state.ui.dragging = false;\n}\n\n// Actions\n\nfunction activate(state) {\n  state.ui.dragging = true;\n}\n\nfunction deactivate(state) {\n  state.ui.dragging = false;\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.ui.dragging;\n}\n","import { StateShard } from \"./utils\";\n\nconst FactionModels = StateShard(\n  \"FactionModels\",\n  init,\n  { set },\n  { select, selectModelPages, selectByPage }\n);\n\nexport { FactionModels };\n\nfunction init(state) {\n  if (!state.data) {\n    state.data = {};\n  }\n\n  state.data.factionModels = {};\n}\n\n// Actions\n\nfunction set(state, { page, factionModels }) {\n  const models = select(state);\n  if (!models[page]) {\n    models[page] = [];\n  }\n  models[page] = [...models[page], ...factionModels];\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.data.factionModels;\n}\n\nfunction selectModelPages(state) {\n  const models = select(state);\n  return Object.values(models)\n    .flat()\n    .map((model) => model.Name.page);\n}\n\nfunction selectByPage(state, page) {\n  const models = select(state);\n  return Object.values(models)\n    .flat()\n    .find((model) => model.Name.page === page);\n}\n","import { StateShard } from \"./utils\";\n\nconst Factions = StateShard(\"Factions\", init, { set }, { select, selectPages });\n\nexport { Factions };\n\nfunction init(state) {\n  if (!state.data) {\n    state.data = {};\n  }\n\n  state.data.factions = {};\n}\n\n// Actions\n\nfunction set(state, { factions }) {\n  state.data.factions = factions;\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.data.factions;\n}\n\nfunction selectPages(state) {\n  const factions = select(state);\n  return Object.keys(factions);\n}\n","import { StateShard } from \"./utils\";\n\nconst Lists = StateShard(\n  \"Lists\",\n  init,\n  {\n    addCard,\n    addEmptyList,\n    moveListBy,\n    removeCard,\n    removeList,\n    set,\n    setCardCortex,\n    setCardVehicleWeapon,\n    setCardWarjackWeapons,\n    setListTitle,\n    toggleCard,\n    moveCard,\n  },\n  { select }\n);\n\nexport { Lists };\n\nconst oneEmptyList = [\n  {\n    title: \"\",\n    cards: [],\n  },\n];\n\nfunction init(state) {\n  if (!state.ui) {\n    state.ui = {};\n  }\n\n  state.ui.lists = oneEmptyList;\n}\n\n// Actions\n\nfunction set(state, { lists }) {\n  state.ui.lists = lists.length > 0 ? lists : oneEmptyList;\n}\n\nfunction setListTitle(state, { listIndex, title }) {\n  const lists = select(state);\n  lists[listIndex].title = title;\n}\n\nfunction addCard(state, { pageId }) {\n  const lists = select(state);\n  const card = { pageId, hidden: true };\n  lists[0].cards.push(card);\n}\n\nfunction addEmptyList(state, { listIndex }) {\n  const lists = select(state);\n  lists.splice(listIndex, 0, oneEmptyList[0]);\n}\n\nfunction removeCard(state, { source }) {\n  const lists = select(state);\n  lists[source.listIndex].cards.splice(source.cardIndex, 1);\n}\n\nfunction removeList(state, { listIndex }) {\n  const lists = select(state);\n  lists.splice(listIndex, 1);\n  if (lists.length === 0) {\n    addEmptyList(state, { listIndex: 0 });\n  }\n}\n\nfunction moveListBy(state, { listIndex, by }) {\n  const lists = select(state);\n  if (\n    (by > 0 && listIndex + by < lists.length) ||\n    (by < 0 && listIndex + by >= 0)\n  ) {\n    const list = lists[listIndex];\n    lists.splice(listIndex, 1);\n    lists.splice(listIndex + by, 0, list);\n  }\n}\n\nfunction moveCard(state, { destination, source }) {\n  const lists = select(state);\n  const card = lists[source.listIndex].cards[source.cardIndex];\n  lists[source.listIndex].cards.splice(source.cardIndex, 1);\n  lists[destination.listIndex].cards.splice(destination.cardIndex, 0, card);\n}\n\nfunction toggleCard(state, { listIndex, cardIndex, pageId }) {\n  const lists = select(state);\n  const card = lists[listIndex].cards[cardIndex];\n  if (card.pageId === pageId) {\n    card.hidden = !card.hidden;\n  }\n}\n\nfunction setCardCortex(state, { listIndex, cardIndex, pageId, cortexIds }) {\n  const lists = select(state);\n  const card = lists[listIndex].cards[cardIndex];\n  if (card.pageId === pageId) {\n    card.cortexIds = cortexIds;\n  }\n}\n\nfunction setCardWarjackWeapons(\n  state,\n  { listIndex, cardIndex, hardpointNameIndex, pageId, warjackWeaponId }\n) {\n  const lists = select(state);\n  const card = lists[listIndex].cards[cardIndex];\n  if (card.pageId === pageId) {\n    if (!card.warjackWeaponIds) {\n      card.warjackWeaponIds = [];\n    }\n    card.warjackWeaponIds[hardpointNameIndex] = warjackWeaponId;\n  }\n}\n\nfunction setCardVehicleWeapon(\n  state,\n  { listIndex, cardIndex, pageId, vehicleWeaponId }\n) {\n  const lists = select(state);\n  const card = lists[listIndex].cards[cardIndex];\n  if (card.pageId === pageId) {\n    card.vehicleWeaponId = vehicleWeaponId;\n  }\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.ui.lists;\n}\n","import { StateShard } from \"./utils\";\n\nconst PageIds = StateShard(\n  \"PageIds\",\n  init,\n  { addPages },\n  { select, selectByPage, selectByPages, selectPageByPageId }\n);\n\nexport { PageIds };\n\nfunction init(state) {\n  if (!state.data) {\n    state.data = {};\n  }\n\n  state.data.pageIds = {};\n}\n\n// Actions\n\nfunction addPages(state, { pageIdByTitle }) {\n  const pageIds = select(state);\n  for (const title in pageIdByTitle) {\n    pageIds[title] = pageIdByTitle[title];\n  }\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.data.pageIds;\n}\n\nfunction selectByPage(state, page) {\n  const pageIds = select(state);\n  return pageIds[page];\n}\n\nfunction selectByPages(state, pages) {\n  const pageIds = select(state);\n  return pages.reduce((acc, page) => [...acc, pageIds[page]], []);\n}\n\nfunction selectPageByPageId(state, pageId) {\n  const pageIds = select(state);\n  return Object.entries(pageIds).reduce(\n    (acc, [page, statePageId]) =>\n      acc ? acc : statePageId === pageId ? page : acc,\n    undefined\n  );\n}\n","import { StateShard } from \"./utils\";\n\nconst Url = StateShard(\"Url\", init, { set }, { select });\n\nexport { Url };\n\nfunction init(state) {\n  if (!state.ui) {\n    state.ui = {};\n  }\n\n  state.ui.url = \"\";\n}\n\n// Actions\n\nfunction set(state, { url }) {\n  state.ui.url = url;\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.ui.url;\n}\n","import { StateShard } from \"./utils\";\n\nconst WildCardModels = StateShard(\n  \"WildCardModels\",\n  init,\n  { set },\n  { select, selectByPage, selectModelPages }\n);\n\nexport { WildCardModels };\n\nfunction init(state) {\n  if (!state.data) {\n    state.data = {};\n  }\n\n  state.data.wildCardModels = {};\n}\n\n// Actions\n\nfunction set(state, { wildCards }) {\n  const models = select(state);\n  for (const wildCard of wildCards) {\n    models[wildCard.faction] = wildCard.models;\n  }\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.data.wildCardModels;\n}\n\nfunction selectModelPages(state) {\n  const models = select(state);\n  return Object.values(models)\n    .flat()\n    .map((model) => model.Name.page);\n}\n\nfunction selectByPage(state, page) {\n  const models = select(state);\n  return Object.values(models)\n    .flat()\n    .find((model) => model.Name.page === page);\n}\n","import { StateShard } from \"./utils\";\n\nconst Models = StateShard(\"Models\", init, { set }, { select, selectByPage });\n\nexport { Models };\n\nfunction init(state) {\n  if (!state.data) {\n    state.data = {};\n  }\n\n  state.data.models = {};\n}\n\n// Actions\n\nfunction set(state, { page, model }) {\n  const models = select(state);\n  models[page] = model;\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.data.models;\n}\n\nfunction selectByPage(state, page) {\n  const models = select(state);\n  return Object.values(models)\n    .flat()\n    .find((model) => model.name.page === page);\n}\n","import { StateShard } from \"./utils\";\n\nconst WarjackWeapons = StateShard(\n  \"WarjackWeapons\",\n  init,\n  { set },\n  { select, selectByPage }\n);\n\nexport { WarjackWeapons };\n\nfunction init(state) {\n  if (!state.data) {\n    state.data = {};\n  }\n\n  state.data.warjackWeapons = {};\n}\n\n// Actions\n\nfunction set(state, { page, warjackWeapon }) {\n  const warjackWeapons = select(state);\n  warjackWeapons[page] = warjackWeapon;\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.data.warjackWeapons;\n}\n\nfunction selectByPage(state, page) {\n  const warjackWeapons = select(state);\n  return warjackWeapons[page];\n}\n","import \"./App.css\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  Badge,\n  Card,\n  Col,\n  Drawer,\n  Input,\n  Layout,\n  Menu,\n  Row,\n  Select,\n  Tooltip,\n} from \"antd\";\nimport {\n  DeleteOutlined,\n  DownSquareOutlined,\n  MenuUnfoldOutlined,\n  PlusSquareOutlined,\n  SyncOutlined,\n  UpSquareOutlined,\n} from \"@ant-design/icons\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport Aeternus_Continuum from \"./Aeternus_Continuum.png\";\nimport Fallback from \"./Fallback.png\";\nimport Empyrean from \"./Empyrean.png\";\nimport Iron_Star_Alliance from \"./Iron_Star_Alliance.png\";\nimport Lost_Legion from \"./Lost_Legion.png\";\nimport Marcher_Worlds from \"./Marcher_Worlds.png\";\nimport Wild_Card from \"./Wild_Card.png\";\nimport { CardDragEnded, CardDragStarted, MenuItemClicked } from \"../messages\";\nimport { AppSync } from \"../state/AppSync\";\nimport { CypherCodecs } from \"../state/CypherCodecs\";\nimport { Cyphers as Cyphers2 } from \"../state/Cyphers\";\nimport { Dragging } from \"../state/Dragging\";\nimport { FactionModels } from \"../state/FactionModels\";\nimport { Factions } from \"../state/Factions\";\nimport { Lists } from \"../state/Lists\";\nimport { PageIds } from \"../state/PageIds\";\nimport { Url } from \"../state/Url\";\nimport { WildCardModels } from \"../state/WildCardModels\";\nimport { Models } from \"../state/Models\";\nimport { WarjackWeapons } from \"../state/WarjackWeapons\";\n\nconst { Header, Footer, Content } = Layout;\nconst { TextArea } = Input;\nconst { SubMenu } = Menu;\n\nfunction FactionImage({ faction }) {\n  switch (faction) {\n    case \"Aeternus_Continuum\":\n      return <img src={Aeternus_Continuum} alt={faction} height=\"35px\" />;\n    case \"Empyrean\":\n      return <img src={Empyrean} alt={faction} height=\"35px\" />;\n    case \"Iron_Star_Alliance\":\n      return <img src={Iron_Star_Alliance} alt={faction} height=\"35px\" />;\n    case \"Lost_Legion\":\n      return <img src={Lost_Legion} alt={faction} height=\"35px\" />;\n    case \"Marcher_Worlds\":\n      return <img src={Marcher_Worlds} alt={faction} height=\"35px\" />;\n    case \"Wild_Card\":\n      return <img src={Wild_Card} alt={faction} height=\"35px\" />;\n    case \"Universal\":\n      return <img src={Fallback} alt={faction} height=\"35px\" />;\n    default:\n      return <img src={Fallback} alt={faction} height=\"35px\" />;\n  }\n}\n\nfunction AppPresentation({\n  initialized,\n  syncReasons,\n  factionModels,\n  wildCardModels,\n  cypherCodecs,\n  dragging,\n  menuItemClicked,\n  dragEnd,\n  dragStart,\n  lists,\n  toggleCard,\n  removeList,\n  addEmptyList,\n  moveListBy,\n  setListTitle,\n  setUrl,\n  url,\n  bookmark,\n  open,\n  setCardCortex,\n  setCardWarjackWeapons,\n  setCardVehicleWeapon,\n  factions,\n  warjackWeapons,\n}) {\n  const [openDrawer, setOpenDrawer] = React.useState(\"\");\n\n  const onOpenChangeDrawers = (keys) => {\n    if (keys.length > 0) {\n      const key = keys[0];\n      if (key === openDrawer) {\n        setOpenDrawer(\"\");\n      } else {\n        setOpenDrawer(keys[0]);\n      }\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Layout>\n        <Layout>\n          <DragDropContext onDragStart={dragStart} onDragEnd={dragEnd}>\n            <Header>\n              <Droppable key={\"trash_header\"} droppableId={\"trash_header\"}>\n                {(provided) => (\n                  <div ref={provided.innerRef} {...provided.droppableProps}>\n                    {dragging ? (\n                      <div\n                        style={{\n                          animation:\n                            \"shake 0.82s cubic-bezier(.36,.07,.19,.97) both\",\n                          color: \"white\",\n                        }}\n                      >\n                        <DeleteOutlined />\n                      </div>\n                    ) : (\n                      <a className=\"logo\" href=\"/\">\n                        WARFASTER\n                      </a>\n                    )}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n            </Header>\n            {!initialized ? (\n              <Content>\n                <Layout>\n                  <Row>\n                    <Col xs={24} sm={12} md={12} lg={12} xl={8} xxl={8}>\n                      <div className=\"cards\" key=\"cards0\">\n                        <div style={{ cursor: \"pointer\" }} className=\"header\">\n                          <Row>\n                            <Col span={16} className=\"army-list-title\">\n                              <TextArea\n                                value={\"Setting up Warfaster\"}\n                                maxLength={30}\n                                autoSize\n                              />\n                            </Col>\n                            <Col span={8} className=\"faction-icons\">\n                              <SyncOutlined\n                                spin\n                                style={{\n                                  color: \"#d1c5b1\",\n                                  fontSize: \"23px\",\n                                  margin: \"3px 10px 0 0\",\n                                }}\n                              />\n                            </Col>\n                          </Row>\n                        </div>\n\n                        <div>\n                          {syncReasons.map(({ reason, description }, index) => (\n                            <div className=\"body\" key={`reason${index}`}>\n                              <Card hoverable className=\"card\">\n                                <Card.Meta\n                                  avatar={\n                                    <div\n                                      style={{\n                                        height: \"25px\",\n                                        width: \"35px\",\n                                        textAlign: \"center\",\n                                      }}\n                                    >\n                                      <SyncOutlined\n                                        spin\n                                        style={{\n                                          color: \"#d1c5b1\",\n                                          fontSize: \"35px\",\n                                        }}\n                                      />\n                                    </div>\n                                  }\n                                  title={\n                                    <>\n                                      <div>{reason}</div>\n                                      <div className=\"card-type\">\n                                        {description}\n                                      </div>\n                                    </>\n                                  }\n                                />\n                              </Card>\n                            </div>\n                          ))}\n                        </div>\n                        <div className=\"footer\">\n                          <Badge\n                            size=\"small\"\n                            key=\"_badge\"\n                            count={syncReasons.length}\n                            offset={[10, 5]}\n                          >\n                            Loading:\n                          </Badge>\n                        </div>\n                      </div>\n                    </Col>\n                  </Row>\n                </Layout>\n              </Content>\n            ) : (\n              <>\n                <Content>\n                  <Menu\n                    id=\"factions\"\n                    openKeys={[]}\n                    onOpenChange={onOpenChangeDrawers}\n                    mode=\"horizontal\"\n                    triggerSubMenuAction=\"click\"\n                  >\n                    {factionModels.map(([factionName, faction, models]) => (\n                      <SubMenu\n                        key={faction}\n                        icon={<FactionImage faction={faction} />}\n                      ></SubMenu>\n                    ))}\n                  </Menu>\n                </Content>\n                <Content>\n                  <Layout>\n                    <Row gutter={16}>\n                      {lists.map(({ title, cards }, listIndex) => (\n                        <Col\n                          key={`lists_col_${listIndex}`}\n                          xs={24}\n                          sm={12}\n                          md={12}\n                          lg={12}\n                          xl={8}\n                          xxl={8}\n                        >\n                          <div className=\"cards\" key={`cards${listIndex}`}>\n                            <Tooltip\n                              placement=\"top\"\n                              color=\"transparent\"\n                              trigger=\"click\"\n                              align={{ offset: [0, 17] }}\n                              title={\n                                <div className=\"ant-tooltip-inner-box\">\n                                  <div\n                                    onClick={removeList(listIndex)}\n                                    style={{\n                                      cursor: \"pointer\",\n                                      display: \"inline-block\",\n                                      paddingRight: \"4px\",\n                                      fontSize: \"1.5em\",\n                                    }}\n                                  >\n                                    <DeleteOutlined />\n                                  </div>\n                                  <div\n                                    onClick={addEmptyList(listIndex)}\n                                    style={{\n                                      cursor: \"pointer\",\n                                      display: \"inline-block\",\n                                      padding: \"0 4px\",\n                                      fontSize: \"1.5em\",\n                                    }}\n                                  >\n                                    <PlusSquareOutlined />\n                                  </div>\n                                  <div\n                                    onClick={moveListBy(listIndex, -1)}\n                                    style={{\n                                      cursor: \"pointer\",\n                                      display: \"inline-block\",\n                                      padding: \"0 4px\",\n                                      fontSize: \"1.5em\",\n                                    }}\n                                  >\n                                    <UpSquareOutlined />\n                                  </div>\n                                  <div\n                                    onClick={moveListBy(listIndex, 1)}\n                                    style={{\n                                      cursor: \"pointer\",\n                                      display: \"inline-block\",\n                                      paddingLeft: \"4px\",\n                                      fontSize: \"1.5em\",\n                                    }}\n                                  >\n                                    <DownSquareOutlined />\n                                  </div>\n                                </div>\n                              }\n                            >\n                              <div\n                                style={{ cursor: \"pointer\" }}\n                                className=\"header\"\n                              >\n                                <Row>\n                                  <Col span={16} className=\"army-list-title\">\n                                    <TextArea\n                                      placeholder={generateListNamePlaceholder(\n                                        cards,\n                                        factions,\n                                        \"Name your list\"\n                                      )}\n                                      value={title}\n                                      maxLength={30}\n                                      autoSize\n                                      onChange={setListTitle(listIndex)}\n                                    />\n                                  </Col>\n                                  <Col span={8} className=\"faction-icons\">\n                                    {Object.entries(\n                                      cards.reduce(\n                                        (acc, card) => ({\n                                          ...acc,\n                                          ...(card.faction\n                                            ? {\n                                                [card.faction]:\n                                                  (acc[card.faction] || 0) + 1,\n                                              }\n                                            : {\n                                                Universal:\n                                                  (acc.Universal || 0) + 1,\n                                              }),\n                                        }),\n                                        {}\n                                      )\n                                    )\n                                      .sort()\n                                      .map(([faction, count], i) => (\n                                        <Badge\n                                          size=\"small\"\n                                          key={`badge${i}`}\n                                          count={count}\n                                          offset={[0, 10]}\n                                        >\n                                          <FactionImage faction={faction} />\n                                        </Badge>\n                                      ))}\n                                  </Col>\n                                </Row>\n                              </div>\n                            </Tooltip>\n\n                            <Droppable\n                              key={`cards_${listIndex}`}\n                              droppableId={`cards_${listIndex}`}\n                            >\n                              {(provided) => (\n                                <div\n                                  ref={provided.innerRef}\n                                  {...provided.droppableProps}\n                                >\n                                  {cards.map(\n                                    (\n                                      {\n                                        card,\n                                        hidden,\n                                        type,\n                                        title,\n                                        page,\n                                        pageId,\n                                        cortexIds,\n                                        vehicleWeaponId,\n                                        warjackWeaponIds,\n                                        subtype,\n                                        faction,\n                                        details,\n                                      },\n                                      cardIndex\n                                    ) => (\n                                      <Draggable\n                                        key={`${page}_${listIndex}_${cardIndex}`}\n                                        draggableId={`${page}_${listIndex}_${cardIndex}`}\n                                        index={cardIndex}\n                                      >\n                                        {(provided) => (\n                                          <div\n                                            className=\"body\"\n                                            ref={provided.innerRef}\n                                            {...provided.draggableProps}\n                                            {...provided.dragHandleProps}\n                                          >\n                                            <Card\n                                              hoverable\n                                              className={[\n                                                \"card\",\n                                                faction,\n                                                type,\n                                              ]}\n                                              onClick={toggleCard(\n                                                listIndex,\n                                                cardIndex,\n                                                pageId,\n                                                card\n                                              )}\n                                            >\n                                              <Card.Meta\n                                                avatar={\n                                                  faction ? (\n                                                    <div\n                                                      style={{\n                                                        height: \"25px\",\n                                                        width: \"35px\",\n                                                        textAlign: \"center\",\n                                                      }}\n                                                    >\n                                                      <FactionImage\n                                                        faction={faction}\n                                                      />\n                                                    </div>\n                                                  ) : (\n                                                    <FactionImage faction=\"Universal\" />\n                                                  )\n                                                }\n                                                title={\n                                                  <>\n                                                    <div>{title}</div>\n                                                    <div className=\"card-type\">\n                                                      {(faction || \"\").replace(\n                                                        /_/g,\n                                                        \" \"\n                                                      )}\n                                                      {subtype\n                                                        ? \" \" + subtype\n                                                        : \"\"}\n                                                      {type ? \" \" + type : \"\"}\n                                                    </div>\n                                                    <div>\n                                                      <span className=\"subtitle\">\n                                                        {[\n                                                          ...(!details ||\n                                                          !details.vehicleWeaponSelection ||\n                                                          !vehicleWeaponName(\n                                                            details.vehicleWeaponSelection,\n                                                            vehicleWeaponId\n                                                          )\n                                                            ? []\n                                                            : [\n                                                                vehicleWeaponName(\n                                                                  details.vehicleWeaponSelection,\n                                                                  vehicleWeaponId\n                                                                ),\n                                                              ]),\n                                                          ...(!details ||\n                                                          !details.cortexSelections ||\n                                                          !cortexName(\n                                                            details.cortexSelections,\n                                                            cortexIds\n                                                          )\n                                                            ? []\n                                                            : [\n                                                                cortexName(\n                                                                  details.cortexSelections,\n                                                                  cortexIds\n                                                                ),\n                                                              ]),\n                                                          ...(!details ||\n                                                          !details.warjackWeaponSelections ||\n                                                          !warjackWeaponIds ||\n                                                          warjackWeaponIds.length ===\n                                                            0\n                                                            ? []\n                                                            : warjackWeaponNamesSubtitle(\n                                                                details.warjackWeaponSelections,\n                                                                warjackWeaponIds\n                                                              )),\n                                                        ].join(\", \")}\n                                                      </span>\n                                                    </div>\n                                                  </>\n                                                }\n                                              />\n                                              {hidden ? (\n                                                <></>\n                                              ) : !details ? (\n                                                <div\n                                                  style={{\n                                                    margin: \"10px 0\",\n                                                    textAlign: \"center\",\n                                                  }}\n                                                >\n                                                  <SyncOutlined\n                                                    spin\n                                                    style={{ fontSize: \"23px\" }}\n                                                  />\n                                                </div>\n                                              ) : (\n                                                <div className=\"card-content\">\n                                                  {!details.pow ? (\n                                                    <></>\n                                                  ) : (\n                                                    <p>\n                                                      Pow: {details.pow.text}\n                                                    </p>\n                                                  )}\n                                                  {!details.effect ||\n                                                  details.effect.length ===\n                                                    0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    details.effect.map(\n                                                      (effect, index) => (\n                                                        <p\n                                                          key={`effect_${index}`}\n                                                        >\n                                                          {effect}\n                                                        </p>\n                                                      )\n                                                    )\n                                                  )}\n                                                  {!details.squadSize ? (\n                                                    <></>\n                                                  ) : (\n                                                    <dl>\n                                                      <dt>Squad Size</dt>\n                                                      <dd>\n                                                        {details.squadSize}\n                                                      </dd>\n                                                    </dl>\n                                                  )}\n                                                  {!details.deploymentCost ? (\n                                                    <></>\n                                                  ) : (\n                                                    <dl>\n                                                      <dt>DC</dt>\n                                                      <dd>\n                                                        {details.deploymentCost}\n                                                      </dd>\n                                                    </dl>\n                                                  )}\n                                                  {!details.baseSize ? (\n                                                    <></>\n                                                  ) : (\n                                                    <dl>\n                                                      <dt>Base Size</dt>\n                                                      <dd>\n                                                        {details.baseSize}\n                                                      </dd>\n                                                    </dl>\n                                                  )}\n                                                  {!details.health ? (\n                                                    <></>\n                                                  ) : (\n                                                    <dl>\n                                                      <dt>Health</dt>\n                                                      <dd>{details.health}</dd>\n                                                    </dl>\n                                                  )}\n                                                  {!details.wildCardFactions ||\n                                                  Object.values(\n                                                    details.wildCardFactions\n                                                  ).length === 0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>Wild Card Factions</p>\n                                                      <ul>\n                                                        {Object.values(\n                                                          details.wildCardFactions\n                                                        ).map(\n                                                          ({ text }, index) => (\n                                                            <li\n                                                              key={`wild_card_faction_${index}`}\n                                                            >\n                                                              {text}\n                                                            </li>\n                                                          )\n                                                        )}\n                                                      </ul>\n                                                    </>\n                                                  )}\n                                                  {!details.hardpoints ? (\n                                                    <></>\n                                                  ) : (\n                                                    <dl>\n                                                      <dt>Hardpoints</dt>\n                                                      <dd>\n                                                        {details.hardpoints}\n                                                      </dd>\n                                                    </dl>\n                                                  )}\n                                                  {!details.weaponPoints ? (\n                                                    <></>\n                                                  ) : (\n                                                    <dl>\n                                                      <dt>Weapon Points</dt>\n                                                      <dd>\n                                                        {details.weaponPoints}\n                                                      </dd>\n                                                    </dl>\n                                                  )}\n                                                  {!details.modelStats ||\n                                                  Object.keys(\n                                                    details.modelStats\n                                                  ).length === 0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    <table>\n                                                      <thead>\n                                                        <tr>\n                                                          {Object.keys(\n                                                            details.modelStats\n                                                          ).map(\n                                                            (name, index) => (\n                                                              <th\n                                                                key={`${name}_stat_${index}`}\n                                                              >\n                                                                {name}\n                                                              </th>\n                                                            )\n                                                          )}\n                                                        </tr>\n                                                      </thead>\n                                                      <tbody>\n                                                        <tr>\n                                                          {Object.entries(\n                                                            details.modelStats\n                                                          ).map(\n                                                            (\n                                                              [name, stat],\n                                                              index\n                                                            ) => (\n                                                              <td\n                                                                key={`${name}_stat_value_${index}`}\n                                                              >\n                                                                {stat}\n                                                              </td>\n                                                            )\n                                                          )}\n                                                        </tr>\n                                                      </tbody>\n                                                    </table>\n                                                  )}\n                                                  {!details.specialRules ||\n                                                  Object.entries(\n                                                    details.specialRules\n                                                  ).length === 0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>Special Rules</p>\n                                                      <dl>\n                                                        {Object.entries(\n                                                          details.specialRules\n                                                        ).map(\n                                                          (\n                                                            [name, text],\n                                                            index\n                                                          ) => (\n                                                            <React.Fragment\n                                                              key={`special_rules_${index}`}\n                                                            >\n                                                              <dt>{name}</dt>\n                                                              <dd>{text}</dd>\n                                                            </React.Fragment>\n                                                          )\n                                                        )}\n                                                      </dl>\n                                                    </>\n                                                  )}\n                                                  {!details.weapons ||\n                                                  details.weapons.length ===\n                                                    0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>Weapons</p>\n                                                      <table>\n                                                        <thead>\n                                                          <tr>\n                                                            <th>Name</th>\n                                                            <th>Attack Type</th>\n                                                            <th>Damage Type</th>\n                                                            <th>Range</th>\n                                                            <th>POW</th>\n                                                          </tr>\n                                                        </thead>\n                                                        <tbody>\n                                                          {details.weapons.map(\n                                                            (weapon, index) => (\n                                                              <React.Fragment\n                                                                key={`weapon_number_${index}`}\n                                                              >\n                                                                <tr>\n                                                                  <td>\n                                                                    {\n                                                                      weapon[\n                                                                        \"Name\"\n                                                                      ]\n                                                                    }\n                                                                  </td>\n                                                                  <td>\n                                                                    {\n                                                                      weapon[\n                                                                        \"Attack Type\"\n                                                                      ]\n                                                                    }\n                                                                  </td>\n                                                                  <td>\n                                                                    {\n                                                                      weapon[\n                                                                        \"Damage Type\"\n                                                                      ]\n                                                                    }\n                                                                  </td>\n                                                                  <td>\n                                                                    {\n                                                                      weapon[\n                                                                        \"Range\"\n                                                                      ]\n                                                                    }\n                                                                  </td>\n                                                                  <td>\n                                                                    {\n                                                                      weapon[\n                                                                        \"POW\"\n                                                                      ]\n                                                                    }\n                                                                  </td>\n                                                                </tr>\n                                                                {!weapon.specialRules ? (\n                                                                  <></>\n                                                                ) : (\n                                                                  Object.entries(\n                                                                    weapon.specialRules\n                                                                  ).map(\n                                                                    (\n                                                                      [\n                                                                        rule,\n                                                                        text,\n                                                                      ],\n                                                                      ruleIndex\n                                                                    ) => (\n                                                                      <tr\n                                                                        key={`weapon_number_${index}_rule_${ruleIndex}`}\n                                                                      >\n                                                                        <td colSpan=\"5\">\n                                                                          <dl>\n                                                                            <dt>\n                                                                              {\n                                                                                rule\n                                                                              }\n                                                                            </dt>\n                                                                            <dd>\n                                                                              {\n                                                                                text\n                                                                              }\n                                                                            </dd>\n                                                                          </dl>\n                                                                        </td>\n                                                                      </tr>\n                                                                    )\n                                                                  )\n                                                                )}\n                                                              </React.Fragment>\n                                                            )\n                                                          )}\n                                                        </tbody>\n                                                      </table>\n                                                    </>\n                                                  )}\n                                                  {!details.advantages ||\n                                                  Object.entries(\n                                                    details.advantages\n                                                  ).length === 0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>Advantages</p>\n                                                      <dl>\n                                                        {Object.entries(\n                                                          details.advantages\n                                                        ).map(\n                                                          (\n                                                            [name, text],\n                                                            index\n                                                          ) => (\n                                                            <React.Fragment\n                                                              key={`advantage_${index}`}\n                                                            >\n                                                              <dt>{name}</dt>\n                                                              <dd>{text}</dd>\n                                                            </React.Fragment>\n                                                          )\n                                                        )}\n                                                      </dl>\n                                                    </>\n                                                  )}\n                                                  {!details.maneuvers ||\n                                                  Object.values(\n                                                    details.maneuvers\n                                                  ).length === 0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>Maneuvers</p>\n                                                      <dl>\n                                                        {Object.entries(\n                                                          details.maneuvers\n                                                        ).map(\n                                                          (\n                                                            [name, text],\n                                                            index\n                                                          ) => (\n                                                            <React.Fragment\n                                                              key={`advantage_${index}`}\n                                                            >\n                                                              <dt>{name}</dt>\n                                                              <dd>{text}</dd>\n                                                            </React.Fragment>\n                                                          )\n                                                        )}\n                                                      </dl>\n                                                    </>\n                                                  )}\n\n                                                  {!details.vehicleWeaponSelection ||\n                                                  details.vehicleWeaponSelection\n                                                    .length === 0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>\n                                                        Vehicle Weapon\n                                                        Selections\n                                                      </p>\n                                                      <Select\n                                                        defaultValue={\n                                                          <span\n                                                            style={{\n                                                              color: \"gray\",\n                                                              fontStyle:\n                                                                \"italic\",\n                                                            }}\n                                                          >\n                                                            Vehicle Weapon\n                                                          </span>\n                                                        }\n                                                        onClick={(event) =>\n                                                          event.stopPropagation()\n                                                        }\n                                                        onSelect={setCardVehicleWeapon(\n                                                          listIndex,\n                                                          cardIndex,\n                                                          pageId\n                                                        )}\n                                                        value={\n                                                          !vehicleWeaponId\n                                                            ? undefined\n                                                            : vehicleWeaponName(\n                                                                details.vehicleWeaponSelection,\n                                                                vehicleWeaponId\n                                                              )\n                                                        }\n                                                      >\n                                                        {details.vehicleWeaponSelection.map(\n                                                          (\n                                                            { text, pageId },\n                                                            index\n                                                          ) => (\n                                                            <Select.Option\n                                                              key={`vehicle_weapon_${index}`}\n                                                              label={pageId}\n                                                              value={text}\n                                                              onClick={(\n                                                                event\n                                                              ) =>\n                                                                event.stopPropagation()\n                                                              }\n                                                            >\n                                                              {text}\n                                                              {\n                                                                // TODO\n                                                              }\n                                                            </Select.Option>\n                                                          )\n                                                        )}\n                                                      </Select>\n                                                    </>\n                                                  )}\n\n                                                  {!details.vehicleWeaponSelection ||\n                                                  Object.values(\n                                                    details.vehicleWeaponSelection\n                                                  ).length === 0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>\n                                                        Vehicle Weapon Selection\n                                                      </p>\n                                                      <ol>\n                                                        {Object.values(\n                                                          details.vehicleWeaponSelection\n                                                        ).map(\n                                                          (\n                                                            { text, page },\n                                                            index\n                                                          ) => (\n                                                            <li\n                                                              key={`weapon_selection_${index}`}\n                                                            >\n                                                              <a href={page}>\n                                                                {text}\n                                                              </a>\n                                                            </li>\n                                                          )\n                                                        )}\n                                                      </ol>\n                                                    </>\n                                                  )}\n                                                  {!details.cortexes ||\n                                                  Object.entries(\n                                                    details.cortexes\n                                                  ).length === 0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>Cortex</p>\n                                                      <ol>\n                                                        {Object.entries(\n                                                          details.cortexes\n                                                        ).map(\n                                                          (\n                                                            [\n                                                              cortex,\n                                                              advantages,\n                                                            ],\n                                                            index\n                                                          ) => (\n                                                            <li\n                                                              key={`cortex_${index}`}\n                                                            >\n                                                              {cortex}\n                                                              <dl>\n                                                                {Object.entries(\n                                                                  advantages\n                                                                ).map(\n                                                                  (\n                                                                    [\n                                                                      name,\n                                                                      text,\n                                                                    ],\n                                                                    advantageIndex\n                                                                  ) => (\n                                                                    <React.Fragment\n                                                                      key={`cortex_${index}_advantage_${advantageIndex}`}\n                                                                    >\n                                                                      <dt>\n                                                                        {name}\n                                                                      </dt>\n                                                                      <dd>\n                                                                        {text}\n                                                                      </dd>\n                                                                    </React.Fragment>\n                                                                  )\n                                                                )}\n                                                              </dl>\n                                                            </li>\n                                                          )\n                                                        )}\n                                                      </ol>\n                                                    </>\n                                                  )}\n                                                  {!details.cortexSelections ||\n                                                  Object.entries(\n                                                    details.cortexSelections\n                                                  ).length === 0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>Cortex Selections</p>\n                                                      <Select\n                                                        defaultValue={\n                                                          <span\n                                                            style={{\n                                                              color: \"gray\",\n                                                              fontStyle:\n                                                                \"italic\",\n                                                            }}\n                                                          >\n                                                            Cortex\n                                                          </span>\n                                                        }\n                                                        onClick={(event) =>\n                                                          event.stopPropagation()\n                                                        }\n                                                        onSelect={setCardCortex(\n                                                          listIndex,\n                                                          cardIndex,\n                                                          pageId\n                                                        )}\n                                                        value={\n                                                          !cortexIds\n                                                            ? undefined\n                                                            : cortexName(\n                                                                details.cortexSelections,\n                                                                cortexIds\n                                                              )\n                                                        }\n                                                      >\n                                                        {Object.entries(\n                                                          details.cortexSelections\n                                                        ).map(\n                                                          (\n                                                            [\n                                                              cortex,\n                                                              advantages,\n                                                            ],\n                                                            index\n                                                          ) => (\n                                                            <Select.Option\n                                                              key={`cortex_${index}`}\n                                                              label={Object.values(\n                                                                advantages\n                                                              ).map(\n                                                                ({\n                                                                  categoryId,\n                                                                }) => categoryId\n                                                              )}\n                                                              value={cortex}\n                                                              onClick={(\n                                                                event\n                                                              ) =>\n                                                                event.stopPropagation()\n                                                              }\n                                                            >\n                                                              {cortex}\n                                                              <dl>\n                                                                {Object.entries(\n                                                                  advantages\n                                                                ).map(\n                                                                  (\n                                                                    [\n                                                                      name,\n                                                                      { text },\n                                                                    ],\n                                                                    advantageIndex\n                                                                  ) => (\n                                                                    <React.Fragment\n                                                                      key={`cortex_${index}_advantage_${advantageIndex}`}\n                                                                    >\n                                                                      <dt>\n                                                                        {name}\n                                                                      </dt>\n                                                                      <dd>\n                                                                        {text}\n                                                                      </dd>\n                                                                    </React.Fragment>\n                                                                  )\n                                                                )}\n                                                              </dl>\n                                                            </Select.Option>\n                                                          )\n                                                        )}\n                                                      </Select>\n                                                    </>\n                                                  )}\n                                                  {!details.chassisSpecialRules ||\n                                                  Object.entries(\n                                                    details.chassisSpecialRules\n                                                  ).length === 0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>\n                                                        Chassis Special Rules\n                                                      </p>\n                                                      <dl>\n                                                        {Object.entries(\n                                                          details.chassisSpecialRules\n                                                        ).map(\n                                                          (\n                                                            [name, text],\n                                                            index\n                                                          ) => (\n                                                            <React.Fragment\n                                                              key={`advantage_${index}`}\n                                                            >\n                                                              <dt>{name}</dt>\n                                                              <dd>{text}</dd>\n                                                            </React.Fragment>\n                                                          )\n                                                        )}\n                                                      </dl>\n                                                    </>\n                                                  )}\n                                                  {!details.hardpointNames ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>\n                                                        Warjack Weapon\n                                                        Selections\n                                                      </p>\n                                                      {details.hardpointNames.map(\n                                                        (\n                                                          hardpointName,\n                                                          hardpointNameIndex\n                                                        ) =>\n                                                          !details.warjackWeaponSelections ||\n                                                          Object.keys(\n                                                            details.warjackWeaponSelections\n                                                          ).length === 0 ? (\n                                                            <></>\n                                                          ) : (\n                                                            <div\n                                                              key={`warjack_weapon_${hardpointNameIndex}`}\n                                                            >\n                                                              <Select\n                                                                defaultValue={\n                                                                  <span\n                                                                    style={{\n                                                                      color:\n                                                                        \"gray\",\n                                                                      fontStyle:\n                                                                        \"italic\",\n                                                                    }}\n                                                                  >\n                                                                    {\n                                                                      hardpointName\n                                                                    }\n                                                                  </span>\n                                                                }\n                                                                onClick={(\n                                                                  event\n                                                                ) =>\n                                                                  event.stopPropagation()\n                                                                }\n                                                                onSelect={setCardWarjackWeapons(\n                                                                  listIndex,\n                                                                  cardIndex,\n                                                                  hardpointNameIndex,\n                                                                  pageId\n                                                                )}\n                                                                value={\n                                                                  !warjackWeaponIds ||\n                                                                  !warjackWeaponIds[\n                                                                    hardpointNameIndex\n                                                                  ]\n                                                                    ? undefined\n                                                                    : warjackWeaponNames(\n                                                                        details.warjackWeaponSelections,\n                                                                        warjackWeaponIds[\n                                                                          hardpointNameIndex\n                                                                        ]\n                                                                      )\n                                                                }\n                                                              >\n                                                                {Object.values(\n                                                                  details.warjackWeaponSelections\n                                                                )\n                                                                  .filter(\n                                                                    ({\n                                                                      location,\n                                                                    }) =>\n                                                                      location ===\n                                                                      hardpointName\n                                                                  )\n                                                                  .map(\n                                                                    (\n                                                                      {\n                                                                        name,\n                                                                        page,\n                                                                        pageId,\n                                                                        cost,\n                                                                        location,\n                                                                      },\n                                                                      index\n                                                                    ) => (\n                                                                      <Select.Option\n                                                                        key={`warjack_weapon_${hardpointNameIndex}_${index}`}\n                                                                        label={\n                                                                          pageId\n                                                                        }\n                                                                        value={\n                                                                          name\n                                                                        }\n                                                                        onClick={(\n                                                                          event\n                                                                        ) =>\n                                                                          event.stopPropagation()\n                                                                        }\n                                                                      >\n                                                                        <h3>\n                                                                          {warjackWeaponName(\n                                                                            name,\n                                                                            cost\n                                                                          )}\n                                                                        </h3>\n                                                                        <div>\n                                                                          {!warjackWeapons[\n                                                                            page.split(\n                                                                              \"#\"\n                                                                            )[0]\n                                                                          ] ? (\n                                                                            \"Weapon details missing!\"\n                                                                          ) : (\n                                                                            <>\n                                                                              <div>\n                                                                                Location:{\" \"}\n                                                                                {\n                                                                                  warjackWeapons[\n                                                                                    page.split(\n                                                                                      \"#\"\n                                                                                    )[0]\n                                                                                  ]\n                                                                                    .location\n                                                                                }\n                                                                              </div>\n                                                                              {!warjackWeapons[\n                                                                                page.split(\n                                                                                  \"#\"\n                                                                                )[0]\n                                                                              ]\n                                                                                .specialRules ? (\n                                                                                \"\"\n                                                                              ) : (\n                                                                                <dl>\n                                                                                  {Object.entries(\n                                                                                    warjackWeapons[\n                                                                                      page.split(\n                                                                                        \"#\"\n                                                                                      )[0]\n                                                                                    ]\n                                                                                      .specialRules\n                                                                                  ).map(\n                                                                                    (\n                                                                                      [\n                                                                                        name,\n                                                                                        rule,\n                                                                                      ],\n                                                                                      index\n                                                                                    ) => (\n                                                                                      <React.Fragment\n                                                                                        key={`special_rules_${page}_${index}`}\n                                                                                      >\n                                                                                        <dt>\n                                                                                          {\n                                                                                            name\n                                                                                          }\n                                                                                        </dt>\n                                                                                        <dd>\n                                                                                          {\n                                                                                            rule\n                                                                                          }\n                                                                                        </dd>\n                                                                                      </React.Fragment>\n                                                                                    )\n                                                                                  )}\n                                                                                </dl>\n                                                                              )}\n                                                                              {!warjackWeapons[\n                                                                                page.split(\n                                                                                  \"#\"\n                                                                                )[0]\n                                                                              ]\n                                                                                .weapons ? (\n                                                                                \"\"\n                                                                              ) : (\n                                                                                <table>\n                                                                                  <thead>\n                                                                                    <tr>\n                                                                                      <th>\n                                                                                        Name\n                                                                                      </th>\n                                                                                      <th>\n                                                                                        Attack\n                                                                                        Type\n                                                                                      </th>\n                                                                                      <th>\n                                                                                        Damage\n                                                                                        Type\n                                                                                      </th>\n                                                                                      <th>\n                                                                                        Range\n                                                                                      </th>\n                                                                                      <th>\n                                                                                        POW\n                                                                                      </th>\n                                                                                    </tr>\n                                                                                  </thead>\n                                                                                  <tbody>\n                                                                                    {warjackWeapons[\n                                                                                      page.split(\n                                                                                        \"#\"\n                                                                                      )[0]\n                                                                                    ].weapons.map(\n                                                                                      (\n                                                                                        weapon,\n                                                                                        index\n                                                                                      ) => (\n                                                                                        <React.Fragment\n                                                                                          key={`warjack_weapons_weapon_${page}_${index}`}\n                                                                                        >\n                                                                                          <tr>\n                                                                                            <td>\n                                                                                              {\n                                                                                                weapon[\n                                                                                                  \"Name\"\n                                                                                                ]\n                                                                                              }\n                                                                                            </td>\n                                                                                            <td>\n                                                                                              {\n                                                                                                weapon[\n                                                                                                  \"Attack Type\"\n                                                                                                ]\n                                                                                              }\n                                                                                            </td>\n                                                                                            <td>\n                                                                                              {weapon[\n                                                                                                \"Damage Type\"\n                                                                                              ]\n                                                                                                .join\n                                                                                                ? weapon[\n                                                                                                    \"Damage Type\"\n                                                                                                  ].join(\n                                                                                                    \" \"\n                                                                                                  )\n                                                                                                : weapon[\n                                                                                                    \"Damage Type\"\n                                                                                                  ]}\n                                                                                            </td>\n                                                                                            <td>\n                                                                                              {\n                                                                                                weapon[\n                                                                                                  \"Range\"\n                                                                                                ]\n                                                                                              }\n                                                                                            </td>\n                                                                                            <td>\n                                                                                              {\n                                                                                                weapon[\n                                                                                                  \"POW\"\n                                                                                                ]\n                                                                                              }\n                                                                                            </td>\n                                                                                          </tr>\n                                                                                          {!weapon.specialRules ? (\n                                                                                            <>\n\n                                                                                            </>\n                                                                                          ) : (\n                                                                                            <tr>\n                                                                                              <td colSpan=\"5\">\n                                                                                                <dl>\n                                                                                                  {Object.entries(\n                                                                                                    weapon.specialRules\n                                                                                                  ).map(\n                                                                                                    (\n                                                                                                      [\n                                                                                                        name,\n                                                                                                        rule,\n                                                                                                      ],\n                                                                                                      index\n                                                                                                    ) => (\n                                                                                                      <React.Fragment\n                                                                                                        key={`warjack_weapons_weapon_${weapon[\"Name\"]}_special_rules_${page}_${index}`}\n                                                                                                      >\n                                                                                                        {\n                                                                                                          <>\n                                                                                                            <dt>\n                                                                                                              {\n                                                                                                                name\n                                                                                                              }\n                                                                                                            </dt>\n                                                                                                            <dd>\n                                                                                                              {\n                                                                                                                rule\n                                                                                                              }\n                                                                                                            </dd>\n                                                                                                          </>\n                                                                                                        }\n                                                                                                      </React.Fragment>\n                                                                                                    )\n                                                                                                  )}\n                                                                                                </dl>\n                                                                                              </td>\n                                                                                            </tr>\n                                                                                          )}\n                                                                                        </React.Fragment>\n                                                                                      )\n                                                                                    )}\n                                                                                  </tbody>\n                                                                                </table>\n                                                                              )}\n                                                                            </>\n                                                                          )}\n                                                                        </div>\n                                                                        {\n                                                                          // TODO\n                                                                        }\n                                                                      </Select.Option>\n                                                                    )\n                                                                  )}\n                                                              </Select>\n                                                            </div>\n                                                          )\n                                                      )}\n                                                    </>\n                                                  )}\n                                                  {!details.weaponDetails ||\n                                                  details.weaponDetails\n                                                    .length === 0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>Weapon Details</p>\n                                                      <table>\n                                                        <thead>\n                                                          <tr>\n                                                            <th>Weapon</th>\n                                                            <th>Location</th>\n                                                            <th>Cost</th>\n                                                            <th>Weapon Pack</th>\n                                                          </tr>\n                                                        </thead>\n                                                        <tbody>\n                                                          {details.weaponDetails.map(\n                                                            (weapon, index) => (\n                                                              <React.Fragment\n                                                                key={`weapon_details_number_${index}`}\n                                                              >\n                                                                <tr>\n                                                                  <td>\n                                                                    {\n                                                                      weapon[\n                                                                        \"Weapon\"\n                                                                      ].text\n                                                                    }\n                                                                  </td>\n                                                                  <td>\n                                                                    {\n                                                                      weapon[\n                                                                        \"Location\"\n                                                                      ].text\n                                                                    }\n                                                                  </td>\n                                                                  <td>\n                                                                    {\n                                                                      weapon[\n                                                                        \"Cost\"\n                                                                      ].text\n                                                                    }\n                                                                  </td>\n                                                                  <td>\n                                                                    {\n                                                                      weapon[\n                                                                        \"Weapon Pack\"\n                                                                      ].text\n                                                                    }\n                                                                  </td>\n                                                                </tr>\n                                                              </React.Fragment>\n                                                            )\n                                                          )}\n                                                        </tbody>\n                                                      </table>\n                                                    </>\n                                                  )}\n                                                  {!details.release ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>Release</p>\n                                                      <p>{details.release}</p>\n                                                    </>\n                                                  )}\n                                                  {!details.lore ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>Lore</p>\n                                                      <p>{details.lore}</p>\n                                                    </>\n                                                  )}\n                                                </div>\n                                              )}\n                                            </Card>\n                                          </div>\n                                        )}\n                                      </Draggable>\n                                    )\n                                  )}\n                                  {provided.placeholder}\n                                </div>\n                              )}\n                            </Droppable>\n\n                            {cards.length > 0 ? (\n                              <div className=\"footer\">\n                                <Badge\n                                  size=\"small\"\n                                  key=\"_badge\"\n                                  count={cards.length}\n                                  offset={[10, 5]}\n                                >\n                                  Card:\n                                </Badge>\n                                {Object.entries(\n                                  cards.reduce(\n                                    (acc, card) => ({\n                                      ...acc,\n                                      [card.type]: (acc[card.type] || 0) + 1,\n                                    }),\n                                    {}\n                                  )\n                                )\n                                  .sort()\n                                  .map(([type, count], i) => (\n                                    <Badge\n                                      size=\"small\"\n                                      key={`badge${i}`}\n                                      count={count}\n                                      offset={[10, 5]}\n                                    >\n                                      {type}:\n                                    </Badge>\n                                  ))}\n                              </div>\n                            ) : (\n                              <></>\n                            )}\n                          </div>\n                        </Col>\n                      ))}\n                    </Row>\n                  </Layout>\n                </Content>\n              </>\n            )}\n            <Droppable key={\"trash_footer\"} droppableId={\"trash_footer\"}>\n              {(provided) => (\n                <div ref={provided.innerRef} {...provided.droppableProps}>\n                  {dragging ? (\n                    <>\n                      <div className=\"trash-footer\">\n                        <div\n                          style={{\n                            animation:\n                              \"shake 0.82s cubic-bezier(.36,.07,.19,.97) both\",\n                            color: \"white\",\n                          }}\n                        >\n                          <DeleteOutlined />\n                          <div style={{ display: \"none\" }}>\n                            {provided.placeholder}\n                          </div>\n                        </div>\n                      </div>\n                      <Footer>\n                        <div className=\"copyright-notice\">\n                          Images originating from the Privateer Press website\n                          are © 2001—\n                          <>{new Date().getFullYear()}</> Privateer Press, Inc.\n                          All Rights Reserved. Privateer Press, warcaster and\n                          their logos are trademarks of Privateer Press, Inc.\n                          Images and trademarks used without permission. This\n                          website is unofficial and is not endorsed by Privateer\n                          Press.\n                        </div>\n                      </Footer>\n                    </>\n                  ) : (\n                    <Footer>\n                      <div className=\"bookmark\">\n                        <Layout>\n                          <Row>\n                            <Col\n                              xs={24}\n                              sm={24}\n                              md={18}\n                              lg={18}\n                              xl={16}\n                              xxl={16}\n                            >\n                              <input\n                                value={url}\n                                onChange={setUrl}\n                                onKeyDown={open}\n                                onClick={bookmark}\n                              />\n                            </Col>\n                          </Row>\n                        </Layout>\n                      </div>\n                      <div className=\"copyright-notice\">\n                        Images originating from the Privateer Press website are\n                        © 2001—\n                        <>{new Date().getFullYear()}</> Privateer Press, Inc.\n                        All Rights Reserved. Privateer Press, warcaster and\n                        their logos are trademarks of Privateer Press, Inc.\n                        Images and trademarks used without permission. This\n                        website is unofficial and is not endorsed by Privateer\n                        Press.\n                      </div>\n                    </Footer>\n                  )}\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n          {factionModels.map(([factionName, faction, models]) => (\n            <Drawer\n              key={`drawer_${faction}`}\n              visible={openDrawer === faction}\n              placement=\"right\"\n              onClose={setOpenDrawer}\n              width=\"80%\"\n              mask={false}\n              closeIcon={<MenuUnfoldOutlined />}\n            >\n              <Menu\n                id={`faction_${faction}`}\n                mode=\"inline\"\n                triggerSubMenuAction=\"click\"\n              >\n                <Menu.ItemGroup title={factionName}>\n                  {models.map(({ name, page, type, subtype }) => {\n                    const shortName = name.slice(0, 40);\n\n                    return (\n                      <Menu.Item key={faction + \":\" + page} className={faction}>\n                        <span onClick={menuItemClicked(page)}>\n                          <span className=\"card\">\n                            {shortName.length === name.length ? (\n                              shortName\n                            ) : (\n                              <Tooltip placement=\"top\" title={name}>\n                                {shortName}...\n                              </Tooltip>\n                            )}\n                          </span>\n                          <span className=\"types\">\n                            {subtype ? subtype : \"\"}\n                            {type ? (subtype ? \" \" : \"\") + type : \"\"}\n                          </span>\n                        </span>\n                      </Menu.Item>\n                    );\n                  })}\n                </Menu.ItemGroup>\n                <Menu.ItemGroup title={`${factionName} Wild Cards`}>\n                  {(wildCardModels[faction] || [])\n                    .sort((w1, w2) => (w1.type < w2.type ? -1 : 1))\n                    .map(({ name, page, type, subtype }, j) => {\n                      const shortName = name.slice(0, 40);\n\n                      return (\n                        <Menu.Item key={faction + \":\" + page}>\n                          <span onClick={menuItemClicked(page)}>\n                            <span className=\"card\">\n                              {shortName.length === name.length ? (\n                                shortName\n                              ) : (\n                                <Tooltip placement=\"top\" title={name}>\n                                  {shortName}...\n                                </Tooltip>\n                              )}\n                            </span>\n                            <span className=\"types\">\n                              {subtype ? subtype : \"\"}\n                              {type ? (subtype ? \" \" : \"\") + type : \"\"}\n                            </span>\n                          </span>\n                        </Menu.Item>\n                      );\n                    })}\n                </Menu.ItemGroup>\n                {Object.entries(\n                  cypherCodecs\n                    .filter(\n                      (cypher) =>\n                        [factionName, \"Universal\"].indexOf(\n                          cypher.Faction.text\n                        ) !== -1\n                    )\n                    .reduce(\n                      (acc, cypher) => ({\n                        ...acc,\n                        [cypher.Faction.text]: [\n                          ...(acc[cypher.Faction.text] || []),\n                          cypher,\n                        ],\n                      }),\n                      {}\n                    )\n                )\n                  .sort(([a], [b]) =>\n                    a === \"Universal\" ? 1 : b === \"Universal\" ? -1 : 1\n                  )\n                  .map(([faction, cyphers]) => (\n                    <Menu.ItemGroup title={`${faction} Cyphers`} key={faction}>\n                      {cyphers\n                        .sort((c1, c2) =>\n                          c1.Type.text < c2.Type.text ? -1 : 1\n                        )\n                        .map(({ Cypher, Type }) => (\n                          <Menu.Item\n                            key={\":\" + Cypher.page}\n                            className={Type.text}\n                          >\n                            <span onClick={menuItemClicked(Cypher.page)}>\n                              <span className=\"card\">{Cypher.text}</span>\n                              <span className=\"types\">{Type.text}</span>\n                            </span>\n                          </Menu.Item>\n                        ))}\n                    </Menu.ItemGroup>\n                  ))}\n              </Menu>\n            </Drawer>\n          ))}\n          <Drawer\n            key=\"drawer_cyphers\"\n            visible={openDrawer === \"cypher_codecs\"}\n            placement=\"right\"\n            onClose={setOpenDrawer}\n            width=\"80%\"\n            mask={false}\n            closeIcon={<MenuUnfoldOutlined />}\n          >\n            <Menu\n              id={`faction_cyphers`}\n              mode=\"inline\"\n              triggerSubMenuAction=\"click\"\n            >\n              {Object.entries(\n                cypherCodecs.reduce(\n                  (acc, cypher) => ({\n                    ...acc,\n                    [cypher.Faction.text]: [\n                      ...(acc[cypher.Faction.text] || []),\n                      cypher,\n                    ],\n                  }),\n                  {}\n                )\n              )\n                .sort()\n                .map(([faction, cyphers]) => (\n                  <Menu.ItemGroup title={`${faction} Cyphers`} key={faction}>\n                    {cyphers\n                      .sort((c1, c2) => (c1.Type.text < c2.Type.text ? -1 : 1))\n                      .map(({ Cypher, Type }) => (\n                        <Menu.Item\n                          key={\":\" + Cypher.page}\n                          className={Type.text}\n                        >\n                          <span onClick={menuItemClicked(Cypher.page)}>\n                            <span className=\"card\">{Cypher.text}</span>\n                            <span className=\"types\">{Type.text}</span>\n                          </span>\n                        </Menu.Item>\n                      ))}\n                  </Menu.ItemGroup>\n                ))}\n            </Menu>\n          </Drawer>\n        </Layout>\n      </Layout>\n    </div>\n  );\n}\n\nconst App = connect(\n  (state) => ({\n    initialized: AppSync.selectDone()(state),\n    syncReasons: AppSync.selectReasons()(state),\n    factionModels: Object.entries(FactionModels.select()(state))\n      .sort()\n      .map(([faction, models]) => [\n        Factions.select()(state)[faction].text,\n        faction,\n        models.map((model) => ({\n          name: model.Name.text,\n          page: model.Name.page,\n          type: model.Type.text,\n          ...(model.Subtype\n            ? { subtype: model.Subtype.map((_) => _.text).join(\" \") }\n            : {}),\n        })),\n      ]),\n    wildCardModels: Object.fromEntries(\n      Object.entries(WildCardModels.select()(state))\n        .sort()\n        .map(([faction, models]) => [\n          faction,\n          models.map((model) => ({\n            name: model.Name.text,\n            page: model.Name.page,\n            type: model.Type.text,\n            ...(model.Subtype\n              ? { subtype: model.Subtype.map((_) => _.text).join(\" \") }\n              : {}),\n          })),\n        ])\n    ),\n    cypherCodecs: CypherCodecs.select()(state),\n    lists: Lists.select()(state).map(({ title, cards }) => ({\n      title,\n      cards: cards.flatMap(\n        ({ pageId, cortexIds, warjackWeaponIds, vehicleWeaponId, hidden }) => {\n          const pageIdByPage = PageIds.select()(state);\n\n          const page =\n            Object.entries(pageIdByPage)\n              .filter(([_, id]) => id === pageId)\n              .map(([page, _]) => page)[0] || \"\";\n\n          const model = Object.entries(state.data.factionModels)\n            .flatMap(([faction, models]) =>\n              models.map((model) => ({ ...model, faction }))\n            )\n            .find(({ Name }) => Name.page === page);\n          const wildCard = Object.entries(state.data.wildCardModels)\n            .flatMap(([faction, models]) =>\n              models.map((model) => ({ ...model, faction }))\n            )\n            .find(({ Name }) => Name.page === page);\n          const cypher = state.data.cypherCodecs.find(\n            ({ Cypher }) => Cypher.page === page\n          );\n\n          if (model) {\n            const details = Models.selectByPage(page)(state);\n            return [\n              {\n                card: \"model\",\n                hidden,\n                type: model.Type.text,\n                title: model.Name.text,\n                page: model.Name.page,\n                pageId,\n                cortexIds,\n                warjackWeaponIds,\n                vehicleWeaponId,\n                faction: model.faction,\n                ...(model.Subtype\n                  ? { subtype: model.Subtype.map((_) => _.text).join(\" \") }\n                  : {}),\n                ...(!details\n                  ? {}\n                  : {\n                      details: {\n                        ...details,\n                        ...(!details.hardpoints\n                          ? {}\n                          : {\n                              hardpointNames: parseHardpoints(\n                                details.hardpoints\n                              ),\n                            }),\n                        ...(!details.cortexSelections\n                          ? {}\n                          : {\n                              cortexSelections: Object.fromEntries(\n                                Object.entries(details.cortexSelections).map(\n                                  ([cortex, advantages]) => [\n                                    cortex,\n                                    Object.fromEntries(\n                                      Object.entries(advantages).map(\n                                        ([advantage, { text, category }]) => [\n                                          advantage,\n                                          {\n                                            text,\n                                            categoryId: pageIdByPage[category],\n                                          },\n                                        ]\n                                      )\n                                    ),\n                                  ]\n                                )\n                              ),\n                            }),\n                        ...(!details.warjackWeaponSelections\n                          ? {}\n                          : {\n                              warjackWeaponSelections: Object.fromEntries(\n                                Object.entries(\n                                  details.warjackWeaponSelections\n                                ).map(([page, selection]) => [\n                                  page,\n                                  { ...selection, pageId: pageIdByPage[page] },\n                                ])\n                              ),\n                            }),\n                        ...(!details.vehicleWeaponSelection\n                          ? {}\n                          : {\n                              vehicleWeaponSelection:\n                                details.vehicleWeaponSelection.map(\n                                  ({ text, page }) => ({\n                                    text,\n                                    page,\n                                    pageId: pageIdByPage[page],\n                                  })\n                                ),\n                            }),\n                      },\n                    }),\n              },\n            ];\n          }\n\n          if (wildCard) {\n            const details = Models.selectByPage(page)(state);\n            return [\n              {\n                card: \"model\",\n                hidden,\n                type: wildCard.Type.text,\n                title: wildCard.Name.text,\n                page: wildCard.Name.page,\n                pageId,\n                faction: \"Wild_Card\",\n                ...(wildCard.Subtype\n                  ? { subtype: wildCard.Subtype.map((_) => _.text).join(\" \") }\n                  : {}),\n                details,\n              },\n            ];\n          }\n\n          if (cypher) {\n            const details = Cyphers2.selectByPage(page)(state);\n            return [\n              {\n                card: \"cypher\",\n                hidden,\n                type: cypher.Type.text,\n                title: cypher.Cypher.text,\n                page: cypher.Cypher.page,\n                pageId,\n                ...(cypher.Faction.text === \"Universal\"\n                  ? { faction: \"Universal\" }\n                  : { faction: cypher.Faction.page }),\n                details,\n              },\n            ];\n          }\n\n          return [];\n        }\n      ),\n    })),\n    dragging: Dragging.select()(state),\n    url: Url.select()(state),\n    factions: Factions.select()(state),\n    warjackWeapons: WarjackWeapons.select()(state),\n  }),\n  (dispatch) => ({\n    toggleCard: (listIndex, cardIndex, pageId, card) => {\n      return () =>\n        dispatch(Lists.toggleCard({ listIndex, cardIndex, pageId, card }));\n    },\n    dragStart: (event) => dispatch(CardDragStarted(event)),\n    dragEnd: (event) => dispatch(CardDragEnded(event)),\n    menuItemClicked: (page) => (event) => {\n      dispatch(MenuItemClicked({ page }));\n      event.stopPropagation();\n    },\n    removeList: (listIndex) => () => dispatch(Lists.removeList({ listIndex })),\n    addEmptyList: (listIndex) => () =>\n      dispatch(Lists.addEmptyList({ listIndex })),\n    moveListBy: (listIndex, by) => () =>\n      dispatch(Lists.moveListBy({ listIndex, by })),\n    setListTitle: (listIndex) => (event) =>\n      dispatch(Lists.setListTitle({ listIndex, title: event.target.value })),\n    setUrl: (event) => dispatch(Url.set({ url: event.target.value })),\n    bookmark: () => {\n      const bookmark = document.querySelector(\".bookmark input\");\n      if (bookmark) {\n        if (navigator.userAgent.match(/ipad|iphone/i)) {\n          const range = document.createRange();\n          range.selectNodeContents(bookmark);\n\n          const selection = window.getSelection();\n          selection.removeAllRanges();\n          selection.addRange(range);\n          bookmark.setSelectionRange(0, 999999);\n        } else {\n          bookmark.select();\n        }\n      }\n    },\n    open: (event) => {\n      if (event.key === \"Enter\") {\n        const url = document.querySelector(\".bookmark input\").value;\n        if (url) window.open(url, \"_self\");\n      }\n    },\n    setCardCortex:\n      (listIndex, cardIndex, pageId) =>\n      (_, { label }) =>\n        dispatch(\n          Lists.setCardCortex({\n            listIndex,\n            cardIndex,\n            pageId,\n            cortexIds: label,\n          })\n        ),\n    setCardWarjackWeapons:\n      (listIndex, cardIndex, hardpointNameIndex, pageId) =>\n      (_, { label }) =>\n        dispatch(\n          Lists.setCardWarjackWeapons({\n            listIndex,\n            cardIndex,\n            hardpointNameIndex,\n            pageId,\n            warjackWeaponId: label,\n          })\n        ),\n    setCardVehicleWeapon:\n      (listIndex, cardIndex, pageId) =>\n      (_, { label }) =>\n        dispatch(\n          Lists.setCardVehicleWeapon({\n            listIndex,\n            cardIndex,\n            pageId,\n            vehicleWeaponId: label,\n          })\n        ),\n  })\n)(AppPresentation);\n\nexport default App;\n\nfunction generateListNamePlaceholder(cards, factionNames, defaultValue) {\n  const factions = cards.map((card) => card.faction);\n  if (factions.length === 0) return defaultValue;\n\n  const justFactions = factions.filter(\n    (faction) => [\"Universal\", \"Wild_Card\"].indexOf(faction) === -1\n  );\n  if (justFactions.length === 0) {\n    const justCyphers = factions.filter((faction) => faction === \"Universal\");\n    if (justCyphers.length === factions.length) return \"Universal Cyphers\";\n\n    return defaultValue;\n  }\n\n  const factionsPresent = justFactions.reduce(\n    (acc, faction) => ({ ...acc, [faction]: true }),\n    {}\n  );\n  if (Object.keys(factionsPresent).length > 1) return \"Several factions\";\n\n  const factionName = factionNames[Object.keys(factionsPresent)[0]].text;\n  if (factionName) {\n    const types = cards.map((card) => card.type);\n\n    const cyperTypes = [\"Fury\", \"Geometric\", \"Harmonic\", \"Overdrive\"];\n    const noCyphers = types.filter((type) => cyperTypes.indexOf(type) === -1);\n    if (noCyphers.length === types.length) return factionName + \" Models\";\n\n    const justCyphers = types.filter((type) => cyperTypes.indexOf(type) > -1);\n    if (justCyphers.length === types.length) return factionName + \" Cyphers\";\n\n    return factionName;\n  }\n\n  return defaultValue;\n}\n\nfunction cortexName(cortexSelections, cortexIds) {\n  return (Object.entries(cortexSelections).find(\n    ([cortex, advantages]) =>\n      Object.values(advantages)\n        .map((advantage) => advantage.categoryId)\n        .join(\"\") === (cortexIds || []).join(\"\")\n  ) || [undefined])[0];\n}\n\nfunction vehicleWeaponName(vehicleWeaponSelection, vehicleWeaponId) {\n  const vehicleWeapon = vehicleWeaponSelection.find(\n    ({ pageId }) => pageId === vehicleWeaponId\n  );\n  if (!vehicleWeapon) return undefined;\n  return vehicleWeapon.text;\n}\n\nfunction warjackWeaponNames(warjackWeaponSelections, weaponId) {\n  const weapon = Object.values(warjackWeaponSelections).find(\n    ({ pageId }) => pageId === weaponId\n  );\n  if (weapon) {\n    return warjackWeaponName(weapon.name, weapon.cost);\n  }\n  return weaponId;\n}\n\nfunction warjackWeaponNamesSubtitle(warjackWeaponSelections, weaponIds) {\n  return weaponIds.flatMap((weaponId) => {\n    const weapon = Object.values(warjackWeaponSelections).find(\n      ({ pageId }) => pageId === weaponId\n    );\n    if (weapon) {\n      return [weapon.name];\n    }\n    return [];\n  });\n}\n\nfunction warjackWeaponName(name, cost) {\n  return `${name} (cost ${cost})`;\n}\n\nfunction parseHardpoints(hardpoints) {\n  // Parses strings of the following type: \"3 : 2 Arm, 1 Back\"\n\n  const rHardpointCount = \"\\\\s*(\\\\d+)\\\\s*\";\n  const rHardpointGroup = \"\\\\s*(\\\\d+)\\\\s*(\\\\w+)\\\\s*\";\n\n  let results = null;\n  for (let n = 1; n <= 10; n++) {\n    const regexp = new RegExp(\n      `^${rHardpointCount}:${rHardpointGroup}${repeat(\n        `,${rHardpointGroup}`,\n        n - 1\n      )}$`\n    );\n    results = regexp.exec(hardpoints);\n    if (results !== null) {\n      break;\n    }\n  }\n\n  if (results === null) {\n    return undefined;\n  }\n\n  const hardpointCount = parseInt(results[1], 10);\n\n  const hardpointNames = [];\n  for (let n = 2; n < results.length; n += 2) {\n    const groupCount = parseInt(results[n], 10);\n    const groupName = results[n + 1];\n\n    for (let i = 1; i <= groupCount; i++) {\n      hardpointNames.push(groupName);\n    }\n  }\n\n  if (hardpointCount !== hardpointNames.length) {\n    console.error(\n      \"Hardpoints do not add up!\",\n      hardpoints,\n      hardpointCount,\n      hardpointNames\n    );\n  }\n\n  return hardpointNames;\n\n  function repeat(s, n) {\n    if (n === 0) return \"\";\n    return s + repeat(s, n - 1);\n  }\n}\n","const jsonp = (url) => {\n  return new Promise(function (resolve, reject) {\n    const callbackName = \"jsonp_callback_\" + Math.round(100000 * Math.random());\n    window[callbackName] = function (data) {\n      delete window[callbackName];\n      document.body.removeChild(script);\n      resolve(data);\n    };\n\n    const script = document.createElement(\"script\");\n    script.src =\n      url + (url.indexOf(\"?\") >= 0 ? \"&\" : \"?\") + \"callback=\" + callbackName;\n    document.body.appendChild(script);\n  });\n};\n\nexport { jsonp };\n","import { StateShard } from \"./utils\";\n\nconst WikiPages = StateShard(\n  \"WikiPages\",\n  init,\n  { addPage, removePage },\n  {\n    selectPageByPage,\n    selectPagesByPageIds,\n    selectPageIds,\n  }\n);\n\nexport { WikiPages };\n\nfunction init(state) {\n  if (!state.data) {\n    state.data = {};\n  }\n\n  state.data.pages = {};\n}\n\n// Actions\n\nfunction addPage(state, { page, type, data }) {\n  const pages = select(state);\n  data.page = page;\n  data.type = type;\n  pages[page] = data;\n}\n\nfunction removePage(state, { page }) {\n  const pages = select(state);\n  delete pages[page];\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.data.pages;\n}\n\nfunction selectPageByPage(state, page) {\n  const pages = select(state);\n  return pages[page];\n}\n\nfunction selectPagesByPageIds(state, pageIds) {\n  const pages = select(state);\n  return Object.values(pages).filter((page) => pageIds.includes(page.pageid));\n}\n\nfunction selectPageIds(state) {\n  const pages = select(state);\n  return Object.values(pages).map((page) => page.pageid);\n}\n","/*\nThese sagas fetch and cache wiki pages.\n\nThe wiki's JSONP API is used to fetch page contents. Since we want to be\npolite, we only call the API every two seconds. This throttle is implemented in\nfetchWikiPage through an actionChannel and a call to delay.\n*/\n\nimport {\n  actionChannel,\n  all,\n  call,\n  delay,\n  put,\n  select,\n  take,\n} from \"redux-saga/effects\";\nimport { FetchedWikiPage, FetchWikiPage } from \"../../../messages\";\nimport { jsonp } from \"../jsonp\";\n\nimport { WikiPages } from \"../../../state/WikiPages\";\n\nfunction* cacheWikiPages() {\n  yield all([addWikiPage(), fetchWikiPage()]);\n}\n\nexport { cacheWikiPages };\n\nfunction* fetchWikiPage() {\n  const wikiPageChannel = yield actionChannel(FetchWikiPage().type);\n\n  while (true) {\n    const { payload } = yield take(wikiPageChannel);\n    const page = payload.page;\n    const data = yield select(WikiPages.selectPageByPage(page));\n\n    if (!data) {\n      const data = yield call(jsonp, parsePage(page));\n      yield put(FetchedWikiPage({ page, data: data.parse }));\n\n      const twoSecondsInMs = 2 * 1000;\n      yield delay(twoSecondsInMs);\n    }\n  }\n}\n\nfunction* addWikiPage() {\n  while (true) {\n    const { payload } = yield take(FetchedWikiPage().type);\n    const page = payload.page;\n    const data = payload.data;\n\n    if (data) {\n      yield put(WikiPages.addPage({ page, data }));\n    }\n  }\n}\n\nfunction parsePage(page) {\n  return `https://privateerpress.wiki/api.php?action=parse&page=${page}&formatversion=2&format=json`;\n}\n","/*\nThese sagas make sure, cached wiki pages stay up-to-date.\n\nEach app reload triggers a RefreshWikiPages action, that starts the cache\nupdate process. The refreshWikiPages saga bulk loads revision data for all\ncached pages from the wiki API. If a page cannot be found (probably because it\nwas deleted from the wiki), it is removed from the cache. If revision\ninformation is found, it is compared with the cached revision of the page. If\nthe loaded revision is higher, the page is removed and fetched again. If the\ncached revision is higher or equal, the page is not refreshed and remains\ncached.\n*/\n\nimport {\n  FetchWikiPage,\n  FetchWikiPageRevisions,\n  FetchedWikiPageRevisions,\n  RefreshWikiPages,\n} from \"../../../messages\";\nimport {\n  actionChannel,\n  all,\n  call,\n  delay,\n  put,\n  take,\n  select,\n} from \"redux-saga/effects\";\nimport { jsonp } from \"../jsonp\";\n\nimport { WikiPages } from \"../../../state/WikiPages\";\n\nfunction* updateCache() {\n  yield all([\n    refreshWikiPages(),\n    fetchWikiPageRevisions(),\n    refreshOutdatedWikiPages(),\n  ]);\n}\n\nexport { updateCache };\n\nfunction* refreshWikiPages() {\n  yield take(RefreshWikiPages().type);\n  const pageIds = yield select(WikiPages.selectPageIds());\n\n  const queryLength = 50;\n  const pageidsList = [];\n  for (let i = 0; i < pageIds.length; i += queryLength) {\n    const ids = pageIds.slice(i, i + queryLength);\n    const pageids = ids.join(\"|\");\n    pageidsList.push(pageids);\n  }\n\n  for (const pageids of pageidsList) {\n    yield put(FetchWikiPageRevisions({ pageids }));\n  }\n}\n\nfunction* fetchWikiPageRevisions() {\n  const revisionsChannel = yield actionChannel(FetchWikiPageRevisions().type);\n\n  while (true) {\n    const { payload } = yield take(revisionsChannel);\n    const pageids = payload.pageids;\n\n    const data = yield call(jsonp, revisionsQuery(pageids));\n    yield put(\n      FetchedWikiPageRevisions({\n        pageRevisions: data.query.pages,\n      })\n    );\n\n    const twoSecondsInMs = 2 * 1000;\n    yield delay(twoSecondsInMs);\n  }\n}\n\nfunction* refreshOutdatedWikiPages() {\n  while (true) {\n    const { payload } = yield take(FetchedWikiPageRevisions().type);\n    const { pageRevisions } = payload;\n    const revInfoByPageId = Object.fromEntries(\n      pageRevisions.map((revision) => [\n        revision.pageid,\n        revision.missing\n          ? { missing: revision.missing }\n          : {\n              revid: Math.max(\n                ...revision.revisions.map((revision) => revision.revid)\n              ),\n            },\n      ])\n    );\n    const pageIds = pageRevisions.map((revision) => revision.pageid);\n\n    const pages = yield select(WikiPages.selectPagesByPageIds(pageIds));\n    for (const page of pages) {\n      const revInfo = revInfoByPageId[page.pageid];\n      if (revInfo.missing) {\n        yield put(WikiPages.removePage({ page: page.page }));\n      } else if (page.revid < revInfo.revid) {\n        yield put(WikiPages.removePage({ page: page.page }));\n        yield put(FetchWikiPage({ page: page.page, type: page.type }));\n      }\n    }\n  }\n}\n\nfunction revisionsQuery(pageids) {\n  return `https://privateerpress.wiki/api.php?action=query&pageids=${pageids}&prop=revisions&formatversion=2&format=json`;\n}\n","function partitionBy(slice, array) {\n  var arrays = [];\n\n  for (var i = 0; i < array.length; i += slice) {\n    arrays[arrays.length] = array.slice(i, i + slice);\n  }\n\n  return arrays;\n}\n\nexport { partitionBy };\n","import {\n  actionChannel,\n  all,\n  call,\n  delay,\n  put,\n  take,\n  select,\n} from \"redux-saga/effects\";\nimport { jsonp } from \"../jsonp\";\n\nimport { AppSync } from \"../../../state/AppSync\";\nimport { CypherCodecs } from \"../../../state/CypherCodecs\";\nimport { FactionModels } from \"../../../state/FactionModels\";\nimport { Factions } from \"../../../state/Factions\";\nimport { PageIds } from \"../../../state/PageIds\";\nimport { WildCardModels } from \"../../../state/WildCardModels\";\nimport { FetchPageIdsSlice } from \"../../../messages\";\n\nimport { partitionBy } from \"../partitionBy\";\n\nfunction* fetchPageIds() {\n  yield all([fetchPageIds2(), fetchPageIdsSlice()]);\n}\n\nexport { fetchPageIds };\n\nfunction* fetchPageIds2() {\n  const cachedPageIds = yield select(PageIds.select());\n\n  if (Object.keys(cachedPageIds).length === 0) {\n    yield put(\n      AppSync.addReasons({\n        reasons: [\n          {\n            reason: \"Loading factions\",\n            description: \"Load available Warcaster factions\",\n          },\n          {\n            reason: \"Loading cyphers\",\n            description: \"Load available Cypher Codecs\",\n          },\n          {\n            reason: \"Loading wildcard models\",\n            description: \"Load available Wild Cards\",\n          },\n        ],\n      })\n    );\n\n    const [factionsSet] = yield all([\n      take(Factions.set().type),\n      take(CypherCodecs.set().type),\n      take(WildCardModels.set().type),\n    ]);\n\n    const factions = Object.keys(factionsSet.payload.factions);\n\n    yield put(\n      AppSync.addReasons({\n        reasons: factions.map((faction) => ({\n          reason: `Loading ${faction.replace(/_/g, \" \")}`,\n          description: `Used to build ${faction.replace(/_/g, \" \")} menu`,\n        })),\n      })\n    );\n\n    yield all(\n      factions.map((faction) =>\n        take(\n          (action) =>\n            action.type === FactionModels.set().type &&\n            action.payload.page === faction\n        )\n      )\n    );\n\n    const factionModelPages = Object.values(\n      yield select(FactionModels.select())\n    )\n      .flat()\n      .map((_) => _.Name);\n\n    const wildCardPages = Object.values(yield select(WildCardModels.select()))\n      .flat()\n      .map((_) => _.Name)\n      .sort(({ text, page }) => [text, page])\n      .filter(\n        ({ text, page }, index, cards) =>\n          !index ||\n          (text !== cards[index - 1].text && page !== cards[index - 1].page)\n      );\n\n    const cypherPages = (yield select(CypherCodecs.select())).map(\n      (_) => _.Cypher\n    );\n\n    const pages = [...factionModelPages, ...wildCardPages, ...cypherPages].sort(\n      (_) => _.page\n    );\n    const pageSlices = partitionBy(50, pages);\n\n    yield put(\n      AppSync.addReasons({\n        reasons: pageSlices.map((_, index) => ({\n          reason: `Loading page ids ${index + 1} of ${pageSlices.length}`,\n          description:\n            \"Card lists are encoded in the URL using unique wiki page ids\",\n        })),\n      })\n    );\n\n    for (const pages of pageSlices) {\n      yield put(FetchPageIdsSlice({ pages }));\n    }\n\n    let processedCount = 0;\n    while (yield take(PageIds.addPages().type)) {\n      processedCount += 1;\n      if (pageSlices.length === processedCount) {\n        yield put(AppSync.done());\n      }\n    }\n  }\n}\n\nfunction* fetchPageIdsSlice() {\n  const pageIdsSliceChannel = yield actionChannel(FetchPageIdsSlice().type);\n\n  while (true) {\n    const { payload } = yield take(pageIdsSliceChannel);\n    const pages = payload.pages;\n\n    const data = yield call(jsonp, pageInfo(pages.map((_) => _.text)));\n    const titleToPageId = Object.fromEntries(\n      data.query.pages.map(({ title, pageid }) => [title, pageid])\n    );\n\n    const pageIdByTitle = Object.fromEntries(\n      pages.map(({ text, page }) => [page, titleToPageId[text]])\n    );\n\n    yield put(PageIds.addPages({ pageIdByTitle }));\n\n    const twoSecondsInMs = 2 * 1000;\n    yield delay(twoSecondsInMs);\n  }\n}\n\nfunction pageInfo(pages) {\n  const pageList = encodeURIComponent(pages.join(\"|\"));\n  return `https://privateerpress.wiki/api.php?action=query&formatversion=2&format=json&prop=pageprops&titles=${pageList}`;\n}\n","import { all } from \"redux-saga/effects\";\nimport { cacheWikiPages as cacheWikiPages2 } from \"./cacheWikiPages\";\nimport { updateCache } from \"./updateCache\";\nimport { fetchPageIds } from \"./fetchPageIds\";\n\nfunction* cacheWikiPages() {\n  yield all([updateCache(), cacheWikiPages2(), fetchPageIds()]);\n}\n\nexport { cacheWikiPages };\n","function cleanText(text) {\n  return text.replace(/\\n/g, \"\");\n}\n\nfunction prepareDOM(text) {\n  const doc = new DOMParser().parseFromString(text, \"text/html\");\n  doc\n    .querySelectorAll(\n      \"h1 > span[id], h2 > span[id], h3 > span[id], h4 > span[id]\"\n    )\n    .forEach((node) => {\n      node.parentNode.id = node.id;\n    });\n\n  return doc;\n}\n\nexport { cleanText, prepareDOM };\n","import { prepareDOM } from \"./utils\";\n\nconst parseCypherText = (text) => {\n  const doc = prepareDOM(text);\n\n  const type = extractLink(doc, \"Type\");\n  const pow = extractLink(doc, \"Pow\");\n  const effect = extractParagraphs(doc, \"Effect\");\n  const faction = extractLink(doc, \"Faction\");\n  const source = extractLink(doc, \"Source\");\n\n  const cypher = {\n    type,\n    pow,\n    effect,\n    faction,\n    source,\n  };\n\n  return removeUndefinedValues(cypher);\n};\n\nexport { parseCypherText };\n\nfunction extractLink(doc, id) {\n  const p = doc.querySelector(`h2#${id} ~ p`);\n  if (!p) return undefined;\n\n  const a = p.querySelector(\"a\");\n  if (!a) return { text: p.innerText };\n\n  const hrefs = a.href.split(\"title=\");\n  return { text: a.innerText, page: hrefs[hrefs.length - 1] };\n}\n\nfunction extractParagraphs(doc, id) {\n  function helper(node, texts) {\n    switch (node.tagName) {\n      case \"P\":\n        return helper(node.nextSibling, [...texts, node.innerText.trim()]);\n      case \"H2\":\n        return texts;\n      default:\n        return helper(node.nextSibling, texts);\n    }\n  }\n\n  const node = doc.querySelector(`h2#${id} ~ p`);\n  if (!node) return undefined;\n\n  return helper(node, []);\n}\n\nfunction removeUndefinedValues(obj) {\n  if (Array.isArray(obj)) return obj.map(removeUndefinedValues);\n  if (typeof obj !== \"object\") return obj;\n\n  return Object.fromEntries(\n    Object.entries(obj)\n      .filter(([key, value]) => typeof value !== \"undefined\")\n      .map(([key, value]) => [key, removeUndefinedValues(value)])\n  );\n}\n","import { cleanText } from \"./utils\";\n\nfunction parseAnchorTable(table) {\n  const header = [...table.querySelectorAll(\"th\")].map((th) =>\n    cleanText(th.innerText)\n  );\n\n  const body = [...table.querySelectorAll(\"tr\")].map((tr) =>\n    [...tr.querySelectorAll(\"td\")].map((td) => {\n      const anchors = [...td.querySelectorAll(\"a\")].map(parseAnchor);\n      if (anchors.length > 0) {\n        return anchors;\n      }\n      const text = parseText(td);\n      if (text) {\n        return [{ text }];\n      }\n      return [];\n    })\n  );\n\n  return body\n    .filter((row) => row.length === header.length)\n    .map((row) =>\n      Object.fromEntries(\n        header.flatMap((title, i) => (row[i] ? [[title, row[i]]] : []))\n      )\n    );\n}\n\nfunction parseAnchor(a) {\n  const titleColon = a.title.split(\":\");\n  const hrefTitle = a.href.split(\"title=\");\n  return {\n    text: titleColon[titleColon.length - 1],\n    page: hrefTitle[hrefTitle.length - 1],\n  };\n}\n\nexport { parseAnchor, parseAnchorTable };\n\nfunction parseText(node) {\n  return cleanText(node.innerText);\n}\n","import { parseAnchorTable } from \"./parsers\";\nimport { prepareDOM } from \"./utils\";\n\nconst parseCypherCodecsText = (text) => {\n  const doc = prepareDOM(text);\n\n  const cypherCodecsTable = doc.querySelector(\"table.sortable\");\n  if (!cypherCodecsTable) {\n    console.error(\"parseCypherCodecsText: cypherCodecsTable not found!\");\n    return undefined;\n  }\n\n  const cypherCodecs = parseAnchorTable(cypherCodecsTable);\n  return cypherCodecs.map((cypherCodec) =>\n    Object.fromEntries(\n      Object.entries(cypherCodec).map(([key, values]) => [key, values[0]])\n    )\n  );\n};\n\nexport { parseCypherCodecsText };\n","import { parseAnchorTable } from \"./parsers\";\nimport { prepareDOM } from \"./utils\";\n\nconst parseFactionModelsText = (text) => {\n  const doc = prepareDOM(text);\n\n  const table = doc.querySelector(\"h1#Models ~ table\");\n  if (!table) {\n    console.error(\"parseFactionModelsText: table not found!\");\n    return undefined;\n  }\n  const models = parseAnchorTable(table);\n\n  return models.map((model) =>\n    Object.fromEntries(\n      Object.entries(model).flatMap(([key, values]) =>\n        key === \"Subtype\"\n          ? values.length > 0\n            ? [[key, values]]\n            : []\n          : [[key, values[0]]]\n      )\n    )\n  );\n};\n\nexport { parseFactionModelsText };\n","import { parseAnchor } from \"./parsers\";\nimport { prepareDOM } from \"./utils\";\n\nconst parseFactionsText = (text) => {\n  const doc = prepareDOM(text);\n\n  const p = doc.querySelector(\"h2#Factions ~ p\");\n  const factions = Object.fromEntries(collectFactions(p, []));\n  delete factions.Wild_Card; // Wild Cards are crawled independently.\n  return factions;\n};\n\nexport { parseFactionsText };\n\nfunction collectFactions(node, factions) {\n  switch (node.tagName) {\n    case \"P\":\n      const a = node.querySelector(\"a\");\n      if (!a) {\n        console.error(\"collectFactions: a not found!\");\n        return collectFactions(node.nextSibling, factions);\n      }\n      const anchor = parseAnchor(a);\n      const faction = [anchor.page, anchor];\n      return collectFactions(node.nextSibling, [...factions, faction]);\n    case \"H2\":\n      return factions;\n    default:\n      return collectFactions(node.nextSibling, factions);\n  }\n}\n","import { parseAnchor } from \"./parsers\";\nimport { cleanText, prepareDOM } from \"./utils\";\n\nconst parseModelText = (text) => {\n  const doc = prepareDOM(text);\n\n  const factionAndTypes =\n    extractList(doc, \"Unit_Faction_and_Type\") ||\n    extractList(doc, \"Model_Faction_and_Type\");\n  const faction = factionAndTypes[0];\n  const types = factionAndTypes.slice(1);\n  const squadSize = extractText(doc, \"Squad_Size\");\n  const deploymentCost = extractText(doc, \"Deployment_Cost\");\n  const baseSize = extractText(doc, \"Base_Size\");\n  const health = extractText(doc, \"Health\");\n  const wildCardFactions = extractList(doc, \"Wild_Card_Factions\");\n  const weaponPoints = extractText(doc, \"Weapon_Points\");\n  const hardpoints = extractText(doc, \"Hardpoints\");\n  const specialRules = extractDefinitions(doc, \"Special_Rules\");\n  const chassisSpecialRules = extractDefinitions(doc, \"Chassis_Special_Rules\");\n  const advantages = extractDefinitions(doc, \"Advantages\");\n  const maneuvers = extractDefinitions(doc, \"Maneuvers\");\n  const vehicleWeaponSelection = extractWeaponSelection(\n    doc,\n    \"Weapon_Selection\"\n  );\n  const cortexes = extractCortexes(doc, \"Cortexes\");\n\n  const modelStatsData = [\n    ...doc\n      .querySelector(\"h3#Unit_Stats ~ table, h3#Model_Stats ~ table\")\n      .querySelectorAll(\"tr > td\"),\n  ].map((_) => cleanText(_.innerText));\n  const modelStatsLength = modelStatsData.length / 2;\n  const modelStats = Object.fromEntries(\n    Array.from({ length: modelStatsLength }, (_, i) => i).map((i) => [\n      modelStatsData[i],\n      modelStatsData[i + modelStatsLength],\n    ])\n  );\n\n  let weaponsData = [...doc.querySelectorAll(\"h3#Weapons ~ table tr\")].map(\n    (tr) => [...tr.querySelectorAll(\"td\")]\n  );\n  let weapons = undefined;\n  if (weaponsData.length > 0) {\n    weapons = [];\n    let header = weaponsData[0].map((td) => td.innerText);\n    let weaponsList = weaponsData.slice(1);\n    for (const tds of weaponsList) {\n      if (tds.length === header.length) {\n        const stats = tds.map((td) => td.innerText);\n        const weapon = Object.fromEntries(\n          header.map((key, i) => [cleanText(key), cleanText(stats[i])])\n        );\n        weapons.push(weapon);\n      }\n      if (tds.length === 1) {\n        const previousWeapons = weapons.slice(0, weapons.length - 1);\n        const lastWeapon = weapons[weapons.length - 1];\n\n        const weapon = {\n          ...lastWeapon,\n          specialRules: parseDefinitionText(tds[0]),\n        };\n        weapons = [...previousWeapons, weapon];\n      }\n    }\n  }\n\n  function weaponDetails() {\n    const weaponDetailsTable = doc.querySelector(\"table.mw-collapsible\");\n    if (!weaponDetailsTable) return undefined;\n\n    const weaponDetailsData = [...weaponDetailsTable.querySelectorAll(\"tr\")]\n      .map((tr) => [...tr.querySelectorAll(\"td, th\")])\n      .filter((_) => _.length === 4);\n    if (!weaponDetailsData || weaponDetailsData.length === 0) return undefined;\n\n    const detailsHeader = weaponDetailsData[0].map((_) =>\n      cleanText(_.innerText)\n    );\n    return weaponDetailsData.slice(1).map((tds) =>\n      Object.fromEntries(\n        tds.map((td, i) => {\n          const a = td.querySelector(\"a\");\n          const hrefs = a ? a.href.split(\"title=\") : undefined;\n          const text = cleanText(td.innerText);\n          return [\n            detailsHeader[i],\n            a ? { text, page: hrefs[hrefs.length - 1] } : { text },\n          ];\n        })\n      )\n    );\n  }\n\n  const release = extractText(doc, \"Release\", { node: \"h1\" });\n  const lore = extractText(doc, \"Lore\", { node: \"h1\" });\n\n  const model = {\n    faction,\n    types,\n    squadSize,\n    deploymentCost,\n    baseSize,\n    health,\n    wildCardFactions,\n    hardpoints,\n    weaponPoints,\n    modelStats,\n    specialRules,\n    weapons,\n    advantages,\n    maneuvers,\n    vehicleWeaponSelection,\n    cortexes,\n    chassisSpecialRules,\n    weaponDetails: weaponDetails(),\n    release,\n    lore,\n  };\n\n  return removeUndefinedValues(model);\n};\n\nexport { parseModelText };\n\nfunction removeUndefinedValues(obj) {\n  if (Array.isArray(obj)) return obj.map(removeUndefinedValues);\n  if (typeof obj !== \"object\") return obj;\n\n  return Object.fromEntries(\n    Object.entries(obj)\n      .filter(([key, value]) => typeof value !== \"undefined\")\n      .map(([key, value]) => [key, removeUndefinedValues(value)])\n  );\n}\n\nfunction extractText(doc, id, { node = \"h3\" } = {}) {\n  const p = doc.querySelector(`${node}#${id} ~ p`);\n  if (!p) return undefined;\n\n  return cleanText(p.innerText);\n}\n\nfunction extractList(doc, id) {\n  const p = doc.querySelector(`h3#${id} ~ p`);\n  if (!p) return undefined;\n\n  const as = [...p.querySelectorAll(\"a\")];\n  if (as.length === 0) return undefined;\n\n  return as.map((a) => {\n    const hrefs = a.href.split(\"title=\");\n    return { text: a.innerText, page: hrefs[hrefs.length - 1] };\n  });\n}\n\nfunction extractWeaponSelection(doc, id) {\n  const node = doc.querySelector(`h3#${id} + p`);\n  if (!node) return undefined;\n\n  const anchors = [...node.querySelectorAll(\"a\")];\n\n  return anchors.map((a) => parseAnchor(a));\n}\n\nfunction extractCortexes(doc, id) {\n  function helper(node, cortexes) {\n    switch (node.tagName) {\n      case \"P\":\n        const cortex = node.querySelector(\"b\").innerText;\n        const definitions = parseDefinitionText(node);\n        return helper(node.nextSibling, [...cortexes, [cortex, definitions]]);\n      case \"H3\":\n        return cortexes;\n      default:\n        return helper(node.nextSibling, cortexes);\n    }\n  }\n\n  const node = doc.querySelector(`h3#${id} ~ p`);\n  if (!node) return undefined;\n\n  return Object.fromEntries(helper(node, []));\n}\n\nfunction parseDefinitionText(node) {\n  const definitions = node.innerHTML\n    .split(\"<br>\")\n    .map((_) => _.replace(/<[^>]+>/g, \"\").trim());\n\n  const pairs = definitions.flatMap((definition) => {\n    const separator = \": \";\n    const groups = definition.split(separator).map(cleanText);\n    if (groups.length < 2) return [];\n    const key = groups[0];\n    const val = groups.slice(1).join(separator);\n    return [[key, val]];\n  });\n  if (pairs.length === 0) return undefined;\n\n  return Object.fromEntries(pairs);\n}\n\nfunction extractDefinitions(doc, id) {\n  const p = doc.querySelector(`h3#${id} ~ p`);\n  if (!p) return undefined;\n\n  return parseDefinitionText(p);\n}\n","import { parseAnchor } from \"./parsers\";\nimport { prepareDOM } from \"./utils\";\n\nconst parseWarjackWeapon = (text) => {\n  const doc = prepareDOM(text);\n\n  const warjackWeapon = doc.querySelector(\"#Warjack_Weapon\");\n  const prefix = warjackWeapon ? \"#Warjack_Weapon ~ \" : \"\";\n\n  let res = {};\n\n  const availableFor = [\n    ...doc.querySelectorAll(`${prefix}[id^=Available_For] + p > a`),\n  ].map(parseAnchor);\n\n  res.availableFor = availableFor;\n\n  const pointCostNode = doc.querySelector(`${prefix}[id^=Point_Cost] + p`);\n  if (pointCostNode) {\n    const pointCost = parseInt(pointCostNode.innerText);\n\n    res.pointCost = pointCost;\n  }\n\n  const locationNode = doc.querySelector(`${prefix}[id^=Location] + p`);\n  if (locationNode) {\n    const location = locationNode.innerText.replace(/\\n/g, \"\");\n\n    res.location = location;\n  }\n\n  // Good special rules example: Metaperceptor\n  const specialRulesP = doc.querySelector(`${prefix}[id^=Special_Rules] + p`);\n  if (specialRulesP) {\n    const specialRules = specialRulesP\n      ? Object.fromEntries(\n          specialRulesP.innerText\n            .replace(/\\n$/g, \"\")\n            .split(\"\\n\")\n            .map((specialRule) => specialRule.split(\": \"))\n        )\n      : {};\n\n    res.specialRules = specialRules;\n  }\n\n  // Good weapons examples:\n  // - Nova_Cannon#Warjack_Weapon (several special abilities)\n  // - Protean_Forge (several attack modes)\n  // - Assault_Rifle_%26_Bayonet (several weapons)\n  const table = doc.querySelector(`${prefix}[id^=Weapons] + table`);\n\n  if (table) {\n    const header = [...table.querySelectorAll(\"tr:first-of-type td\")].map(\n      (td) => td.innerText.replace(/\\n/g, \"\")\n    );\n\n    const weapons = [...table.querySelectorAll(\"tr:not(:first-of-type)\")]\n      .map((tr) => [...tr.querySelectorAll(\"td\")])\n      .flatMap((tr, index) =>\n        index % 2 === 0\n          ? [\n              tr.map((td) =>\n                [...td.childNodes]\n                  .map((node) =>\n                    (node.innerText || node.textContent).replace(/\\n$/g, \"\")\n                  )\n                  .filter((text) => [\" \", \"\"].indexOf(text) === -1)\n              ),\n            ]\n          : tr.map((td) => {\n              if (td.innerText === \"\") return {};\n              const ul = td.querySelector(\"ul\");\n\n              if (ul) {\n                const textNode = td.querySelector(\"ul\").previousSibling;\n                textNode.nodeValue.replace(/\\n/g, \" \");\n\n                td.querySelector(\"ul\").insertAdjacentText(\n                  \"beforebegin\",\n                  textNode.nodeValue.replace(/\\n/g, \" \") +\n                    td.querySelector(\"ul\").innerText.replace(/\\n/g, \" \")\n                );\n                textNode.remove();\n                td.querySelector(\"ul\").remove();\n              }\n\n              const specialRules = Object.fromEntries(\n                [...td.childNodes]\n                  .map((node) =>\n                    node.nodeName === \"BR\"\n                      ? \"\\n\"\n                      : node.innerText || node.textContent\n                  )\n                  .join(\"\")\n                  .replace(/\\n$/, \"\")\n                  .split(\"\\n\")\n                  .filter((text) => text !== \"\")\n                  .map((entry) => {\n                    let colonIndex = entry.indexOf(\": \");\n                    return [\n                      entry.slice(0, colonIndex),\n                      entry.slice(colonIndex + 2),\n                    ];\n                  })\n              );\n\n              if (Object.keys(specialRules).length === 0) return {};\n              return { specialRules };\n            })\n      )\n      .reduce(\n        (acc, tr, index) =>\n          index % 2 === 0\n            ? [\n                ...acc,\n                tr.reduce(\n                  (acc2, value, index2) => ({\n                    ...acc2,\n                    [header[index2]]: value.length === 1 ? value[0] : value,\n                  }),\n                  {}\n                ),\n              ]\n            : [\n                ...acc.slice(0, acc.length - 1),\n                { ...acc[acc.length - 1], ...tr },\n              ],\n        []\n      );\n    if (weapons.length > 0) {\n      res.weapons = weapons;\n    }\n  }\n\n  return res;\n};\n\nexport { parseWarjackWeapon };\n","import { parseAnchorTable } from \"./parsers\";\nimport { prepareDOM } from \"./utils\";\n\nconst parseWildCardText = (text) => {\n  const doc = prepareDOM(text);\n\n  const h1OrTable = doc.querySelectorAll(\"h1, table.sortable\");\n  const factionAndModels = [];\n\n  for (let i = 0; i < h1OrTable.length; i++) {\n    if (i % 2 === 0) {\n      const h1 = h1OrTable[i];\n      if (h1.tagName !== \"H1\") {\n        console.error(\n          `parseWildCardText: expected H1, but got ${h1.tagName}!`,\n          h1\n        );\n      }\n      factionAndModels.push({ faction: h1.id });\n    } else {\n      const table = h1OrTable[i];\n      if (table.tagName !== \"TABLE\") {\n        console.error(\n          `parseWildCardText: expected TABLE, but got ${table.tagName}!`,\n          table\n        );\n      }\n      const last = factionAndModels[factionAndModels.length - 1];\n      const models = parseAnchorTable(table);\n      last.models = models.map((model) =>\n        Object.fromEntries(\n          Object.entries(model).flatMap(([key, values]) =>\n            key === \"Subtype\"\n              ? values.length > 0\n                ? [[key, values]]\n                : []\n              : [[key, values[0]]]\n          )\n        )\n      );\n    }\n  }\n\n  return factionAndModels;\n};\n\nexport { parseWildCardText };\n","import { put, select, take } from \"redux-saga/effects\";\nimport {\n  parseCypherCodecsText,\n  parseCypherText,\n  parseFactionModelsText,\n  parseFactionsText,\n  parseModelText,\n  parseWarjackWeapon,\n  parseWildCardText,\n} from \"../core/parse\";\nimport { Cyphers } from \"../../state/Cyphers\";\nimport { CypherCodecs } from \"../../state/CypherCodecs\";\nimport { Factions } from \"../../state/Factions\";\nimport { FactionModels } from \"../../state/FactionModels\";\nimport { Models } from \"../../state/Models\";\nimport { WarjackWeapons } from \"../../state/WarjackWeapons\";\nimport { WildCardModels } from \"../../state/WildCardModels\";\nimport { FetchedWikiPage, FetchPageIdsSlice } from \"../../messages\";\nimport { partitionBy } from \"./partitionBy\";\n\nfunction* parseWikiPages() {\n  while (true) {\n    const { payload } = yield take(FetchedWikiPage().type);\n    const { data, page } = payload;\n\n    const cypherCodecs = yield select(CypherCodecs.selectPages());\n    const factions = yield select(Factions.selectPages());\n\n    // TODO: Why Object.values?\n    const factionModels = Object.values(\n      yield select(FactionModels.selectModelPages())\n    );\n\n    const wildCardModels = Object.values(\n      yield select(WildCardModels.selectModelPages())\n    );\n\n    const warjackWeapons = Object.keys(yield select(WarjackWeapons.select()));\n\n    if (page === \"Warcaster\") {\n      const factions = parseFactionsText(data.text);\n      yield put(Factions.set({ factions }));\n    } else if (page === \"Wild_Card\") {\n      const wildCards = parseWildCardText(data.text);\n      yield put(WildCardModels.set({ wildCards }));\n    } else if (factionModels.includes(page) || wildCardModels.includes(page)) {\n      const model = parseModelText(data.text);\n      model.name = { text: data.title, page };\n\n      const cortexSelections = identifyCortexSelections(\n        model.cortexes,\n        data.categories\n      );\n\n      if (cortexSelections) {\n        model.cortexSelections = cortexSelections;\n      }\n\n      const warjackWeaponSelections = buildWarjackWeaponSelections(\n        model.weaponDetails\n      );\n\n      if (warjackWeaponSelections) {\n        model.warjackWeaponSelections = warjackWeaponSelections;\n      }\n\n      yield put(Models.set({ page, model }));\n\n      let fetchPages = [];\n\n      if (cortexSelections) {\n        const cortexCategories = Object.values(cortexSelections).flatMap(\n          (advantages) =>\n            Object.values(advantages).flatMap(({ category }) => ({\n              text: category.replace(/_/g, \" \"),\n              page: category,\n            }))\n        );\n\n        fetchPages = [...fetchPages, ...cortexCategories];\n      }\n\n      if (warjackWeaponSelections) {\n        const weaponPages = Object.values(warjackWeaponSelections).map(\n          ({ name, page }) => ({ text: name, page })\n        );\n\n        fetchPages = [...fetchPages, ...weaponPages];\n      }\n\n      if (model.vehicleWeaponSelection) {\n        fetchPages = [...fetchPages, ...model.vehicleWeaponSelection];\n      }\n\n      if (fetchPages.length > 0) {\n        const pageSlices = partitionBy(50, fetchPages);\n\n        for (const pages of pageSlices) {\n          yield put(FetchPageIdsSlice({ pages }));\n        }\n      }\n    } else if (factions.includes(page)) {\n      const factionModels = parseFactionModelsText(data.text);\n      yield put(FactionModels.set({ page, factionModels }));\n    } else if (page === \"Cypher_Codecs\") {\n      const cypherCodecs = parseCypherCodecsText(data.text);\n      yield put(CypherCodecs.set({ cypherCodecs }));\n    } else if (cypherCodecs.includes(page)) {\n      const cypher = parseCypherText(data.text);\n      cypher.name = { text: data.title, page };\n      yield put(Cyphers.set({ page, cypher }));\n    } else if (warjackWeapons.includes(page)) {\n      const warjackWeapon = parseWarjackWeapon(data.text);\n      yield put(WarjackWeapons.set({ page, warjackWeapon }));\n    } else {\n      // TODO: Cannot parse WikiPage\n    }\n  }\n}\n\nexport { parseWikiPages };\n\nfunction buildWarjackWeaponSelections(weaponDetails) {\n  if (!weaponDetails) {\n    return undefined;\n  }\n\n  return Object.fromEntries(\n    weaponDetails.map(({ Cost, Location, Weapon }) => [\n      Weapon.page,\n      {\n        cost: Cost.text,\n        location: Location.text,\n        name: Weapon.text,\n        page: Weapon.page,\n      },\n    ])\n  );\n}\n\nfunction identifyCortexSelections(cortexes, categories) {\n  if (\n    !cortexes ||\n    Object.entries(cortexes).length === 0 ||\n    !categories ||\n    Object.entries(categories).length === 0\n  ) {\n    return undefined;\n  }\n\n  const categoryTexts = categories.map(({ category }) => category);\n\n  return Object.fromEntries(\n    Object.entries(cortexes).map(([cortex, advantages]) => [\n      cortex,\n      Object.fromEntries(\n        Object.entries(advantages).map(([advantage, text]) => [\n          advantage,\n          {\n            category: `Category:${findClosestCategory(\n              advantage,\n              categoryTexts\n            )}`,\n            text,\n          },\n        ])\n      ),\n    ])\n  );\n}\n\nfunction findClosestCategory(advantage, categoryTexts) {\n  return categoryTexts.find(\n    (category) => advantage === category.replace(/^WNM_/, \"\").replace(/_/g, \" \")\n  );\n}\n","import { all, put, take } from \"redux-saga/effects\";\nimport { FetchWikiPage } from \"../../messages\";\nimport { Factions } from \"../../state/Factions\";\n\nfunction* triggerFetchWikiPages() {\n  yield all([triggerFetchFactions()]);\n}\n\nexport { triggerFetchWikiPages };\n\nfunction* triggerFetchFactions() {\n  while (true) {\n    const { payload } = yield take(Factions.set().type);\n    const { factions } = payload;\n\n    const factionPages = Object.values(factions).map((faction) => faction.page);\n\n    for (const page of factionPages) {\n      yield put(FetchWikiPage({ page }));\n    }\n  }\n}\n","const digitsBase62 =\n  \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\nfunction toBase62(n) {\n  if (n === 0) return \"0\";\n  var result = \"\";\n  while (n > 0) {\n    result = digitsBase62[n % digitsBase62.length] + result;\n    n = parseInt(n / digitsBase62.length, 10);\n  }\n  return result;\n}\n\nfunction fromBase62(s) {\n  var result = 0;\n  for (var i = 0; i < s.length; i++) {\n    var p = digitsBase62.indexOf(s[i]);\n    if (p < 0) return NaN;\n    result += p * Math.pow(digitsBase62.length, s.length - i - 1);\n  }\n  return result;\n}\n\nexport { fromBase62, toBase62 };\n","import { eventChannel } from \"redux-saga\";\nimport { all, put, select, take } from \"redux-saga/effects\";\nimport {\n  CardDragEnded,\n  CardDragStarted,\n  FetchWikiPage,\n  MenuItemClicked,\n} from \"../../messages\";\nimport { AppSync } from \"../../state/AppSync\";\nimport { CypherCodecs } from \"../../state/CypherCodecs\";\nimport { Dragging } from \"../../state/Dragging\";\nimport { FactionModels } from \"../../state/FactionModels\";\nimport { Lists } from \"../../state/Lists\";\nimport { PageIds } from \"../../state/PageIds\";\nimport { Url } from \"../../state/Url\";\nimport { WarjackWeapons } from \"../../state/WarjackWeapons\";\nimport { WildCardModels } from \"../../state/WildCardModels\";\nimport { toBase62, fromBase62 } from \"./base62\";\n\nfunction* ui() {\n  yield all([\n    addCard(),\n    removeCards(),\n    setDraggingFalse(),\n    setDraggingTrue(),\n    updateCards(),\n    updateUrl(),\n    parseListsFromQuery(),\n    parseListsFromQuery2(),\n    fetchCardOnShow(),\n    fetchWeaponsIfWarjackAdded(),\n  ]);\n}\n\nexport { ui };\n\nfunction* updateCards() {\n  while (true) {\n    const { payload } = yield take(CardDragEnded().type);\n    const { reason, source, destination } = payload;\n    if (reason === \"DROP\" && destination.droppableId.startsWith(\"cards_\")) {\n      const sourceListIndex = parseInt(\n        source.droppableId.replace(\"cards_\", \"\"),\n        10\n      );\n      const sourcePosition = source.index;\n\n      const destinationListIndex = parseInt(\n        destination.droppableId.replace(\"cards_\", \"\"),\n        10\n      );\n      const destinationPosition = destination.index;\n\n      yield put(\n        Lists.moveCard({\n          source: { listIndex: sourceListIndex, cardIndex: sourcePosition },\n          destination: {\n            listIndex: destinationListIndex,\n            cardIndex: destinationPosition,\n          },\n        })\n      );\n    }\n  }\n}\n\nfunction* removeCards() {\n  while (true) {\n    const { payload } = yield take(CardDragEnded().type);\n    const { reason, source, destination } = payload;\n    if (reason === \"DROP\" && destination.droppableId.startsWith(\"trash\")) {\n      const listIndex = parseInt(source.droppableId.replace(\"cards_\", \"\"), 10);\n      const cardIndex = source.index;\n\n      yield put(\n        Lists.removeCard({\n          source: { listIndex, cardIndex },\n        })\n      );\n    }\n  }\n}\n\nfunction* addCard() {\n  while (true) {\n    const { payload } = yield take(MenuItemClicked().type);\n    const { page } = payload;\n    const model = yield select(FactionModels.selectByPage(page));\n    const wildCard = yield select(WildCardModels.selectByPage(page));\n    const cypher = yield select(CypherCodecs.selectByPage(page));\n    if (model || wildCard || cypher) {\n      const pageId = yield select(PageIds.selectByPage(page));\n      yield put(Lists.addCard({ pageId }));\n    }\n  }\n}\n\nfunction* setDraggingTrue() {\n  while (yield take(CardDragStarted().type)) {\n    yield put(Dragging.activate());\n  }\n}\n\nfunction* setDraggingFalse() {\n  while (yield take(CardDragEnded().type)) {\n    yield put(Dragging.deactivate());\n  }\n}\n\nfunction* updateUrl() {\n  while (yield take((action) => action.type.startsWith(\"Lists.\"))) {\n    const lists = yield select(Lists.select());\n    const pageIds = lists.map(({ cards }) => cards.map((_) => _.pageId));\n\n    if (window.history && window.history.replaceState) {\n      const maxPageId = Math.max(0, ...pageIds.flat());\n      const codeLength = Math.ceil(Math.log(maxPageId + 1) / Math.log(62)) || 0;\n\n      function renderWarjackWeaponIds(warjackWeaponIds, codeLength) {\n        const ids = warjackWeaponIds || [];\n        let res = \"\";\n        for (let i = 0; i < ids.length; i++) {\n          const id = ids[i];\n          res += (id ? toBase62(id) : \"0\").padStart(codeLength, \"0\");\n        }\n        return res;\n      }\n\n      const state = lists.reduce(\n        (state, list, index) => ({\n          ...state,\n          ...(list.title ? { [`t${index}`]: list.title } : {}),\n          [`l${index}`]: list.cards.reduce(\n            (acc, card) =>\n              acc +\n              toBase62(card.pageId).padStart(codeLength, \"0\") +\n              (card.cortexIds || card.warjackWeaponIds\n                ? `(${(card.cortexIds || [])\n                    .map((id) => toBase62(id).padStart(codeLength, \"0\"))\n                    .join(\"\")},${renderWarjackWeaponIds(\n                    card.warjackWeaponIds,\n                    codeLength\n                  )})`\n                : \"\") +\n              (card.vehicleWeaponId\n                ? `[${toBase62(card.vehicleWeaponId).padStart(\n                    codeLength,\n                    \"0\"\n                  )}]`\n                : \"\"),\n            \"\"\n          ),\n        }),\n        { v: 1, e: codeLength }\n      );\n\n      const query = Object.entries(state)\n        .map(([key, value]) => `${key}=${value}`)\n        .join(\"&\");\n      const url =\n        window.location.origin + window.location.pathname + \"?\" + query;\n\n      yield put(Url.set({ url }));\n\n      window.history.replaceState(query, \"\", url);\n    }\n  }\n}\n\nfunction* parseListsFromQuery() {\n  const loadChannel = eventChannel((emitter) => {\n    window.addEventListener(\"load\", emitter);\n\n    return () => {\n      window.removeEventListener(\"load\", emitter);\n    };\n  });\n\n  while (true) {\n    yield take(loadChannel);\n\n    yield* parseLists();\n  }\n}\n\nfunction* parseListsFromQuery2() {\n  yield take(AppSync.done().type);\n\n  yield* parseLists();\n}\n\nfunction* parseLists() {\n  const urlParams = new URLSearchParams(window.location.search);\n  const params = Object.fromEntries(urlParams);\n\n  const version = params.v;\n  const exponent = parseInt(params.e, 10) || 0;\n\n  let lists = null;\n  if (version === \"1\" && exponent) {\n    const listIndexes = Object.keys(params)\n      .filter((key) => key.match(/^l[\\d]+$/))\n      .map((key) => parseInt(key.substring(1), 10))\n      .sort((a, b) => a - b);\n\n    lists = listIndexes.map((index) => ({\n      title: params[\"t\" + index] || \"\",\n      cards: parseList(exponent, params[\"l\" + index]),\n    }));\n  } else {\n    lists = yield select(Lists.select());\n  }\n\n  // If the card is either a configured warjack or a configured vehicle, its page must be\n  // fetched in order for its subtitle to be shown correctly. A warjack or vehicle can be\n  // identified by having at least one cortex id, warjack weapon id or vehicle weapon id.\n  for (const list of lists) {\n    for (const {\n      pageId,\n      cortexIds,\n      warjackWeaponIds,\n      vehicleWeaponId,\n    } of list.cards) {\n      if (cortexIds || warjackWeaponIds || vehicleWeaponId) {\n        const page = yield select(PageIds.selectPageByPageId(pageId));\n        if (page) {\n          yield put(FetchWikiPage({ page }));\n        }\n      }\n    }\n  }\n\n  yield put(Lists.set({ lists }));\n}\n\nfunction* fetchWeaponsIfWarjackAdded() {\n  while (true) {\n    const { payload } = yield take(\"Models.set\");\n    if (\n      payload &&\n      payload.model &&\n      payload.model.types &&\n      payload.model.types.map((type) => type.text).includes(\"Warjack\")\n    ) {\n      const weaponDetails = payload.model.weaponDetails;\n      if (weaponDetails) {\n        for (const { Weapon } of weaponDetails) {\n          const page = Weapon.page;\n          if (page) {\n            const pageWithoutTarget = page.split(\"#\")[0];\n            const weapon = yield select(\n              WarjackWeapons.selectByPage(pageWithoutTarget)\n            );\n            if (!weapon) {\n              yield put(\n                WarjackWeapons.set({\n                  page: pageWithoutTarget,\n                  warjackWeapon: {},\n                })\n              );\n            }\n            yield put(FetchWikiPage({ page: pageWithoutTarget }));\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction* fetchCardOnShow() {\n  while (true) {\n    const { payload } = yield take(\"Lists.toggleCard\");\n    if (payload && payload.pageId) {\n      const page = yield select(PageIds.selectPageByPageId(payload.pageId));\n      if (page) {\n        yield put(FetchWikiPage({ page }));\n      }\n    }\n  }\n}\n\nfunction parseList(exponent, encodedList) {\n  function parseCards(cards, rest) {\n    if (rest === \"\") {\n      return cards;\n    }\n\n    const pageId = rest.slice(0, exponent);\n\n    if (rest[exponent] === \"(\") {\n      const blockEnd = rest.indexOf(\")\");\n      const delimiter = rest.indexOf(\",\");\n      if (!blockEnd || !delimiter) {\n        return [];\n      }\n\n      const block = rest.slice(exponent + 1, blockEnd);\n      const [cortexIds, warjackWeaponIds] = block.split(\",\");\n      return parseCards(\n        [\n          ...cards,\n          {\n            pageId,\n            cortexIds: partitionBy(exponent, cortexIds),\n            warjackWeaponIds: partitionBy(exponent, warjackWeaponIds),\n            vehicleWeaponId: [],\n          },\n        ],\n        rest.slice(blockEnd + 1)\n      );\n    }\n\n    if (rest[exponent] === \"[\") {\n      const blockEnd = rest.indexOf(\"]\");\n      if (!blockEnd) {\n        return [];\n      }\n\n      const vehicleWeaponId = rest.slice(exponent + 1, blockEnd);\n      return parseCards(\n        [\n          ...cards,\n          {\n            pageId,\n            cortexIds: [],\n            warjackWeaponIds: [],\n            vehicleWeaponId: [vehicleWeaponId],\n          },\n        ],\n        rest.slice(blockEnd + 1)\n      );\n    }\n\n    return parseCards(\n      [\n        ...cards,\n        { pageId, cortexIds: [], warjackWeaponIds: [], vehicleWeaponId: [] },\n      ],\n      rest.slice(exponent)\n    );\n  }\n\n  const cards = parseCards([], encodedList);\n\n  const decode = (string) => {\n    const normalizedString = string.replace(/^0+/, \"\") || \"0\";\n    if (normalizedString === \"0\") return null;\n    return parseInt(fromBase62(normalizedString), 10);\n  };\n\n  return cards\n    .map(({ pageId, cortexIds, warjackWeaponIds, vehicleWeaponId }) => ({\n      pageId: decode(pageId),\n      cortexIds: cortexIds.map(decode),\n      warjackWeaponIds: warjackWeaponIds.map(decode),\n      vehicleWeaponId: vehicleWeaponId.map(decode),\n    }))\n    .map(({ pageId, cortexIds, warjackWeaponIds, vehicleWeaponId }) => ({\n      pageId,\n      ...(cortexIds.length === 0 ? {} : { cortexIds }),\n      ...(warjackWeaponIds.length === 0 ? {} : { warjackWeaponIds }),\n      ...(vehicleWeaponId.length === 0\n        ? {}\n        : { vehicleWeaponId: vehicleWeaponId[0] }),\n      hidden: true,\n    }));\n}\n\nfunction partitionBy(slice, string) {\n  var strings = [];\n\n  for (let i = 0; i < string.length; i += slice) {\n    strings[strings.length] = string.slice(i, i + slice);\n  }\n\n  return strings;\n}\n","import { all, put } from \"redux-saga/effects\";\nimport { FetchWikiPage, RefreshWikiPages } from \"../../messages\";\nimport { cacheWikiPages } from \"./cacheWikiPages\";\nimport { parseWikiPages } from \"./parseWikiPages\";\nimport { triggerFetchWikiPages } from \"./triggerFetchWikiPages\";\nimport { ui } from \"./ui\";\n\nfunction* processes() {\n  yield all([\n    cacheWikiPages(),\n    parseWikiPages(),\n    triggerFetchWikiPages(),\n    ui(),\n    fetchInitialData(),\n    refresh(),\n  ]);\n}\n\nexport { processes };\n\nfunction* fetchInitialData() {\n  const pages = [\"Warcaster\", \"Wild_Card\", \"Cypher_Codecs\"];\n  for (const page of pages) {\n    yield put(FetchWikiPage({ page }));\n  }\n}\n\nfunction* refresh() {\n  yield put(RefreshWikiPages());\n}\n","import { StateShard } from \"./utils\";\n\nconst Version = StateShard(\"Version\", init, {}, {});\n\nexport { Version };\n\nfunction init(state) {\n  state.version = \"2023-05-21T21:55:00.000Z\";\n}\n","import { AppSync } from \"./AppSync\";\nimport { Cyphers } from \"./Cyphers\";\nimport { CypherCodecs } from \"./CypherCodecs\";\nimport { Dragging } from \"./Dragging\";\nimport { Factions } from \"./Factions\";\nimport { FactionModels } from \"./FactionModels\";\nimport { Lists } from \"./Lists\";\nimport { Models } from \"./Models\";\nimport { PageIds } from \"./PageIds\";\nimport { Url } from \"./Url\";\nimport { Version } from \"./Version\";\nimport { WarjackWeapons } from \"./WarjackWeapons\";\nimport { WikiPages } from \"./WikiPages\";\nimport { WildCardModels } from \"./WildCardModels\";\nimport { immer, initAll } from \"./utils\";\n\nconst objects = [\n  AppSync,\n  CypherCodecs,\n  Cyphers,\n  Factions,\n  FactionModels,\n  Models,\n  PageIds,\n  Url,\n  WarjackWeapons,\n  WildCardModels,\n  WikiPages,\n  // UI\n  Dragging,\n  Lists,\n  // General\n  Version,\n];\n\nconst state = initAll(...objects)({});\n\nconst dispatch = immer(({ type, payload }) => {\n  const namespaces = Object.fromEntries(\n    objects.map((group) => [group.namespace, group])\n  );\n\n  const namespace = type.substring(0, type.indexOf(\".\"));\n  if (namespace && namespaces[namespace]) {\n    return redirect({ type, payload }, namespaces[namespace]);\n  }\n  if (type === \"RE\") {\n    return (state) => {\n      state.data.models = {};\n      state.data.warjackWeapons = {};\n      for (const page of Object.keys(state.data.pages)) {\n        const white_list = [\n          \"Warcaster\",\n          \"Wild_Card\",\n          \"Cypher_Codecs\",\n          \"Aeternus_Continuum\",\n          \"Empyrean\",\n          \"Iron_Star_Alliance\",\n          \"Marcher_Worlds\",\n        ];\n        if (!white_list.includes(page)) {\n          delete state.data.pages[page];\n        }\n      }\n    };\n  }\n  return (state) => state;\n});\n\nexport { dispatch, state };\n\nfunction redirect(action, obj) {\n  return (state) =>\n    immer(({ type, payload }) => {\n      const f = obj.dispatch[type] || ((state, payload) => state);\n      return (state) => f(state, payload);\n    })(state, action);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport \"./index.css\";\nimport App from \"./ui/App\";\nimport { processes } from \"./businessLogic/processes\";\nimport { dispatch, state } from \"./state\";\n\nconst saga = initSaga();\nconst store = initStore(saga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nsaga.run(processes);\n\nfunction initStore(saga) {\n  const persistedState = localStorage.getItem(\"reduxState\")\n    ? JSON.parse(localStorage.getItem(\"reduxState\"))\n    : state;\n\n  const latestState =\n    new Date(persistedState.version) >= new Date(state.version)\n      ? persistedState\n      : state;\n\n  const composedEnhancers = composeWithDevTools(applyMiddleware(saga));\n  const store = createStore(dispatch, latestState, composedEnhancers);\n\n  store.subscribe(() => {\n    localStorage.setItem(\"reduxState\", JSON.stringify(store.getState()));\n  });\n\n  return store;\n}\n\nfunction initSaga() {\n  return createSagaMiddleware();\n}\n"],"sourceRoot":""}