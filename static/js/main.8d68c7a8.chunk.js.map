{"version":3,"sources":["ui/Aeternus_Continuum.png","ui/Fallback.png","ui/Empyrean.png","ui/Iron_Star_Alliance.png","ui/Lost_Legion.png","ui/Marcher_Worlds.png","ui/Wild_Card.png","messages.js","state/utils.js","state/AppSync.js","state/CypherCodecs.js","state/Cyphers.js","state/Dragging.js","state/FactionModels.js","state/Factions.js","state/Lists.js","state/PageIds.js","state/Url.js","state/WildCardModels.js","state/Models.js","state/VehicleWeapons.js","state/WarjackWeapons.js","state/CadreModels.js","state/CadreCategoryMembers.js","ui/App.js","state/io/Requests.js","state/ParserNames.js","businessLogic/processes/cacheParserNames.js","businessLogic/processes/jsonp.js","businessLogic/processes/cacheWikiPages/fetchWikiPage.js","businessLogic/processes/cacheWikiPages/updateCache.js","businessLogic/processes/partitionBy.js","businessLogic/processes/cacheWikiPages/fetchPageIds.js","businessLogic/processes/cacheWikiPages/index.js","businessLogic/processes/fetchCadres/fetchCadreCategoryMembers.js","businessLogic/processes/fetchCadres/fetchCadreModels.js","businessLogic/processes/fetchCadres/index.js","businessLogic/core/parse/utils.js","businessLogic/core/parse/parseCypherText.js","businessLogic/core/parse/parsers.js","businessLogic/core/parse/parseCypherCodecsText.js","businessLogic/core/parse/parseFactionModelsText.js","businessLogic/core/parse/parseFactionsText.js","businessLogic/core/parse/parseModelText.js","businessLogic/core/parse/parseVehicleAndWarjackWeaponText.js","businessLogic/core/parse/parseWildCardText.js","businessLogic/processes/parsers/parseCypher.js","businessLogic/processes/parsers/parseCypherCodecs.js","businessLogic/processes/parsers/parseFactionModels.js","businessLogic/processes/parsers/parseFactions.js","businessLogic/processes/parsers/parseModel.js","businessLogic/processes/parsers/parseVehicleOrWarjackWeapon.js","businessLogic/processes/parsers/parseWildCard.js","businessLogic/processes/parsers/index.js","businessLogic/processes/parseWikiPages.js","businessLogic/processes/triggerFetchWikiPages.js","businessLogic/processes/base62.js","businessLogic/processes/ui.js","businessLogic/processes/index.js","state/Version.js","state/index.js","index.js"],"names":["CardDragEnded","message","CardDragStarted","MenuItemClicked","FetchedWikiPage","FetchedWikiPageRevisions","RefreshWikiPages","type","payload","immer","f","state","action","produce","identity","StateShard","namespace","init","actions","actionCreators","selectors","dispatch","Object","fromEntries","entries","map","functionName","keys","name","args","a","pipe","fs","AppSync","data","sync","done","reasons","select","addReasons","selectDone","selectReasons","CypherCodecs","cypherCodecs","set","selectByPage","page","find","codec","Cypher","Cyphers","cyphers","setForPage","cypher","values","flat","Dragging","ui","dragging","activate","deactivate","FactionModels","factionModels","models","model","Name","Factions","factions","Lists","lists","oneEmptyList","addCard","pageId","card","hidden","cards","push","addEmptyList","moveListBy","listIndex","by","length","list","splice","removeCard","source","cardIndex","removeList","setCardCortex","cortexIds","setCardVehicleWeapon","vehicleWeaponId","setCardWarjackWeapons","hardpointNameIndex","warjackWeaponId","warjackWeaponIds","setListTitle","title","toggleCard","moveCard","destination","PageIds","pageIds","addPages","pageIdByTitle","selectPageByPageId","reduce","acc","statePageId","undefined","Url","url","WildCardModels","wildCardModels","wildCards","wildCard","faction","Models","VehicleWeapons","vehicleWeapons","vehicleWeapon","WarjackWeapons","warjackWeapons","warjackWeapon","CadreModels","cadreModels","setForCadrePageId","cadrePageId","selectCadreModelsByPageId","CadreCategoryMembers","cadreCategoryMembers","Header","Layout","Footer","Content","TextArea","Input","SubMenu","Menu","FactionImage","src","Aeternus_Continuum","alt","height","Empyrean","Iron_Star_Alliance","Lost_Legion","Marcher_Worlds","Wild_Card","Fallback","App","connect","initialized","syncReasons","sort","text","Type","Subtype","subtype","_","join","filter","flatMap","cadreModel","includes","cadre","allCadreModels","pageIdByPage","details","hardpoints","hardpointNames","parseHardpoints","cortexSelections","cortex","advantages","advantage","category","categoryId","warjackWeaponSelections","selection","vehicleWeaponSelection","Faction","cadres","dragStart","event","dragEnd","menuItemClicked","stopPropagation","allMenuItemsClicked","pages","forEach","target","value","setUrl","bookmark","document","querySelector","navigator","userAgent","match","range","createRange","selectNodeContents","window","getSelection","removeAllRanges","addRange","setSelectionRange","open","key","label","React","useState","openDrawer","setOpenDrawer","className","onDragStart","onDragEnd","droppableId","provided","ref","innerRef","droppableProps","style","animation","color","DeleteOutlined","href","placeholder","id","openKeys","onOpenChange","mode","triggerSubMenuAction","icon","gutter","xs","sm","md","lg","xl","xxl","placement","trigger","align","offset","onClick","cursor","display","paddingRight","fontSize","padding","PlusSquareOutlined","UpSquareOutlined","paddingLeft","DownSquareOutlined","span","generateListNamePlaceholder","maxLength","autoSize","onChange","Universal","i","count","size","draggableId","index","draggableProps","dragHandleProps","hoverable","Meta","avatar","width","textAlign","replace","vehicleWeaponName","cortexName","weaponIds","weaponId","weapon","pow","effect","squadSize","deploymentCost","baseSize","health","wildCardFactions","weaponPoints","modelStats","stat","specialRules","Fragment","weapons","ruleIndex","rule","colSpan","maneuvers","defaultValue","fontStyle","onSelect","Option","split","location","cortexes","advantageIndex","chassisSpecialRules","hardpointName","warjackWeaponNames","cost","warjackWeaponName","weaponDetails","release","lore","margin","SyncOutlined","spin","reason","description","Date","getFullYear","onKeyDown","factionName","visible","onClose","mask","closeIcon","MenuUnfoldOutlined","ItemGroup","shortName","slice","Item","w1","w2","j","indexOf","b","c1","c2","factionNames","justFactions","factionsPresent","types","cyperTypes","rHardpointGroup","results","n","RegExp","repeat","exec","hardpointCount","parseInt","groupCount","groupName","console","error","s","parsePage","queryCadreModels","queryCadres","queryRevisions","queryPageIds","Requests","io","requests","cached","pending","cache","queryParams","selectCached","expire","fetch","params","selectPending","request","fetched","findIndex","selectCachedRequestsByPageIds","parse","pageid","selectCachedParsedPageIds","selectCachedUrl","parserName","put","desc","jsonApiRequest","cmpageid","cmtype","cmlimit","cmtitle","prop","pageids","titles","encodeURIComponent","formatversion","format","keyValue","ParserNames","parserNames","cacheParserNames","take","jsonp","Promise","resolve","reject","callbackName","Math","round","random","body","removeChild","script","createElement","appendChild","fetchWikiPage","actionChannel","wikiPageChannel","wait","call","pageRevisions","query","categorymembers","member","categoryMembers","titleToPageId","delay","updateCache","refreshWikiPages","refreshOutdatedWikiPages","all","parsedPageIds","queryLength","revInfoByPageId","revision","missing","revid","max","revisions","revInfo","partitionBy","array","arrays","fetchPageIds","cachedPageIds","factionsSet","factionModelPages","wildCardPages","cypherPages","pageSlices","processedCount","cacheWikiPages","fetchCadreCategoryMembers","fetchCadreModels","fetchCadres","cleanText","prepareDOM","doc","DOMParser","parseFromString","querySelectorAll","node","parentNode","parseCypherText","removeUndefinedValues","extractLink","helper","texts","tagName","nextSibling","innerText","trim","extractParagraphs","p","hrefs","obj","Array","isArray","parseAnchorTable","table","header","th","tr","td","anchors","parseAnchor","row","titleColon","hrefTitle","parseCypherCodecsText","cypherCodecsTable","cypherCodec","parseFactionModelsText","parseFactionsText","collectFactions","anchor","parseModelText","factionAndTypes","extractList","extractText","extractDefinitions","extractWeaponSelection","definitions","parseDefinitionText","extractCortexes","modelStatsData","modelStatsLength","from","weaponsData","weaponsList","tds","stats","previousWeapons","lastWeapon","weaponDetailsTable","weaponDetailsData","detailsHeader","as","pairs","innerHTML","definition","groups","parseVehicleAndWarjackWeaponText","parseVehicleOrWarjackWeapon","vehicleOrWarjackWeapon","prefix","res","availableFor","pointCostNode","pointCost","locationNode","specialRulesP","specialRule","childNodes","textContent","textNode","previousSibling","nodeValue","insertAdjacentText","remove","nodeName","entry","colonIndex","acc2","index2","parseWildCardText","h1OrTable","factionAndModels","h1","last","parseCypher","parseCypherCodecs","parseFactionModels","parseFactions","parseModel","identifyCortexSelections","categories","buildWarjackWeaponSelections","fetchPages","cortexCategories","weaponPages","Cost","Location","Weapon","categoryTexts","findClosestCategory","vehicles","some","warjacks","vehicle","warjack","parseWildCard","parsers","parseWikiPages","parser","triggerFetchWikiPages","triggerFetchFactions","factionPages","digitsBase62","toBase62","result","updateCards","removeCards","setDraggingTrue","setDraggingFalse","updateUrl","parseListsFromQuery","parseListsFromQuery2","parseLists","fetchWeaponsIfVehicleAdded","fetchWeaponsIfWarjackAdded","fetchCardOnShow","startsWith","sourceListIndex","sourcePosition","destinationListIndex","destinationPosition","history","replaceState","renderWarjackWeaponIds","codeLength","ids","padStart","maxPageId","ceil","log","v","e","origin","pathname","loadChannel","eventChannel","emitter","addEventListener","removeEventListener","urlParams","URLSearchParams","search","version","exponent","listIndexes","substring","parseList","pageWithoutTarget","encodedList","parseCards","rest","blockEnd","delimiter","decode","string","normalizedString","NaN","fromBase62","strings","processes","fetchInitialData","continuePending","refresh","Version","objects","initAll","namespaces","group","saga","createSagaMiddleware","store","persistedState","localStorage","getItem","JSON","latestState","composedEnhancers","composeWithDevTools","applyMiddleware","createStore","subscribe","setItem","stringify","getState","initStore","ReactDOM","render","getElementById","run"],"mappings":"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","file":"static/js/main.8d68c7a8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Aeternus_Continuum.d1b19d0e.png\";","export default __webpack_public_path__ + \"static/media/Fallback.1ae05c50.png\";","export default __webpack_public_path__ + \"static/media/Empyrean.4ab49225.png\";","export default __webpack_public_path__ + \"static/media/Iron_Star_Alliance.82d76402.png\";","export default __webpack_public_path__ + \"static/media/Lost_Legion.78737fb2.png\";","export default __webpack_public_path__ + \"static/media/Marcher_Worlds.61a330cf.png\";","export default __webpack_public_path__ + \"static/media/Wild_Card.3da9dbca.png\";","const CardDragEnded = message(\"CARD/DRAG_ENDED\");\nconst CardDragStarted = message(\"CARD/DRAG_STARTED\");\nconst MenuItemClicked = message(\"MENU_ITEM/CLICKED\");\n\nconst FetchedWikiPage = message(\"WIKI_PAGE/FETCHED\");\nconst FetchedWikiPageRevisions = message(\"WIKI_PAGE_REVISIONS/FETCHED\");\nconst RefreshWikiPages = message(\"WIKI_PAGES/REFRESH\");\n\nexport {\n  CardDragEnded,\n  CardDragStarted,\n  FetchedWikiPage,\n  FetchedWikiPageRevisions,\n  MenuItemClicked,\n  RefreshWikiPages,\n};\n\nfunction message(type) {\n  return (payload = {}) => ({ type, payload });\n}\n","import produce from \"immer\";\n\nconst initAll = (...objects) =>\n  pipe(...objects.map((obj) => produce(obj.init)));\n\nconst immer = (f) => (state, action) => produce(f(action) || identity)(state);\n\nconst StateShard = (namespace, init, actions, actionCreators, selectors) => ({\n  namespace,\n  init,\n  dispatch: Object.fromEntries(\n    Object.entries(actions).map(([functionName, f]) => [\n      namespace + \".\" + functionName,\n      f,\n    ])\n  ),\n  ...Object.fromEntries(\n    Object.keys(actions).map((functionName) => [\n      functionName,\n      (payload = {}) => ({ type: namespace + \".\" + functionName, payload }),\n    ])\n  ),\n  ...actionCreators,\n  ...Object.fromEntries(\n    Object.entries(selectors).map(([name, f]) => [\n      name,\n      (...args) =>\n        (state) =>\n          f(state, ...args),\n    ])\n  ),\n});\n\nexport { StateShard, immer, initAll };\n\nfunction identity(a) {\n  return a;\n}\n\nfunction pipe(...fs) {\n  return (a) => {\n    for (const f of fs) {\n      a = f(a);\n    }\n    return a;\n  };\n}\n","import { StateShard } from \"./utils\";\n\nconst AppSync = StateShard(\n  \"AppSync\",\n  init,\n  { done, addReasons },\n  {},\n  { selectDone, selectReasons }\n);\n\nexport { AppSync };\n\nfunction init(state) {\n  if (!state.data) {\n    state.data = {};\n  }\n\n  if (!state.data.sync) {\n    state.data.sync = {};\n  }\n\n  state.data.sync.done = false;\n  state.data.sync.reasons = [];\n}\n\n// Actions\n\nfunction done(state) {\n  const sync = select(state);\n  sync.done = true;\n}\n\nfunction addReasons(state, { reasons }) {\n  const sync = select(state);\n  sync.reasons = [...sync.reasons, ...reasons];\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.data.sync;\n}\n\nfunction selectDone(state) {\n  const sync = select(state);\n  return sync.done;\n}\n\nfunction selectReasons(state) {\n  const sync = select(state);\n  return sync.reasons;\n}\n","import { StateShard } from \"./utils\";\n\nconst CypherCodecs = StateShard(\n  \"CypherCodecs\",\n  init,\n  { set },\n  {},\n  { select, selectByPage }\n);\n\nexport { CypherCodecs };\n\nfunction init(state) {\n  if (!state.data) {\n    state.data = {};\n  }\n\n  state.data.cypherCodecs = [];\n}\n\n// Actions\n\nfunction set(state, { cypherCodecs }) {\n  state.data.cypherCodecs = cypherCodecs;\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.data.cypherCodecs;\n}\n\nfunction selectByPage(state, page) {\n  const codecs = select(state);\n  return codecs.find((codec) => codec.Cypher.page === page);\n}\n","import { StateShard } from \"./utils\";\n\nconst Cyphers = StateShard(\n  \"Cyphers\",\n  init,\n  { setForPage },\n  {},\n  { selectByPage }\n);\n\nexport { Cyphers };\n\nfunction init(state) {\n  if (!state.data) {\n    state.data = {};\n  }\n\n  state.data.cyphers = {};\n}\n\n// Actions\n\nfunction setForPage(state, { page, cypher }) {\n  const cyphers = select(state);\n  cyphers[page] = cypher;\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.data.cyphers;\n}\n\nfunction selectByPage(state, page) {\n  const cyphers = select(state);\n  return Object.values(cyphers)\n    .flat()\n    .find((cypher) => cypher.name.page === page);\n}\n","import { StateShard } from \"./utils\";\n\nconst Dragging = StateShard(\n  \"Dragging\",\n  init,\n  { activate, deactivate },\n  {},\n  { select }\n);\n\nexport { Dragging };\n\nfunction init(state) {\n  if (!state.ui) {\n    state.ui = {};\n  }\n\n  state.ui.dragging = false;\n}\n\n// Actions\n\nfunction activate(state) {\n  state.ui.dragging = true;\n}\n\nfunction deactivate(state) {\n  state.ui.dragging = false;\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.ui.dragging;\n}\n","import { StateShard } from \"./utils\";\n\nconst FactionModels = StateShard(\n  \"FactionModels\",\n  init,\n  { setForPage },\n  {},\n  { select, selectByPage }\n);\n\nexport { FactionModels };\n\nfunction init(state) {\n  if (!state.data) {\n    state.data = {};\n  }\n\n  state.data.factionModels = {};\n}\n\n// Actions\n\nfunction setForPage(state, { page, factionModels }) {\n  const models = select(state);\n  models[page] = factionModels;\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.data.factionModels;\n}\n\nfunction selectByPage(state, page) {\n  const models = select(state);\n  return Object.values(models)\n    .flat()\n    .find((model) => model.Name.page === page);\n}\n","import { StateShard } from \"./utils\";\n\nconst Factions = StateShard(\"Factions\", init, { set }, {}, { select });\n\nexport { Factions };\n\nfunction init(state) {\n  if (!state.data) {\n    state.data = {};\n  }\n\n  state.data.factions = {};\n}\n\n// Actions\n\nfunction set(state, { factions }) {\n  state.data.factions = factions;\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.data.factions;\n}\n","import { StateShard } from \"./utils\";\n\nconst Lists = StateShard(\n  \"Lists\",\n  init,\n  {\n    addCard,\n    addEmptyList,\n    moveListBy,\n    removeCard,\n    removeList,\n    set,\n    setCardCortex,\n    setCardVehicleWeapon,\n    setCardWarjackWeapons,\n    setListTitle,\n    toggleCard,\n    moveCard,\n  },\n  {},\n  { select }\n);\n\nexport { Lists };\n\nconst oneEmptyList = [\n  {\n    title: \"\",\n    cards: [],\n  },\n];\n\nfunction init(state) {\n  if (!state.ui) {\n    state.ui = {};\n  }\n\n  state.ui.lists = oneEmptyList;\n}\n\n// Actions\n\nfunction set(state, { lists }) {\n  state.ui.lists = lists.length > 0 ? lists : oneEmptyList;\n}\n\nfunction setListTitle(state, { listIndex, title }) {\n  const lists = select(state);\n  lists[listIndex].title = title;\n}\n\nfunction addCard(state, { pageId }) {\n  const lists = select(state);\n  const card = { pageId, hidden: true };\n  lists[0].cards.push(card);\n}\n\nfunction addEmptyList(state, { listIndex }) {\n  const lists = select(state);\n  lists.splice(listIndex, 0, oneEmptyList[0]);\n}\n\nfunction removeCard(state, { source }) {\n  const lists = select(state);\n  lists[source.listIndex].cards.splice(source.cardIndex, 1);\n}\n\nfunction removeList(state, { listIndex }) {\n  const lists = select(state);\n  lists.splice(listIndex, 1);\n  if (lists.length === 0) {\n    addEmptyList(state, { listIndex: 0 });\n  }\n}\n\nfunction moveListBy(state, { listIndex, by }) {\n  const lists = select(state);\n  if (\n    (by > 0 && listIndex + by < lists.length) ||\n    (by < 0 && listIndex + by >= 0)\n  ) {\n    const list = lists[listIndex];\n    lists.splice(listIndex, 1);\n    lists.splice(listIndex + by, 0, list);\n  }\n}\n\nfunction moveCard(state, { destination, source }) {\n  const lists = select(state);\n  const card = lists[source.listIndex].cards[source.cardIndex];\n  lists[source.listIndex].cards.splice(source.cardIndex, 1);\n  lists[destination.listIndex].cards.splice(destination.cardIndex, 0, card);\n}\n\nfunction toggleCard(state, { listIndex, cardIndex, pageId }) {\n  const lists = select(state);\n  const card = lists[listIndex].cards[cardIndex];\n  if (card.pageId === pageId) {\n    card.hidden = !card.hidden;\n  }\n}\n\nfunction setCardCortex(state, { listIndex, cardIndex, pageId, cortexIds }) {\n  const lists = select(state);\n  const card = lists[listIndex].cards[cardIndex];\n  if (card.pageId === pageId) {\n    card.cortexIds = cortexIds;\n  }\n}\n\nfunction setCardWarjackWeapons(\n  state,\n  { listIndex, cardIndex, hardpointNameIndex, pageId, warjackWeaponId }\n) {\n  const lists = select(state);\n  const card = lists[listIndex].cards[cardIndex];\n  if (card.pageId === pageId) {\n    if (!card.warjackWeaponIds) {\n      card.warjackWeaponIds = [];\n    }\n    card.warjackWeaponIds[hardpointNameIndex] = warjackWeaponId;\n  }\n}\n\nfunction setCardVehicleWeapon(\n  state,\n  { listIndex, cardIndex, pageId, vehicleWeaponId }\n) {\n  const lists = select(state);\n  const card = lists[listIndex].cards[cardIndex];\n  if (card.pageId === pageId) {\n    card.vehicleWeaponId = vehicleWeaponId;\n  }\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.ui.lists;\n}\n","import { StateShard } from \"./utils\";\n\nconst PageIds = StateShard(\n  \"PageIds\",\n  init,\n  { addPages },\n  {},\n  { select, selectByPage, selectPageByPageId }\n);\n\nexport { PageIds };\n\nfunction init(state) {\n  if (!state.data) {\n    state.data = {};\n  }\n\n  state.data.pageIds = {};\n}\n\n// Actions\n\nfunction addPages(state, { pageIdByTitle }) {\n  const pageIds = select(state);\n  for (const title in pageIdByTitle) {\n    pageIds[title] = pageIdByTitle[title];\n  }\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.data.pageIds;\n}\n\nfunction selectByPage(state, page) {\n  const pageIds = select(state);\n  return pageIds[page];\n}\n\nfunction selectPageByPageId(state, pageId) {\n  const pageIds = select(state);\n  return Object.entries(pageIds).reduce(\n    (acc, [page, statePageId]) =>\n      acc ? acc : statePageId === pageId ? page : acc,\n    undefined\n  );\n}\n","import { StateShard } from \"./utils\";\n\nconst Url = StateShard(\"Url\", init, { set }, {}, { select });\n\nexport { Url };\n\nfunction init(state) {\n  if (!state.ui) {\n    state.ui = {};\n  }\n\n  state.ui.url = \"\";\n}\n\n// Actions\n\nfunction set(state, { url }) {\n  state.ui.url = url;\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.ui.url;\n}\n","import { StateShard } from \"./utils\";\n\nconst WildCardModels = StateShard(\n  \"WildCardModels\",\n  init,\n  { set },\n  {},\n  { select, selectByPage }\n);\n\nexport { WildCardModels };\n\nfunction init(state) {\n  if (!state.data) {\n    state.data = {};\n  }\n\n  state.data.wildCardModels = {};\n}\n\n// Actions\n\nfunction set(state, { wildCards }) {\n  const models = select(state);\n  for (const wildCard of wildCards) {\n    models[wildCard.faction] = wildCard.models;\n  }\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.data.wildCardModels;\n}\n\nfunction selectByPage(state, page) {\n  const models = select(state);\n  return Object.values(models)\n    .flat()\n    .find((model) => model.Name.page === page);\n}\n","import { StateShard } from \"./utils\";\n\nconst Models = StateShard(\n  \"Models\",\n  init,\n  { setForPage },\n  {},\n  { select, selectByPage }\n);\n\nexport { Models };\n\nfunction init(state) {\n  if (!state.data) {\n    state.data = {};\n  }\n\n  state.data.models = {};\n}\n\n// Actions\n\nfunction setForPage(state, { page, model }) {\n  const models = select(state);\n  models[page] = model;\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.data.models;\n}\n\nfunction selectByPage(state, page) {\n  const models = select(state);\n  return Object.values(models)\n    .flat()\n    .find((model) => model.name.page === page);\n}\n","import { StateShard } from \"./utils\";\n\nconst VehicleWeapons = StateShard(\n  \"VehicleWeapons\",\n  init,\n  { setForPage },\n  {},\n  { select, selectByPage }\n);\n\nexport { VehicleWeapons };\n\nfunction init(state) {\n  if (!state.data) {\n    state.data = {};\n  }\n\n  state.data.vehicleWeapons = {};\n}\n\n// Actions\n\nfunction setForPage(state, { page, vehicleWeapon }) {\n  const vehicleWeapons = select(state);\n  vehicleWeapons[page] = vehicleWeapon;\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.data.vehicleWeapons;\n}\n\nfunction selectByPage(state, page) {\n  const vehicleWeapons = select(state);\n  return vehicleWeapons[page];\n}\n","import { StateShard } from \"./utils\";\n\nconst WarjackWeapons = StateShard(\n  \"WarjackWeapons\",\n  init,\n  { setForPage },\n  {},\n  { select, selectByPage }\n);\n\nexport { WarjackWeapons };\n\nfunction init(state) {\n  if (!state.data) {\n    state.data = {};\n  }\n\n  state.data.warjackWeapons = {};\n}\n\n// Actions\n\nfunction setForPage(state, { page, warjackWeapon }) {\n  const warjackWeapons = select(state);\n  warjackWeapons[page] = warjackWeapon;\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.data.warjackWeapons;\n}\n\nfunction selectByPage(state, page) {\n  const warjackWeapons = select(state);\n  return warjackWeapons[page];\n}\n","import { StateShard } from \"./utils\";\n\nconst CadreModels = StateShard(\n  \"CadreModels\",\n  init,\n  { set, setForCadrePageId },\n  {},\n  { select, selectCadreModelsByPageId }\n);\n\nexport { CadreModels };\n\nfunction init(state) {\n  if (!state.data) {\n    state.data = {};\n  }\n\n  state.data.cadreModels = {};\n}\n\n// Actions\n\nfunction set(state, { cadreModels }) {\n  state.data.cadreModels = cadreModels;\n}\n\nfunction setForCadrePageId(state, { cadrePageId, cadreModels }) {\n  select(state)[cadrePageId] = cadreModels;\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.data.cadreModels;\n}\n\nfunction selectCadreModelsByPageId(state, pageId) {\n  const cadreModels = select(state);\n  return cadreModels[pageId];\n}\n","import { StateShard } from \"./utils\";\n\nconst CadreCategoryMembers = StateShard(\n  \"CadreCategoryMembers\",\n  init,\n  { set },\n  {},\n  { select }\n);\n\nexport { CadreCategoryMembers };\n\nfunction init(state) {\n  if (!state.data) {\n    state.data = {};\n  }\n\n  state.data.cadreCategoryMembers = {};\n}\n\n// Actions\n\nfunction set(state, { cadreCategoryMembers }) {\n  state.data.cadreCategoryMembers = cadreCategoryMembers;\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.data.cadreCategoryMembers;\n}\n","import \"./App.css\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  Badge,\n  Card,\n  Col,\n  Drawer,\n  Input,\n  Layout,\n  Menu,\n  Row,\n  Select,\n  Tooltip,\n} from \"antd\";\nimport {\n  DeleteOutlined,\n  DownSquareOutlined,\n  MenuUnfoldOutlined,\n  PlusSquareOutlined,\n  SyncOutlined,\n  UpSquareOutlined,\n} from \"@ant-design/icons\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport Aeternus_Continuum from \"./Aeternus_Continuum.png\";\nimport Fallback from \"./Fallback.png\";\nimport Empyrean from \"./Empyrean.png\";\nimport Iron_Star_Alliance from \"./Iron_Star_Alliance.png\";\nimport Lost_Legion from \"./Lost_Legion.png\";\nimport Marcher_Worlds from \"./Marcher_Worlds.png\";\nimport Wild_Card from \"./Wild_Card.png\";\nimport { CardDragEnded, CardDragStarted, MenuItemClicked } from \"../messages\";\nimport { AppSync } from \"../state/AppSync\";\nimport { CypherCodecs } from \"../state/CypherCodecs\";\nimport { Cyphers } from \"../state/Cyphers\";\nimport { Dragging } from \"../state/Dragging\";\nimport { FactionModels } from \"../state/FactionModels\";\nimport { Factions } from \"../state/Factions\";\nimport { Lists } from \"../state/Lists\";\nimport { PageIds } from \"../state/PageIds\";\nimport { Url } from \"../state/Url\";\nimport { WildCardModels } from \"../state/WildCardModels\";\nimport { Models } from \"../state/Models\";\nimport { VehicleWeapons } from \"../state/VehicleWeapons\";\nimport { WarjackWeapons } from \"../state/WarjackWeapons\";\nimport { CadreModels } from \"../state/CadreModels\";\nimport { CadreCategoryMembers } from \"../state/CadreCategoryMembers\";\n\nconst { Header, Footer, Content } = Layout;\nconst { TextArea } = Input;\nconst { SubMenu } = Menu;\n\nfunction FactionImage({ faction }) {\n  switch (faction) {\n    case \"Aeternus_Continuum\":\n      return <img src={Aeternus_Continuum} alt={faction} height=\"35px\" />;\n    case \"Empyrean\":\n      return <img src={Empyrean} alt={faction} height=\"35px\" />;\n    case \"Iron_Star_Alliance\":\n      return <img src={Iron_Star_Alliance} alt={faction} height=\"35px\" />;\n    case \"Lost_Legion\":\n      return <img src={Lost_Legion} alt={faction} height=\"35px\" />;\n    case \"Marcher_Worlds\":\n      return <img src={Marcher_Worlds} alt={faction} height=\"35px\" />;\n    case \"Wild_Card\":\n      return <img src={Wild_Card} alt={faction} height=\"35px\" />;\n    case \"Universal\":\n      return <img src={Fallback} alt={faction} height=\"35px\" />;\n    default:\n      return <img src={Fallback} alt={faction} height=\"35px\" />;\n  }\n}\n\nfunction AppPresentation({\n  initialized,\n  syncReasons,\n  factionModels,\n  wildCardModels,\n  cypherCodecs,\n  dragging,\n  menuItemClicked,\n  allMenuItemsClicked,\n  dragEnd,\n  dragStart,\n  lists,\n  toggleCard,\n  removeList,\n  addEmptyList,\n  moveListBy,\n  setListTitle,\n  setUrl,\n  url,\n  bookmark,\n  open,\n  setCardCortex,\n  setCardWarjackWeapons,\n  setCardVehicleWeapon,\n  factions,\n  vehicleWeapons,\n  warjackWeapons,\n  cadres,\n}) {\n  const [openDrawer, setOpenDrawer] = React.useState(\"\");\n\n  const onOpenChangeDrawers = (keys) => {\n    if (keys.length > 0) {\n      const key = keys[0];\n      if (key === openDrawer) {\n        setOpenDrawer(\"\");\n      } else {\n        setOpenDrawer(keys[0]);\n      }\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Layout>\n        <Layout>\n          <DragDropContext onDragStart={dragStart} onDragEnd={dragEnd}>\n            <Header>\n              <Droppable key={\"trash_header\"} droppableId={\"trash_header\"}>\n                {(provided) => (\n                  <div ref={provided.innerRef} {...provided.droppableProps}>\n                    {dragging ? (\n                      <div\n                        style={{\n                          animation:\n                            \"shake 0.82s cubic-bezier(.36,.07,.19,.97) both\",\n                          color: \"white\",\n                        }}\n                      >\n                        <DeleteOutlined />\n                      </div>\n                    ) : (\n                      <a className=\"logo\" href=\"/\">\n                        WARFASTER\n                      </a>\n                    )}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n            </Header>\n            {!initialized ? (\n              <Content>\n                <Layout>\n                  <Row>\n                    <Col xs={24} sm={12} md={12} lg={12} xl={8} xxl={8}>\n                      <div className=\"cards\" key=\"cards0\">\n                        <div style={{ cursor: \"pointer\" }} className=\"header\">\n                          <Row>\n                            <Col span={16} className=\"army-list-title\">\n                              <TextArea\n                                value={\"Setting up Warfaster\"}\n                                maxLength={30}\n                                autoSize\n                              />\n                            </Col>\n                            <Col span={8} className=\"faction-icons\">\n                              <SyncOutlined\n                                spin\n                                style={{\n                                  color: \"#d1c5b1\",\n                                  fontSize: \"23px\",\n                                  margin: \"3px 10px 0 0\",\n                                }}\n                              />\n                            </Col>\n                          </Row>\n                        </div>\n\n                        <div>\n                          {syncReasons.map(({ reason, description }, index) => (\n                            <div className=\"body\" key={`reason${index}`}>\n                              <Card hoverable className=\"card\">\n                                <Card.Meta\n                                  avatar={\n                                    <div\n                                      style={{\n                                        height: \"25px\",\n                                        width: \"35px\",\n                                        textAlign: \"center\",\n                                      }}\n                                    >\n                                      <SyncOutlined\n                                        spin\n                                        style={{\n                                          color: \"#d1c5b1\",\n                                          fontSize: \"35px\",\n                                        }}\n                                      />\n                                    </div>\n                                  }\n                                  title={\n                                    <>\n                                      <div>{reason}</div>\n                                      <div className=\"card-type\">\n                                        {description}\n                                      </div>\n                                    </>\n                                  }\n                                />\n                              </Card>\n                            </div>\n                          ))}\n                        </div>\n                        <div className=\"footer\">\n                          <Badge\n                            size=\"small\"\n                            key=\"_badge\"\n                            count={syncReasons.length}\n                            offset={[10, 5]}\n                          >\n                            Loading:\n                          </Badge>\n                        </div>\n                      </div>\n                    </Col>\n                  </Row>\n                </Layout>\n              </Content>\n            ) : (\n              <>\n                <Content>\n                  <Menu\n                    id=\"factions\"\n                    openKeys={[]}\n                    onOpenChange={onOpenChangeDrawers}\n                    mode=\"horizontal\"\n                    triggerSubMenuAction=\"click\"\n                  >\n                    {factionModels.map(([factionName, faction, models]) => (\n                      <SubMenu\n                        key={faction}\n                        icon={<FactionImage faction={faction} />}\n                      ></SubMenu>\n                    ))}\n                  </Menu>\n                </Content>\n                <Content>\n                  <Layout>\n                    <Row gutter={16}>\n                      {lists.map(({ title, cards }, listIndex) => (\n                        <Col\n                          key={`lists_col_${listIndex}`}\n                          xs={24}\n                          sm={12}\n                          md={12}\n                          lg={12}\n                          xl={8}\n                          xxl={8}\n                        >\n                          <div className=\"cards\" key={`cards${listIndex}`}>\n                            <Tooltip\n                              placement=\"top\"\n                              color=\"transparent\"\n                              trigger=\"click\"\n                              align={{ offset: [0, 17] }}\n                              title={\n                                <div className=\"ant-tooltip-inner-box\">\n                                  <div\n                                    onClick={removeList(listIndex)}\n                                    style={{\n                                      cursor: \"pointer\",\n                                      display: \"inline-block\",\n                                      paddingRight: \"4px\",\n                                      fontSize: \"1.5em\",\n                                    }}\n                                  >\n                                    <DeleteOutlined />\n                                  </div>\n                                  <div\n                                    onClick={addEmptyList(listIndex)}\n                                    style={{\n                                      cursor: \"pointer\",\n                                      display: \"inline-block\",\n                                      padding: \"0 4px\",\n                                      fontSize: \"1.5em\",\n                                    }}\n                                  >\n                                    <PlusSquareOutlined />\n                                  </div>\n                                  <div\n                                    onClick={moveListBy(listIndex, -1)}\n                                    style={{\n                                      cursor: \"pointer\",\n                                      display: \"inline-block\",\n                                      padding: \"0 4px\",\n                                      fontSize: \"1.5em\",\n                                    }}\n                                  >\n                                    <UpSquareOutlined />\n                                  </div>\n                                  <div\n                                    onClick={moveListBy(listIndex, 1)}\n                                    style={{\n                                      cursor: \"pointer\",\n                                      display: \"inline-block\",\n                                      paddingLeft: \"4px\",\n                                      fontSize: \"1.5em\",\n                                    }}\n                                  >\n                                    <DownSquareOutlined />\n                                  </div>\n                                </div>\n                              }\n                            >\n                              <div\n                                style={{ cursor: \"pointer\" }}\n                                className=\"header\"\n                              >\n                                <Row>\n                                  <Col span={16} className=\"army-list-title\">\n                                    <TextArea\n                                      placeholder={generateListNamePlaceholder(\n                                        cards,\n                                        factions,\n                                        \"Name your list\"\n                                      )}\n                                      value={title}\n                                      maxLength={30}\n                                      autoSize\n                                      onChange={setListTitle(listIndex)}\n                                    />\n                                  </Col>\n                                  <Col span={8} className=\"faction-icons\">\n                                    {Object.entries(\n                                      cards.reduce(\n                                        (acc, card) => ({\n                                          ...acc,\n                                          ...(card.faction\n                                            ? {\n                                                [card.faction]:\n                                                  (acc[card.faction] || 0) + 1,\n                                              }\n                                            : {\n                                                Universal:\n                                                  (acc.Universal || 0) + 1,\n                                              }),\n                                        }),\n                                        {}\n                                      )\n                                    )\n                                      .sort()\n                                      .map(([faction, count], i) => (\n                                        <Badge\n                                          size=\"small\"\n                                          key={`badge${i}`}\n                                          count={count}\n                                          offset={[0, 10]}\n                                        >\n                                          <FactionImage faction={faction} />\n                                        </Badge>\n                                      ))}\n                                  </Col>\n                                </Row>\n                              </div>\n                            </Tooltip>\n\n                            <Droppable\n                              key={`cards_${listIndex}`}\n                              droppableId={`cards_${listIndex}`}\n                            >\n                              {(provided) => (\n                                <div\n                                  ref={provided.innerRef}\n                                  {...provided.droppableProps}\n                                >\n                                  {cards.map(\n                                    (\n                                      {\n                                        card,\n                                        hidden,\n                                        type,\n                                        title,\n                                        page,\n                                        pageId,\n                                        cortexIds,\n                                        vehicleWeaponId,\n                                        warjackWeaponIds,\n                                        subtype,\n                                        faction,\n                                        details,\n                                      },\n                                      cardIndex\n                                    ) => (\n                                      <Draggable\n                                        key={`${page}_${listIndex}_${cardIndex}`}\n                                        draggableId={`${page}_${listIndex}_${cardIndex}`}\n                                        index={cardIndex}\n                                      >\n                                        {(provided) => (\n                                          <div\n                                            className=\"body\"\n                                            ref={provided.innerRef}\n                                            {...provided.draggableProps}\n                                            {...provided.dragHandleProps}\n                                          >\n                                            <Card\n                                              hoverable\n                                              className={[\n                                                \"card\",\n                                                faction,\n                                                type,\n                                              ]}\n                                              onClick={toggleCard(\n                                                listIndex,\n                                                cardIndex,\n                                                pageId,\n                                                card\n                                              )}\n                                            >\n                                              <Card.Meta\n                                                avatar={\n                                                  faction ? (\n                                                    <div\n                                                      style={{\n                                                        height: \"25px\",\n                                                        width: \"35px\",\n                                                        textAlign: \"center\",\n                                                      }}\n                                                    >\n                                                      <FactionImage\n                                                        faction={faction}\n                                                      />\n                                                    </div>\n                                                  ) : (\n                                                    <FactionImage faction=\"Universal\" />\n                                                  )\n                                                }\n                                                title={\n                                                  <>\n                                                    <div>{title}</div>\n                                                    <div className=\"card-type\">\n                                                      {(faction || \"\").replace(\n                                                        /_/g,\n                                                        \" \"\n                                                      )}\n                                                      {subtype\n                                                        ? \" \" + subtype\n                                                        : \"\"}\n                                                      {type ? \" \" + type : \"\"}\n                                                    </div>\n                                                    <div>\n                                                      <span className=\"subtitle\">\n                                                        {[\n                                                          ...(!details ||\n                                                          !details.vehicleWeaponSelection ||\n                                                          !vehicleWeaponName(\n                                                            details.vehicleWeaponSelection,\n                                                            vehicleWeaponId\n                                                          )\n                                                            ? []\n                                                            : [\n                                                                vehicleWeaponName(\n                                                                  details.vehicleWeaponSelection,\n                                                                  vehicleWeaponId\n                                                                ),\n                                                              ]),\n                                                          ...(!details ||\n                                                          !details.cortexSelections ||\n                                                          !cortexName(\n                                                            details.cortexSelections,\n                                                            cortexIds\n                                                          )\n                                                            ? []\n                                                            : [\n                                                                cortexName(\n                                                                  details.cortexSelections,\n                                                                  cortexIds\n                                                                ),\n                                                              ]),\n                                                          ...(!details ||\n                                                          !details.warjackWeaponSelections ||\n                                                          !warjackWeaponIds ||\n                                                          warjackWeaponIds.length ===\n                                                            0\n                                                            ? []\n                                                            : warjackWeaponNamesSubtitle(\n                                                                details.warjackWeaponSelections,\n                                                                warjackWeaponIds\n                                                              )),\n                                                        ].join(\", \")}\n                                                      </span>\n                                                    </div>\n                                                  </>\n                                                }\n                                              />\n                                              {hidden ? (\n                                                <></>\n                                              ) : !details ? (\n                                                <div\n                                                  style={{\n                                                    margin: \"10px 0\",\n                                                    textAlign: \"center\",\n                                                  }}\n                                                >\n                                                  <SyncOutlined\n                                                    spin\n                                                    style={{ fontSize: \"23px\" }}\n                                                  />\n                                                </div>\n                                              ) : (\n                                                <div className=\"card-content\">\n                                                  {!details.pow ? (\n                                                    <></>\n                                                  ) : (\n                                                    <p>\n                                                      Pow: {details.pow.text}\n                                                    </p>\n                                                  )}\n                                                  {!details.effect ||\n                                                  details.effect.length ===\n                                                    0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    details.effect.map(\n                                                      (effect, index) => (\n                                                        <p\n                                                          key={`effect_${index}`}\n                                                        >\n                                                          {effect}\n                                                        </p>\n                                                      )\n                                                    )\n                                                  )}\n                                                  {!details.squadSize ? (\n                                                    <></>\n                                                  ) : (\n                                                    <dl>\n                                                      <dt>Squad Size</dt>\n                                                      <dd>\n                                                        {details.squadSize}\n                                                      </dd>\n                                                    </dl>\n                                                  )}\n                                                  {!details.deploymentCost ? (\n                                                    <></>\n                                                  ) : (\n                                                    <dl>\n                                                      <dt>DC</dt>\n                                                      <dd>\n                                                        {details.deploymentCost}\n                                                      </dd>\n                                                    </dl>\n                                                  )}\n                                                  {!details.baseSize ? (\n                                                    <></>\n                                                  ) : (\n                                                    <dl>\n                                                      <dt>Base Size</dt>\n                                                      <dd>\n                                                        {details.baseSize}\n                                                      </dd>\n                                                    </dl>\n                                                  )}\n                                                  {!details.health ? (\n                                                    <></>\n                                                  ) : (\n                                                    <dl>\n                                                      <dt>Health</dt>\n                                                      <dd>{details.health}</dd>\n                                                    </dl>\n                                                  )}\n                                                  {!details.wildCardFactions ||\n                                                  Object.values(\n                                                    details.wildCardFactions\n                                                  ).length === 0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>Wild Card Factions</p>\n                                                      <ul>\n                                                        {Object.values(\n                                                          details.wildCardFactions\n                                                        ).map(\n                                                          ({ text }, index) => (\n                                                            <li\n                                                              key={`wild_card_faction_${index}`}\n                                                            >\n                                                              {text}\n                                                            </li>\n                                                          )\n                                                        )}\n                                                      </ul>\n                                                    </>\n                                                  )}\n                                                  {!details.hardpoints ? (\n                                                    <></>\n                                                  ) : (\n                                                    <dl>\n                                                      <dt>Hardpoints</dt>\n                                                      <dd>\n                                                        {details.hardpoints}\n                                                      </dd>\n                                                    </dl>\n                                                  )}\n                                                  {!details.weaponPoints ? (\n                                                    <></>\n                                                  ) : (\n                                                    <dl>\n                                                      <dt>Weapon Points</dt>\n                                                      <dd>\n                                                        {details.weaponPoints}\n                                                      </dd>\n                                                    </dl>\n                                                  )}\n                                                  {!details.modelStats ||\n                                                  Object.keys(\n                                                    details.modelStats\n                                                  ).length === 0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    <table>\n                                                      <thead>\n                                                        <tr>\n                                                          {Object.keys(\n                                                            details.modelStats\n                                                          ).map(\n                                                            (name, index) => (\n                                                              <th\n                                                                key={`${name}_stat_${index}`}\n                                                              >\n                                                                {name}\n                                                              </th>\n                                                            )\n                                                          )}\n                                                        </tr>\n                                                      </thead>\n                                                      <tbody>\n                                                        <tr>\n                                                          {Object.entries(\n                                                            details.modelStats\n                                                          ).map(\n                                                            (\n                                                              [name, stat],\n                                                              index\n                                                            ) => (\n                                                              <td\n                                                                key={`${name}_stat_value_${index}`}\n                                                              >\n                                                                {stat}\n                                                              </td>\n                                                            )\n                                                          )}\n                                                        </tr>\n                                                      </tbody>\n                                                    </table>\n                                                  )}\n                                                  {!details.specialRules ||\n                                                  Object.entries(\n                                                    details.specialRules\n                                                  ).length === 0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>Special Rules</p>\n                                                      <dl>\n                                                        {Object.entries(\n                                                          details.specialRules\n                                                        ).map(\n                                                          (\n                                                            [name, text],\n                                                            index\n                                                          ) => (\n                                                            <React.Fragment\n                                                              key={`special_rules_${index}`}\n                                                            >\n                                                              <dt>{name}</dt>\n                                                              <dd>{text}</dd>\n                                                            </React.Fragment>\n                                                          )\n                                                        )}\n                                                      </dl>\n                                                    </>\n                                                  )}\n                                                  {!details.weapons ||\n                                                  details.weapons.length ===\n                                                    0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>Weapons</p>\n                                                      <table>\n                                                        <thead>\n                                                          <tr>\n                                                            <th>Name</th>\n                                                            <th>Attack Type</th>\n                                                            <th>Damage Type</th>\n                                                            <th>Range</th>\n                                                            <th>POW</th>\n                                                          </tr>\n                                                        </thead>\n                                                        <tbody>\n                                                          {details.weapons.map(\n                                                            (weapon, index) => (\n                                                              <React.Fragment\n                                                                key={`weapon_number_${index}`}\n                                                              >\n                                                                <tr>\n                                                                  <td>\n                                                                    {\n                                                                      weapon[\n                                                                        \"Name\"\n                                                                      ]\n                                                                    }\n                                                                  </td>\n                                                                  <td>\n                                                                    {\n                                                                      weapon[\n                                                                        \"Attack Type\"\n                                                                      ]\n                                                                    }\n                                                                  </td>\n                                                                  <td>\n                                                                    {\n                                                                      weapon[\n                                                                        \"Damage Type\"\n                                                                      ]\n                                                                    }\n                                                                  </td>\n                                                                  <td>\n                                                                    {\n                                                                      weapon[\n                                                                        \"Range\"\n                                                                      ]\n                                                                    }\n                                                                  </td>\n                                                                  <td>\n                                                                    {\n                                                                      weapon[\n                                                                        \"POW\"\n                                                                      ]\n                                                                    }\n                                                                  </td>\n                                                                </tr>\n                                                                {!weapon.specialRules ? (\n                                                                  <></>\n                                                                ) : (\n                                                                  Object.entries(\n                                                                    weapon.specialRules\n                                                                  ).map(\n                                                                    (\n                                                                      [\n                                                                        rule,\n                                                                        text,\n                                                                      ],\n                                                                      ruleIndex\n                                                                    ) => (\n                                                                      <tr\n                                                                        key={`weapon_number_${index}_rule_${ruleIndex}`}\n                                                                      >\n                                                                        <td colSpan=\"5\">\n                                                                          <dl>\n                                                                            <dt>\n                                                                              {\n                                                                                rule\n                                                                              }\n                                                                            </dt>\n                                                                            <dd>\n                                                                              {\n                                                                                text\n                                                                              }\n                                                                            </dd>\n                                                                          </dl>\n                                                                        </td>\n                                                                      </tr>\n                                                                    )\n                                                                  )\n                                                                )}\n                                                              </React.Fragment>\n                                                            )\n                                                          )}\n                                                        </tbody>\n                                                      </table>\n                                                    </>\n                                                  )}\n                                                  {!details.advantages ||\n                                                  Object.entries(\n                                                    details.advantages\n                                                  ).length === 0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>Advantages</p>\n                                                      <dl>\n                                                        {Object.entries(\n                                                          details.advantages\n                                                        ).map(\n                                                          (\n                                                            [name, text],\n                                                            index\n                                                          ) => (\n                                                            <React.Fragment\n                                                              key={`advantage_${index}`}\n                                                            >\n                                                              <dt>{name}</dt>\n                                                              <dd>{text}</dd>\n                                                            </React.Fragment>\n                                                          )\n                                                        )}\n                                                      </dl>\n                                                    </>\n                                                  )}\n                                                  {!details.maneuvers ||\n                                                  Object.values(\n                                                    details.maneuvers\n                                                  ).length === 0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>Maneuvers</p>\n                                                      <dl>\n                                                        {Object.entries(\n                                                          details.maneuvers\n                                                        ).map(\n                                                          (\n                                                            [name, text],\n                                                            index\n                                                          ) => (\n                                                            <React.Fragment\n                                                              key={`advantage_${index}`}\n                                                            >\n                                                              <dt>{name}</dt>\n                                                              <dd>{text}</dd>\n                                                            </React.Fragment>\n                                                          )\n                                                        )}\n                                                      </dl>\n                                                    </>\n                                                  )}\n\n                                                  {!details.vehicleWeaponSelection ||\n                                                  details.vehicleWeaponSelection\n                                                    .length === 0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>\n                                                        Vehicle Weapon\n                                                        Selections\n                                                      </p>\n                                                      <Select\n                                                        defaultValue={\n                                                          <span\n                                                            style={{\n                                                              color: \"gray\",\n                                                              fontStyle:\n                                                                \"italic\",\n                                                            }}\n                                                          >\n                                                            Vehicle Weapon\n                                                          </span>\n                                                        }\n                                                        onClick={(event) =>\n                                                          event.stopPropagation()\n                                                        }\n                                                        onSelect={setCardVehicleWeapon(\n                                                          listIndex,\n                                                          cardIndex,\n                                                          pageId\n                                                        )}\n                                                        value={\n                                                          !vehicleWeaponId\n                                                            ? undefined\n                                                            : vehicleWeaponName(\n                                                                details.vehicleWeaponSelection,\n                                                                vehicleWeaponId\n                                                              )\n                                                        }\n                                                      >\n                                                        {details.vehicleWeaponSelection.map(\n                                                          (\n                                                            {\n                                                              text,\n                                                              page,\n                                                              pageId,\n                                                            },\n                                                            index\n                                                          ) => (\n                                                            <Select.Option\n                                                              key={`vehicle_weapon_${index}`}\n                                                              label={pageId}\n                                                              value={text}\n                                                              onClick={(\n                                                                event\n                                                              ) =>\n                                                                event.stopPropagation()\n                                                              }\n                                                            >\n                                                              <h3>{text}</h3>\n                                                              <div>\n                                                                {!vehicleWeapons[\n                                                                  page.split(\n                                                                    \"#\"\n                                                                  )[0]\n                                                                ] ? (\n                                                                  \"Weapon details missing!\"\n                                                                ) : (\n                                                                  <>\n                                                                    <div>\n                                                                      Location:{\" \"}\n                                                                      {\n                                                                        vehicleWeapons[\n                                                                          page.split(\n                                                                            \"#\"\n                                                                          )[0]\n                                                                        ]\n                                                                          .location\n                                                                      }\n                                                                    </div>\n                                                                    {!vehicleWeapons[\n                                                                      page.split(\n                                                                        \"#\"\n                                                                      )[0]\n                                                                    ]\n                                                                      .specialRules ? (\n                                                                      \"\"\n                                                                    ) : (\n                                                                      <dl>\n                                                                        {Object.entries(\n                                                                          vehicleWeapons[\n                                                                            page.split(\n                                                                              \"#\"\n                                                                            )[0]\n                                                                          ]\n                                                                            .specialRules\n                                                                        ).map(\n                                                                          (\n                                                                            [\n                                                                              name,\n                                                                              rule,\n                                                                            ],\n                                                                            index\n                                                                          ) => (\n                                                                            <React.Fragment\n                                                                              key={`special_rules_${page}_${index}`}\n                                                                            >\n                                                                              <dt>\n                                                                                {\n                                                                                  name\n                                                                                }\n                                                                              </dt>\n                                                                              <dd>\n                                                                                {\n                                                                                  rule\n                                                                                }\n                                                                              </dd>\n                                                                            </React.Fragment>\n                                                                          )\n                                                                        )}\n                                                                      </dl>\n                                                                    )}\n                                                                    {!vehicleWeapons[\n                                                                      page.split(\n                                                                        \"#\"\n                                                                      )[0]\n                                                                    ]\n                                                                      .weapons ? (\n                                                                      \"\"\n                                                                    ) : (\n                                                                      <table>\n                                                                        <thead>\n                                                                          <tr>\n                                                                            <th>\n                                                                              Name\n                                                                            </th>\n                                                                            <th>\n                                                                              Attack\n                                                                              Type\n                                                                            </th>\n                                                                            <th>\n                                                                              Damage\n                                                                              Type\n                                                                            </th>\n                                                                            <th>\n                                                                              Range\n                                                                            </th>\n                                                                            <th>\n                                                                              POW\n                                                                            </th>\n                                                                          </tr>\n                                                                        </thead>\n                                                                        <tbody>\n                                                                          {vehicleWeapons[\n                                                                            page.split(\n                                                                              \"#\"\n                                                                            )[0]\n                                                                          ].weapons.map(\n                                                                            (\n                                                                              weapon,\n                                                                              index\n                                                                            ) => (\n                                                                              <React.Fragment\n                                                                                key={`vehicle_weapons_weapon_${page}_${index}`}\n                                                                              >\n                                                                                <tr>\n                                                                                  <td>\n                                                                                    {\n                                                                                      weapon[\n                                                                                        \"Name\"\n                                                                                      ]\n                                                                                    }\n                                                                                  </td>\n                                                                                  <td>\n                                                                                    {\n                                                                                      weapon[\n                                                                                        \"Attack Type\"\n                                                                                      ]\n                                                                                    }\n                                                                                  </td>\n                                                                                  <td>\n                                                                                    {weapon[\n                                                                                      \"Damage Type\"\n                                                                                    ]\n                                                                                      .join\n                                                                                      ? weapon[\n                                                                                          \"Damage Type\"\n                                                                                        ].join(\n                                                                                          \" \"\n                                                                                        )\n                                                                                      : weapon[\n                                                                                          \"Damage Type\"\n                                                                                        ]}\n                                                                                  </td>\n                                                                                  <td>\n                                                                                    {\n                                                                                      weapon[\n                                                                                        \"Range\"\n                                                                                      ]\n                                                                                    }\n                                                                                  </td>\n                                                                                  <td>\n                                                                                    {\n                                                                                      weapon[\n                                                                                        \"POW\"\n                                                                                      ]\n                                                                                    }\n                                                                                  </td>\n                                                                                </tr>\n                                                                                {!weapon.specialRules ? (\n                                                                                  <>\n\n                                                                                  </>\n                                                                                ) : (\n                                                                                  <tr>\n                                                                                    <td colSpan=\"5\">\n                                                                                      <dl>\n                                                                                        {Object.entries(\n                                                                                          weapon.specialRules\n                                                                                        ).map(\n                                                                                          (\n                                                                                            [\n                                                                                              name,\n                                                                                              rule,\n                                                                                            ],\n                                                                                            index\n                                                                                          ) => (\n                                                                                            <React.Fragment\n                                                                                              key={`vehicle_weapons_weapon_${weapon[\"Name\"]}_special_rules_${page}_${index}`}\n                                                                                            >\n                                                                                              {\n                                                                                                <>\n                                                                                                  <dt>\n                                                                                                    {\n                                                                                                      name\n                                                                                                    }\n                                                                                                  </dt>\n                                                                                                  <dd>\n                                                                                                    {\n                                                                                                      rule\n                                                                                                    }\n                                                                                                  </dd>\n                                                                                                </>\n                                                                                              }\n                                                                                            </React.Fragment>\n                                                                                          )\n                                                                                        )}\n                                                                                      </dl>\n                                                                                    </td>\n                                                                                  </tr>\n                                                                                )}\n                                                                              </React.Fragment>\n                                                                            )\n                                                                          )}\n                                                                        </tbody>\n                                                                      </table>\n                                                                    )}\n                                                                  </>\n                                                                )}\n                                                              </div>\n                                                            </Select.Option>\n                                                          )\n                                                        )}\n                                                      </Select>\n                                                    </>\n                                                  )}\n\n                                                  {!details.vehicleWeaponSelection ||\n                                                  Object.values(\n                                                    details.vehicleWeaponSelection\n                                                  ).length === 0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>\n                                                        Vehicle Weapon Selection\n                                                      </p>\n                                                      <ol>\n                                                        {Object.values(\n                                                          details.vehicleWeaponSelection\n                                                        ).map(\n                                                          (\n                                                            { text, page },\n                                                            index\n                                                          ) => (\n                                                            <li\n                                                              key={`weapon_selection_${index}`}\n                                                            >\n                                                              <a href={page}>\n                                                                {text}\n                                                              </a>\n                                                            </li>\n                                                          )\n                                                        )}\n                                                      </ol>\n                                                    </>\n                                                  )}\n                                                  {!details.cortexes ||\n                                                  Object.entries(\n                                                    details.cortexes\n                                                  ).length === 0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>Cortex</p>\n                                                      <ol>\n                                                        {Object.entries(\n                                                          details.cortexes\n                                                        ).map(\n                                                          (\n                                                            [\n                                                              cortex,\n                                                              advantages,\n                                                            ],\n                                                            index\n                                                          ) => (\n                                                            <li\n                                                              key={`cortex_${index}`}\n                                                            >\n                                                              {cortex}\n                                                              <dl>\n                                                                {Object.entries(\n                                                                  advantages\n                                                                ).map(\n                                                                  (\n                                                                    [\n                                                                      name,\n                                                                      text,\n                                                                    ],\n                                                                    advantageIndex\n                                                                  ) => (\n                                                                    <React.Fragment\n                                                                      key={`cortex_${index}_advantage_${advantageIndex}`}\n                                                                    >\n                                                                      <dt>\n                                                                        {name}\n                                                                      </dt>\n                                                                      <dd>\n                                                                        {text}\n                                                                      </dd>\n                                                                    </React.Fragment>\n                                                                  )\n                                                                )}\n                                                              </dl>\n                                                            </li>\n                                                          )\n                                                        )}\n                                                      </ol>\n                                                    </>\n                                                  )}\n                                                  {!details.cortexSelections ||\n                                                  Object.entries(\n                                                    details.cortexSelections\n                                                  ).length === 0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>Cortex Selections</p>\n                                                      <Select\n                                                        defaultValue={\n                                                          <span\n                                                            style={{\n                                                              color: \"gray\",\n                                                              fontStyle:\n                                                                \"italic\",\n                                                            }}\n                                                          >\n                                                            Cortex\n                                                          </span>\n                                                        }\n                                                        onClick={(event) =>\n                                                          event.stopPropagation()\n                                                        }\n                                                        onSelect={setCardCortex(\n                                                          listIndex,\n                                                          cardIndex,\n                                                          pageId\n                                                        )}\n                                                        value={\n                                                          !cortexIds\n                                                            ? undefined\n                                                            : cortexName(\n                                                                details.cortexSelections,\n                                                                cortexIds\n                                                              )\n                                                        }\n                                                      >\n                                                        {Object.entries(\n                                                          details.cortexSelections\n                                                        ).map(\n                                                          (\n                                                            [\n                                                              cortex,\n                                                              advantages,\n                                                            ],\n                                                            index\n                                                          ) => (\n                                                            <Select.Option\n                                                              key={`cortex_${index}`}\n                                                              label={Object.values(\n                                                                advantages\n                                                              ).map(\n                                                                ({\n                                                                  categoryId,\n                                                                }) => categoryId\n                                                              )}\n                                                              value={cortex}\n                                                              onClick={(\n                                                                event\n                                                              ) =>\n                                                                event.stopPropagation()\n                                                              }\n                                                            >\n                                                              {cortex}\n                                                              <dl>\n                                                                {Object.entries(\n                                                                  advantages\n                                                                ).map(\n                                                                  (\n                                                                    [\n                                                                      name,\n                                                                      { text },\n                                                                    ],\n                                                                    advantageIndex\n                                                                  ) => (\n                                                                    <React.Fragment\n                                                                      key={`cortex_${index}_advantage_${advantageIndex}`}\n                                                                    >\n                                                                      <dt>\n                                                                        {name}\n                                                                      </dt>\n                                                                      <dd>\n                                                                        {text}\n                                                                      </dd>\n                                                                    </React.Fragment>\n                                                                  )\n                                                                )}\n                                                              </dl>\n                                                            </Select.Option>\n                                                          )\n                                                        )}\n                                                      </Select>\n                                                    </>\n                                                  )}\n                                                  {!details.chassisSpecialRules ||\n                                                  Object.entries(\n                                                    details.chassisSpecialRules\n                                                  ).length === 0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>\n                                                        Chassis Special Rules\n                                                      </p>\n                                                      <dl>\n                                                        {Object.entries(\n                                                          details.chassisSpecialRules\n                                                        ).map(\n                                                          (\n                                                            [name, text],\n                                                            index\n                                                          ) => (\n                                                            <React.Fragment\n                                                              key={`advantage_${index}`}\n                                                            >\n                                                              <dt>{name}</dt>\n                                                              <dd>{text}</dd>\n                                                            </React.Fragment>\n                                                          )\n                                                        )}\n                                                      </dl>\n                                                    </>\n                                                  )}\n                                                  {!details.hardpointNames ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>\n                                                        Warjack Weapon\n                                                        Selections\n                                                      </p>\n                                                      {details.hardpointNames.map(\n                                                        (\n                                                          hardpointName,\n                                                          hardpointNameIndex\n                                                        ) =>\n                                                          !details.warjackWeaponSelections ||\n                                                          Object.keys(\n                                                            details.warjackWeaponSelections\n                                                          ).length === 0 ? (\n                                                            <></>\n                                                          ) : (\n                                                            <div\n                                                              key={`warjack_weapon_${hardpointNameIndex}`}\n                                                            >\n                                                              <Select\n                                                                defaultValue={\n                                                                  <span\n                                                                    style={{\n                                                                      color:\n                                                                        \"gray\",\n                                                                      fontStyle:\n                                                                        \"italic\",\n                                                                    }}\n                                                                  >\n                                                                    {\n                                                                      hardpointName\n                                                                    }\n                                                                  </span>\n                                                                }\n                                                                onClick={(\n                                                                  event\n                                                                ) =>\n                                                                  event.stopPropagation()\n                                                                }\n                                                                onSelect={setCardWarjackWeapons(\n                                                                  listIndex,\n                                                                  cardIndex,\n                                                                  hardpointNameIndex,\n                                                                  pageId\n                                                                )}\n                                                                value={\n                                                                  !warjackWeaponIds ||\n                                                                  !warjackWeaponIds[\n                                                                    hardpointNameIndex\n                                                                  ]\n                                                                    ? undefined\n                                                                    : warjackWeaponNames(\n                                                                        details.warjackWeaponSelections,\n                                                                        warjackWeaponIds[\n                                                                          hardpointNameIndex\n                                                                        ]\n                                                                      )\n                                                                }\n                                                              >\n                                                                {Object.values(\n                                                                  details.warjackWeaponSelections\n                                                                )\n                                                                  .filter(\n                                                                    ({\n                                                                      location,\n                                                                    }) =>\n                                                                      location ===\n                                                                      hardpointName\n                                                                  )\n                                                                  .map(\n                                                                    (\n                                                                      {\n                                                                        name,\n                                                                        page,\n                                                                        pageId,\n                                                                        cost,\n                                                                        location,\n                                                                      },\n                                                                      index\n                                                                    ) => (\n                                                                      <Select.Option\n                                                                        key={`warjack_weapon_${hardpointNameIndex}_${index}`}\n                                                                        label={\n                                                                          pageId\n                                                                        }\n                                                                        value={\n                                                                          name\n                                                                        }\n                                                                        onClick={(\n                                                                          event\n                                                                        ) =>\n                                                                          event.stopPropagation()\n                                                                        }\n                                                                      >\n                                                                        <h3>\n                                                                          {warjackWeaponName(\n                                                                            name,\n                                                                            cost\n                                                                          )}\n                                                                        </h3>\n                                                                        <div>\n                                                                          {!warjackWeapons[\n                                                                            page.split(\n                                                                              \"#\"\n                                                                            )[0]\n                                                                          ] ? (\n                                                                            \"Weapon details missing!\"\n                                                                          ) : (\n                                                                            <>\n                                                                              <div>\n                                                                                Location:{\" \"}\n                                                                                {\n                                                                                  warjackWeapons[\n                                                                                    page.split(\n                                                                                      \"#\"\n                                                                                    )[0]\n                                                                                  ]\n                                                                                    .location\n                                                                                }\n                                                                              </div>\n                                                                              {!warjackWeapons[\n                                                                                page.split(\n                                                                                  \"#\"\n                                                                                )[0]\n                                                                              ]\n                                                                                .specialRules ? (\n                                                                                \"\"\n                                                                              ) : (\n                                                                                <dl>\n                                                                                  {Object.entries(\n                                                                                    warjackWeapons[\n                                                                                      page.split(\n                                                                                        \"#\"\n                                                                                      )[0]\n                                                                                    ]\n                                                                                      .specialRules\n                                                                                  ).map(\n                                                                                    (\n                                                                                      [\n                                                                                        name,\n                                                                                        rule,\n                                                                                      ],\n                                                                                      index\n                                                                                    ) => (\n                                                                                      <React.Fragment\n                                                                                        key={`special_rules_${page}_${index}`}\n                                                                                      >\n                                                                                        <dt>\n                                                                                          {\n                                                                                            name\n                                                                                          }\n                                                                                        </dt>\n                                                                                        <dd>\n                                                                                          {\n                                                                                            rule\n                                                                                          }\n                                                                                        </dd>\n                                                                                      </React.Fragment>\n                                                                                    )\n                                                                                  )}\n                                                                                </dl>\n                                                                              )}\n                                                                              {!warjackWeapons[\n                                                                                page.split(\n                                                                                  \"#\"\n                                                                                )[0]\n                                                                              ]\n                                                                                .weapons ? (\n                                                                                \"\"\n                                                                              ) : (\n                                                                                <table>\n                                                                                  <thead>\n                                                                                    <tr>\n                                                                                      <th>\n                                                                                        Name\n                                                                                      </th>\n                                                                                      <th>\n                                                                                        Attack\n                                                                                        Type\n                                                                                      </th>\n                                                                                      <th>\n                                                                                        Damage\n                                                                                        Type\n                                                                                      </th>\n                                                                                      <th>\n                                                                                        Range\n                                                                                      </th>\n                                                                                      <th>\n                                                                                        POW\n                                                                                      </th>\n                                                                                    </tr>\n                                                                                  </thead>\n                                                                                  <tbody>\n                                                                                    {warjackWeapons[\n                                                                                      page.split(\n                                                                                        \"#\"\n                                                                                      )[0]\n                                                                                    ].weapons.map(\n                                                                                      (\n                                                                                        weapon,\n                                                                                        index\n                                                                                      ) => (\n                                                                                        <React.Fragment\n                                                                                          key={`warjack_weapons_weapon_${page}_${index}`}\n                                                                                        >\n                                                                                          <tr>\n                                                                                            <td>\n                                                                                              {\n                                                                                                weapon[\n                                                                                                  \"Name\"\n                                                                                                ]\n                                                                                              }\n                                                                                            </td>\n                                                                                            <td>\n                                                                                              {\n                                                                                                weapon[\n                                                                                                  \"Attack Type\"\n                                                                                                ]\n                                                                                              }\n                                                                                            </td>\n                                                                                            <td>\n                                                                                              {weapon[\n                                                                                                \"Damage Type\"\n                                                                                              ]\n                                                                                                .join\n                                                                                                ? weapon[\n                                                                                                    \"Damage Type\"\n                                                                                                  ].join(\n                                                                                                    \" \"\n                                                                                                  )\n                                                                                                : weapon[\n                                                                                                    \"Damage Type\"\n                                                                                                  ]}\n                                                                                            </td>\n                                                                                            <td>\n                                                                                              {\n                                                                                                weapon[\n                                                                                                  \"Range\"\n                                                                                                ]\n                                                                                              }\n                                                                                            </td>\n                                                                                            <td>\n                                                                                              {\n                                                                                                weapon[\n                                                                                                  \"POW\"\n                                                                                                ]\n                                                                                              }\n                                                                                            </td>\n                                                                                          </tr>\n                                                                                          {!weapon.specialRules ? (\n                                                                                            <>\n\n                                                                                            </>\n                                                                                          ) : (\n                                                                                            <tr>\n                                                                                              <td colSpan=\"5\">\n                                                                                                <dl>\n                                                                                                  {Object.entries(\n                                                                                                    weapon.specialRules\n                                                                                                  ).map(\n                                                                                                    (\n                                                                                                      [\n                                                                                                        name,\n                                                                                                        rule,\n                                                                                                      ],\n                                                                                                      index\n                                                                                                    ) => (\n                                                                                                      <React.Fragment\n                                                                                                        key={`warjack_weapons_weapon_${weapon[\"Name\"]}_special_rules_${page}_${index}`}\n                                                                                                      >\n                                                                                                        {\n                                                                                                          <>\n                                                                                                            <dt>\n                                                                                                              {\n                                                                                                                name\n                                                                                                              }\n                                                                                                            </dt>\n                                                                                                            <dd>\n                                                                                                              {\n                                                                                                                rule\n                                                                                                              }\n                                                                                                            </dd>\n                                                                                                          </>\n                                                                                                        }\n                                                                                                      </React.Fragment>\n                                                                                                    )\n                                                                                                  )}\n                                                                                                </dl>\n                                                                                              </td>\n                                                                                            </tr>\n                                                                                          )}\n                                                                                        </React.Fragment>\n                                                                                      )\n                                                                                    )}\n                                                                                  </tbody>\n                                                                                </table>\n                                                                              )}\n                                                                            </>\n                                                                          )}\n                                                                        </div>\n                                                                      </Select.Option>\n                                                                    )\n                                                                  )}\n                                                              </Select>\n                                                            </div>\n                                                          )\n                                                      )}\n                                                    </>\n                                                  )}\n                                                  {!details.weaponDetails ||\n                                                  details.weaponDetails\n                                                    .length === 0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>Weapon Details</p>\n                                                      <table>\n                                                        <thead>\n                                                          <tr>\n                                                            <th>Weapon</th>\n                                                            <th>Location</th>\n                                                            <th>Cost</th>\n                                                            <th>Weapon Pack</th>\n                                                          </tr>\n                                                        </thead>\n                                                        <tbody>\n                                                          {details.weaponDetails.map(\n                                                            (weapon, index) => (\n                                                              <React.Fragment\n                                                                key={`weapon_details_number_${index}`}\n                                                              >\n                                                                <tr>\n                                                                  <td>\n                                                                    {\n                                                                      weapon[\n                                                                        \"Weapon\"\n                                                                      ].text\n                                                                    }\n                                                                  </td>\n                                                                  <td>\n                                                                    {\n                                                                      weapon[\n                                                                        \"Location\"\n                                                                      ].text\n                                                                    }\n                                                                  </td>\n                                                                  <td>\n                                                                    {\n                                                                      weapon[\n                                                                        \"Cost\"\n                                                                      ].text\n                                                                    }\n                                                                  </td>\n                                                                  <td>\n                                                                    {\n                                                                      weapon[\n                                                                        \"Weapon Pack\"\n                                                                      ].text\n                                                                    }\n                                                                  </td>\n                                                                </tr>\n                                                              </React.Fragment>\n                                                            )\n                                                          )}\n                                                        </tbody>\n                                                      </table>\n                                                    </>\n                                                  )}\n                                                  {!details.release ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>Release</p>\n                                                      <p>{details.release}</p>\n                                                    </>\n                                                  )}\n                                                  {!details.lore ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>Lore</p>\n                                                      <p>{details.lore}</p>\n                                                    </>\n                                                  )}\n                                                </div>\n                                              )}\n                                            </Card>\n                                          </div>\n                                        )}\n                                      </Draggable>\n                                    )\n                                  )}\n                                  {provided.placeholder}\n                                </div>\n                              )}\n                            </Droppable>\n\n                            {cards.length > 0 ? (\n                              <div className=\"footer\">\n                                <Badge\n                                  size=\"small\"\n                                  key=\"_badge\"\n                                  count={cards.length}\n                                  offset={[10, 5]}\n                                >\n                                  Card:\n                                </Badge>\n                                {Object.entries(\n                                  cards.reduce(\n                                    (acc, card) => ({\n                                      ...acc,\n                                      [card.type]: (acc[card.type] || 0) + 1,\n                                    }),\n                                    {}\n                                  )\n                                )\n                                  .sort()\n                                  .map(([type, count], i) => (\n                                    <Badge\n                                      size=\"small\"\n                                      key={`badge${i}`}\n                                      count={count}\n                                      offset={[10, 5]}\n                                    >\n                                      {type}:\n                                    </Badge>\n                                  ))}\n                              </div>\n                            ) : (\n                              <></>\n                            )}\n                          </div>\n                        </Col>\n                      ))}\n                    </Row>\n                  </Layout>\n                </Content>\n              </>\n            )}\n            <Droppable key={\"trash_footer\"} droppableId={\"trash_footer\"}>\n              {(provided) => (\n                <div ref={provided.innerRef} {...provided.droppableProps}>\n                  {dragging ? (\n                    <>\n                      <div className=\"trash-footer\">\n                        <div\n                          style={{\n                            animation:\n                              \"shake 0.82s cubic-bezier(.36,.07,.19,.97) both\",\n                            color: \"white\",\n                          }}\n                        >\n                          <DeleteOutlined />\n                          <div style={{ display: \"none\" }}>\n                            {provided.placeholder}\n                          </div>\n                        </div>\n                      </div>\n                      <Footer>\n                        <div className=\"copyright-notice\">\n                          Images originating from the Privateer Press website\n                          are © 2001—\n                          <>{new Date().getFullYear()}</> Privateer Press, Inc.\n                          All Rights Reserved. Privateer Press, warcaster and\n                          their logos are trademarks of Privateer Press, Inc.\n                          Images and trademarks used without permission. This\n                          website is unofficial and is not endorsed by Privateer\n                          Press.\n                        </div>\n                      </Footer>\n                    </>\n                  ) : (\n                    <Footer>\n                      <div className=\"bookmark\">\n                        <Layout>\n                          <Row>\n                            <Col\n                              xs={24}\n                              sm={24}\n                              md={18}\n                              lg={18}\n                              xl={16}\n                              xxl={16}\n                            >\n                              <input\n                                value={url}\n                                onChange={setUrl}\n                                onKeyDown={open}\n                                onClick={bookmark}\n                              />\n                            </Col>\n                          </Row>\n                        </Layout>\n                      </div>\n                      <div className=\"copyright-notice\">\n                        Images originating from the Privateer Press website are\n                        © 2001—\n                        <>{new Date().getFullYear()}</> Privateer Press, Inc.\n                        All Rights Reserved. Privateer Press, warcaster and\n                        their logos are trademarks of Privateer Press, Inc.\n                        Images and trademarks used without permission. This\n                        website is unofficial and is not endorsed by Privateer\n                        Press.\n                      </div>\n                    </Footer>\n                  )}\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n          {factionModels.map(([factionName, faction, models, cadreModels]) => (\n            <Drawer\n              key={`drawer_${faction}`}\n              visible={openDrawer === faction}\n              placement=\"right\"\n              onClose={setOpenDrawer}\n              width=\"80%\"\n              mask={false}\n              closeIcon={<MenuUnfoldOutlined />}\n            >\n              <Menu\n                id={`faction_${faction}`}\n                mode=\"inline\"\n                triggerSubMenuAction=\"click\"\n              >\n                <Menu.ItemGroup\n                  title={\n                    <div\n                      onClick={allMenuItemsClicked(\n                        models.map((model) => model.page)\n                      )}\n                    >\n                      {factionName}\n                    </div>\n                  }\n                >\n                  {models.map(({ name, page, type, subtype }) => {\n                    const shortName = name.slice(0, 40);\n\n                    return (\n                      <Menu.Item key={faction + \":\" + page} className={faction}>\n                        <span onClick={menuItemClicked(page)}>\n                          <span className=\"card\">\n                            {shortName.length === name.length ? (\n                              shortName\n                            ) : (\n                              <Tooltip placement=\"top\" title={name}>\n                                {shortName}...\n                              </Tooltip>\n                            )}\n                          </span>\n                          <span className=\"types\">\n                            {subtype ? subtype : \"\"}\n                            {type ? (subtype ? \" \" : \"\") + type : \"\"}\n                          </span>\n                        </span>\n                      </Menu.Item>\n                    );\n                  })}\n                </Menu.ItemGroup>\n                {!cadreModels ? (\n                  <></>\n                ) : (\n                  cadreModels.map(({ cadrePageId, cadreModels }) => (\n                    <Menu.ItemGroup\n                      key={`Cadre:${cadrePageId}`}\n                      title={\n                        <div\n                          onClick={allMenuItemsClicked(\n                            cadreModels.map((model) => model.page)\n                          )}\n                        >\n                          {cadres[cadrePageId]}\n                        </div>\n                      }\n                    >\n                      {cadreModels.map(({ name, page, type, subtype }) => {\n                        const shortName = name.slice(0, 40);\n\n                        return (\n                          <Menu.Item\n                            key={faction + \":\" + page + \":cadre:\" + cadrePageId}\n                            className={faction}\n                          >\n                            <span onClick={menuItemClicked(page)}>\n                              <span className=\"card\">\n                                {shortName.length === name.length ? (\n                                  shortName\n                                ) : (\n                                  <Tooltip placement=\"top\" title={name}>\n                                    {shortName}...\n                                  </Tooltip>\n                                )}\n                              </span>\n                              <span className=\"types\">\n                                {subtype ? subtype : \"\"}\n                                {type ? (subtype ? \" \" : \"\") + type : \"\"}\n                              </span>\n                            </span>\n                          </Menu.Item>\n                        );\n                      })}\n                    </Menu.ItemGroup>\n                  ))\n                )}\n                <Menu.ItemGroup\n                  title={\n                    <div\n                      onClick={allMenuItemsClicked(\n                        (wildCardModels[faction] || []).map(\n                          (model) => model.page\n                        )\n                      )}\n                    >\n                      Wild Cards\n                    </div>\n                  }\n                >\n                  {(wildCardModels[faction] || [])\n                    .sort((w1, w2) => (w1.type < w2.type ? -1 : 1))\n                    .map(({ name, page, type, subtype }, j) => {\n                      const shortName = name.slice(0, 40);\n\n                      return (\n                        <Menu.Item key={faction + \":\" + page}>\n                          <span onClick={menuItemClicked(page)}>\n                            <span className=\"card\">\n                              {shortName.length === name.length ? (\n                                shortName\n                              ) : (\n                                <Tooltip placement=\"top\" title={name}>\n                                  {shortName}...\n                                </Tooltip>\n                              )}\n                            </span>\n                            <span className=\"types\">\n                              {subtype ? subtype : \"\"}\n                              {type ? (subtype ? \" \" : \"\") + type : \"\"}\n                            </span>\n                          </span>\n                        </Menu.Item>\n                      );\n                    })}\n                </Menu.ItemGroup>\n                {Object.entries(\n                  cypherCodecs\n                    .filter(\n                      (cypher) =>\n                        [factionName, \"Universal\"].indexOf(\n                          cypher.Faction.text\n                        ) !== -1\n                    )\n                    .reduce(\n                      (acc, cypher) => ({\n                        ...acc,\n                        [cypher.Faction.text]: [\n                          ...(acc[cypher.Faction.text] || []),\n                          cypher,\n                        ],\n                      }),\n                      {}\n                    )\n                )\n                  .sort(([a], [b]) =>\n                    a === \"Universal\" ? 1 : b === \"Universal\" ? -1 : 1\n                  )\n                  .map(([faction, cyphers]) => (\n                    <Menu.ItemGroup\n                      title={\n                        <div\n                          onClick={allMenuItemsClicked(\n                            cyphers\n                              .sort((c1, c2) =>\n                                c1.Type.text < c2.Type.text ? -1 : 1\n                              )\n                              .map(({ Cypher }) => Cypher.page)\n                          )}\n                        >\n                          {`${faction} Cyphers`}\n                        </div>\n                      }\n                      key={faction}\n                    >\n                      {cyphers\n                        .sort((c1, c2) =>\n                          c1.Type.text < c2.Type.text ? -1 : 1\n                        )\n                        .map(({ Cypher, Type }) => (\n                          <Menu.Item\n                            key={\":\" + Cypher.page}\n                            className={Type.text}\n                          >\n                            <span onClick={menuItemClicked(Cypher.page)}>\n                              <span className=\"card\">{Cypher.text}</span>\n                              <span className=\"types\">{Type.text}</span>\n                            </span>\n                          </Menu.Item>\n                        ))}\n                    </Menu.ItemGroup>\n                  ))}\n              </Menu>\n            </Drawer>\n          ))}\n          <Drawer\n            key=\"drawer_cyphers\"\n            visible={openDrawer === \"cypher_codecs\"}\n            placement=\"right\"\n            onClose={setOpenDrawer}\n            width=\"80%\"\n            mask={false}\n            closeIcon={<MenuUnfoldOutlined />}\n          >\n            <Menu\n              id={`faction_cyphers`}\n              mode=\"inline\"\n              triggerSubMenuAction=\"click\"\n            >\n              {Object.entries(\n                cypherCodecs.reduce(\n                  (acc, cypher) => ({\n                    ...acc,\n                    [cypher.Faction.text]: [\n                      ...(acc[cypher.Faction.text] || []),\n                      cypher,\n                    ],\n                  }),\n                  {}\n                )\n              )\n                .sort()\n                .map(([faction, cyphers]) => (\n                  <Menu.ItemGroup title={`${faction} Cyphers`} key={faction}>\n                    {cyphers\n                      .sort((c1, c2) => (c1.Type.text < c2.Type.text ? -1 : 1))\n                      .map(({ Cypher, Type }) => (\n                        <Menu.Item\n                          key={\":\" + Cypher.page}\n                          className={Type.text}\n                        >\n                          <span onClick={menuItemClicked(Cypher.page)}>\n                            <span className=\"card\">{Cypher.text}</span>\n                            <span className=\"types\">{Type.text}</span>\n                          </span>\n                        </Menu.Item>\n                      ))}\n                  </Menu.ItemGroup>\n                ))}\n            </Menu>\n          </Drawer>\n        </Layout>\n      </Layout>\n    </div>\n  );\n}\n\nconst App = connect(\n  (state) => ({\n    initialized: AppSync.selectDone()(state),\n    syncReasons: AppSync.selectReasons()(state),\n    factionModels: Object.entries(FactionModels.select()(state))\n      .sort()\n      .map(([faction, models]) => [\n        Factions.select()(state)[faction].text,\n        faction,\n        models\n          .map((model) => ({\n            name: model.Name.text,\n            page: model.Name.page,\n            type: model.Type.text,\n            ...(model.Subtype\n              ? { subtype: model.Subtype.map((_) => _.text).join(\" \") }\n              : {}),\n          }))\n          .filter(\n            (model) =>\n              !Object.values(CadreModels.select()(state))\n                .flatMap((models) =>\n                  models.map((cadreModel) => cadreModel.title)\n                )\n                .includes(model.name)\n          ),\n        Object.entries(CadreModels.select()(state)).flatMap(\n          ([cadrePageId, cadreModels]) => {\n            const cadre = cadreModels.map((model) => model.title);\n            const allCadreModels = models\n              .filter((model) => cadre.includes(model.Name.text))\n              .map((model) => ({\n                name: model.Name.text,\n                page: model.Name.page,\n                type: model.Type.text,\n                ...(model.Subtype\n                  ? { subtype: model.Subtype.map((_) => _.text).join(\" \") }\n                  : {}),\n              }));\n\n            if (allCadreModels.length === cadreModels.length)\n              return [{ cadrePageId, cadreModels: allCadreModels }];\n\n            return [];\n          }\n        ),\n      ]),\n    wildCardModels: Object.fromEntries(\n      Object.entries(WildCardModels.select()(state))\n        .sort()\n        .map(([faction, models]) => [\n          faction,\n          models.map((model) => ({\n            name: model.Name.text,\n            page: model.Name.page,\n            type: model.Type.text,\n            ...(model.Subtype\n              ? { subtype: model.Subtype.map((_) => _.text).join(\" \") }\n              : {}),\n          })),\n        ])\n    ),\n    cypherCodecs: CypherCodecs.select()(state),\n    lists: Lists.select()(state).map(({ title, cards }) => ({\n      title,\n      cards: cards.flatMap(\n        ({ pageId, cortexIds, warjackWeaponIds, vehicleWeaponId, hidden }) => {\n          const pageIdByPage = PageIds.select()(state);\n\n          const page =\n            Object.entries(pageIdByPage)\n              .filter(([_, id]) => id === pageId)\n              .map(([page, _]) => page)[0] || \"\";\n\n          const model = Object.entries(FactionModels.select()(state))\n            .flatMap(([faction, models]) =>\n              models.map((model) => ({ ...model, faction }))\n            )\n            .find(({ Name }) => Name.page === page);\n          const wildCard = Object.entries(WildCardModels.select()(state))\n            .flatMap(([faction, models]) =>\n              models.map((model) => ({ ...model, faction }))\n            )\n            .find(({ Name }) => Name.page === page);\n          const cypher = CypherCodecs.select()(state).find(\n            ({ Cypher }) => Cypher.page === page\n          );\n\n          if (model) {\n            const details = Models.selectByPage(page)(state);\n            return [\n              {\n                card: \"model\",\n                hidden,\n                type: model.Type.text,\n                title: model.Name.text,\n                page: model.Name.page,\n                pageId,\n                cortexIds,\n                warjackWeaponIds,\n                vehicleWeaponId,\n                faction: model.faction,\n                ...(model.Subtype\n                  ? { subtype: model.Subtype.map((_) => _.text).join(\" \") }\n                  : {}),\n                ...(!details\n                  ? {}\n                  : {\n                      details: {\n                        ...details,\n                        ...(!details.hardpoints\n                          ? {}\n                          : {\n                              hardpointNames: parseHardpoints(\n                                details.hardpoints\n                              ),\n                            }),\n                        ...(!details.cortexSelections\n                          ? {}\n                          : {\n                              cortexSelections: Object.fromEntries(\n                                Object.entries(details.cortexSelections).map(\n                                  ([cortex, advantages]) => [\n                                    cortex,\n                                    Object.fromEntries(\n                                      Object.entries(advantages).map(\n                                        ([advantage, { text, category }]) => [\n                                          advantage,\n                                          {\n                                            text,\n                                            categoryId: pageIdByPage[category],\n                                          },\n                                        ]\n                                      )\n                                    ),\n                                  ]\n                                )\n                              ),\n                            }),\n                        ...(!details.warjackWeaponSelections\n                          ? {}\n                          : {\n                              warjackWeaponSelections: Object.fromEntries(\n                                Object.entries(\n                                  details.warjackWeaponSelections\n                                ).map(([page, selection]) => [\n                                  page,\n                                  { ...selection, pageId: pageIdByPage[page] },\n                                ])\n                              ),\n                            }),\n                        ...(!details.vehicleWeaponSelection\n                          ? {}\n                          : {\n                              vehicleWeaponSelection:\n                                details.vehicleWeaponSelection.map(\n                                  ({ text, page }) => ({\n                                    text,\n                                    page,\n                                    pageId: pageIdByPage[page],\n                                  })\n                                ),\n                            }),\n                      },\n                    }),\n              },\n            ];\n          }\n\n          if (wildCard) {\n            const details = Models.selectByPage(page)(state);\n            return [\n              {\n                card: \"model\",\n                hidden,\n                type: wildCard.Type.text,\n                title: wildCard.Name.text,\n                page: wildCard.Name.page,\n                pageId,\n                faction: \"Wild_Card\",\n                ...(wildCard.Subtype\n                  ? { subtype: wildCard.Subtype.map((_) => _.text).join(\" \") }\n                  : {}),\n                details,\n              },\n            ];\n          }\n\n          if (cypher) {\n            const details = Cyphers.selectByPage(page)(state);\n            return [\n              {\n                card: \"cypher\",\n                hidden,\n                type: cypher.Type.text,\n                title: cypher.Cypher.text,\n                page: cypher.Cypher.page,\n                pageId,\n                ...(cypher.Faction.text === \"Universal\"\n                  ? { faction: \"Universal\" }\n                  : { faction: cypher.Faction.page }),\n                details,\n              },\n            ];\n          }\n\n          return [];\n        }\n      ),\n    })),\n    dragging: Dragging.select()(state),\n    url: Url.select()(state),\n    factions: Factions.select()(state),\n    vehicleWeapons: VehicleWeapons.select()(state),\n    warjackWeapons: WarjackWeapons.select()(state),\n    cadres: CadreCategoryMembers.select()(state),\n  }),\n  (dispatch) => ({\n    toggleCard: (listIndex, cardIndex, pageId, card) => {\n      return () =>\n        dispatch(Lists.toggleCard({ listIndex, cardIndex, pageId, card }));\n    },\n    dragStart: (event) => dispatch(CardDragStarted(event)),\n    dragEnd: (event) => dispatch(CardDragEnded(event)),\n    menuItemClicked: (page) => (event) => {\n      dispatch(MenuItemClicked({ page }));\n      event.stopPropagation();\n    },\n    allMenuItemsClicked: (pages) => (event) => {\n      pages.forEach((page) => dispatch(MenuItemClicked({ page })));\n      event.stopPropagation();\n    },\n    removeList: (listIndex) => () => dispatch(Lists.removeList({ listIndex })),\n    addEmptyList: (listIndex) => () =>\n      dispatch(Lists.addEmptyList({ listIndex })),\n    moveListBy: (listIndex, by) => () =>\n      dispatch(Lists.moveListBy({ listIndex, by })),\n    setListTitle: (listIndex) => (event) =>\n      dispatch(Lists.setListTitle({ listIndex, title: event.target.value })),\n    setUrl: (event) => dispatch(Url.set({ url: event.target.value })),\n    bookmark: () => {\n      const bookmark = document.querySelector(\".bookmark input\");\n      if (bookmark) {\n        if (navigator.userAgent.match(/ipad|iphone/i)) {\n          const range = document.createRange();\n          range.selectNodeContents(bookmark);\n\n          const selection = window.getSelection();\n          selection.removeAllRanges();\n          selection.addRange(range);\n          bookmark.setSelectionRange(0, 999999);\n        } else {\n          bookmark.select();\n        }\n      }\n    },\n    open: (event) => {\n      if (event.key === \"Enter\") {\n        const url = document.querySelector(\".bookmark input\").value;\n        if (url) window.open(url, \"_self\");\n      }\n    },\n    setCardCortex:\n      (listIndex, cardIndex, pageId) =>\n      (_, { label }) =>\n        dispatch(\n          Lists.setCardCortex({\n            listIndex,\n            cardIndex,\n            pageId,\n            cortexIds: label,\n          })\n        ),\n    setCardWarjackWeapons:\n      (listIndex, cardIndex, hardpointNameIndex, pageId) =>\n      (_, { label }) =>\n        dispatch(\n          Lists.setCardWarjackWeapons({\n            listIndex,\n            cardIndex,\n            hardpointNameIndex,\n            pageId,\n            warjackWeaponId: label,\n          })\n        ),\n    setCardVehicleWeapon:\n      (listIndex, cardIndex, pageId) =>\n      (_, { label }) =>\n        dispatch(\n          Lists.setCardVehicleWeapon({\n            listIndex,\n            cardIndex,\n            pageId,\n            vehicleWeaponId: label,\n          })\n        ),\n  })\n)(AppPresentation);\n\nexport default App;\n\nfunction generateListNamePlaceholder(cards, factionNames, defaultValue) {\n  const factions = cards.map((card) => card.faction);\n  if (factions.length === 0) return defaultValue;\n\n  const justFactions = factions.filter(\n    (faction) => [\"Universal\", \"Wild_Card\"].indexOf(faction) === -1\n  );\n  if (justFactions.length === 0) {\n    const justCyphers = factions.filter((faction) => faction === \"Universal\");\n    if (justCyphers.length === factions.length) return \"Universal Cyphers\";\n\n    return defaultValue;\n  }\n\n  const factionsPresent = justFactions.reduce(\n    (acc, faction) => ({ ...acc, [faction]: true }),\n    {}\n  );\n  if (Object.keys(factionsPresent).length > 1) return \"Several factions\";\n\n  const factionName = factionNames[Object.keys(factionsPresent)[0]].text;\n  if (factionName) {\n    const types = cards.map((card) => card.type);\n\n    const cyperTypes = [\"Fury\", \"Geometric\", \"Harmonic\", \"Overdrive\"];\n    const noCyphers = types.filter((type) => cyperTypes.indexOf(type) === -1);\n    if (noCyphers.length === types.length) return factionName + \" Models\";\n\n    const justCyphers = types.filter((type) => cyperTypes.indexOf(type) > -1);\n    if (justCyphers.length === types.length) return factionName + \" Cyphers\";\n\n    return factionName;\n  }\n\n  return defaultValue;\n}\n\nfunction cortexName(cortexSelections, cortexIds) {\n  return (Object.entries(cortexSelections).find(\n    ([cortex, advantages]) =>\n      Object.values(advantages)\n        .map((advantage) => advantage.categoryId)\n        .join(\"\") === (cortexIds || []).join(\"\")\n  ) || [undefined])[0];\n}\n\nfunction vehicleWeaponName(vehicleWeaponSelection, vehicleWeaponId) {\n  const vehicleWeapon = vehicleWeaponSelection.find(\n    ({ pageId }) => pageId === vehicleWeaponId\n  );\n  if (!vehicleWeapon) return undefined;\n  return vehicleWeapon.text;\n}\n\nfunction warjackWeaponNames(warjackWeaponSelections, weaponId) {\n  const weapon = Object.values(warjackWeaponSelections).find(\n    ({ pageId }) => pageId === weaponId\n  );\n  if (weapon) {\n    return warjackWeaponName(weapon.name, weapon.cost);\n  }\n  return weaponId;\n}\n\nfunction warjackWeaponNamesSubtitle(warjackWeaponSelections, weaponIds) {\n  return weaponIds.flatMap((weaponId) => {\n    const weapon = Object.values(warjackWeaponSelections).find(\n      ({ pageId }) => pageId === weaponId\n    );\n    if (weapon) {\n      return [weapon.name];\n    }\n    return [];\n  });\n}\n\nfunction warjackWeaponName(name, cost) {\n  return `${name} (cost ${cost})`;\n}\n\nfunction parseHardpoints(hardpoints) {\n  // Parses strings of the following type: \"3 : 2 Arm, 1 Back\"\n\n  const rHardpointCount = \"\\\\s*(\\\\d+)\\\\s*\";\n  const rHardpointGroup = \"\\\\s*(\\\\d+)\\\\s*(\\\\w+)\\\\s*\";\n\n  let results = null;\n  for (let n = 1; n <= 10; n++) {\n    const regexp = new RegExp(\n      `^${rHardpointCount}:${rHardpointGroup}${repeat(\n        `,${rHardpointGroup}`,\n        n - 1\n      )}$`\n    );\n    results = regexp.exec(hardpoints);\n    if (results !== null) {\n      break;\n    }\n  }\n\n  if (results === null) {\n    return undefined;\n  }\n\n  const hardpointCount = parseInt(results[1], 10);\n\n  const hardpointNames = [];\n  for (let n = 2; n < results.length; n += 2) {\n    const groupCount = parseInt(results[n], 10);\n    const groupName = results[n + 1];\n\n    for (let i = 1; i <= groupCount; i++) {\n      hardpointNames.push(groupName);\n    }\n  }\n\n  if (hardpointCount !== hardpointNames.length) {\n    console.error(\n      \"Hardpoints do not add up!\",\n      hardpoints,\n      hardpointCount,\n      hardpointNames\n    );\n  }\n\n  return hardpointNames;\n\n  function repeat(s, n) {\n    if (n === 0) return \"\";\n    return s + repeat(s, n - 1);\n  }\n}\n","import { StateShard } from \"../utils\";\nimport { put } from \"redux-saga/effects\";\n\nconst Requests = StateShard(\n  \"Requests\",\n  init,\n  { cache, expire, fetch, fetched },\n  {\n    parsePage,\n    queryCadreModels,\n    queryCadres,\n    queryRevisions,\n    queryPageIds,\n  },\n  {\n    selectCachedRequestsByPageIds,\n    selectCachedParsedPageIds,\n    selectCachedUrl,\n    selectPending,\n  }\n);\n\nexport { Requests };\n\nfunction init(state) {\n  if (!state.io) {\n    state.io = {};\n  }\n\n  state.io.requests = { cached: {}, pending: [] };\n}\n\n// Actions\n\nfunction cache(state, { url, data, queryParams }) {\n  const cached = selectCached(state);\n\n  cached[url] = { data, queryParams };\n}\n\nfunction expire(state, { url }) {\n  const cached = selectCached(state);\n\n  delete cached[url];\n}\n\nfunction fetch(state, params) {\n  const pending = selectPending(state);\n\n  if (!pending.find((request) => request.url === params.url)) {\n    pending.push(params);\n  }\n}\n\nfunction fetched(state, { url }) {\n  const pending = selectPending(state);\n\n  const index = pending.findIndex((request) => request.url === url);\n  if (index > -1) {\n    pending.splice(index, 1);\n  }\n}\n\n// Action Creators\n\nfunction* parsePage({ page, parserName }) {\n  const queryParams = { action: \"parse\", page };\n\n  yield put(\n    Requests.fetch({\n      desc: \"parsePage\",\n      parserName,\n      queryParams,\n      url: jsonApiRequest(queryParams),\n    })\n  );\n}\n\nfunction* queryCadreModels({ pageId }) {\n  const queryParams = {\n    action: \"query\",\n    list: \"categorymembers\",\n    cmpageid: pageId,\n    cmtype: \"page\",\n    cmlimit: \"max\",\n  };\n\n  yield put(\n    Requests.fetch({\n      desc: \"queryCadreModels\",\n      queryParams,\n      url: jsonApiRequest(queryParams),\n    })\n  );\n}\n\nfunction* queryCadres() {\n  const queryParams = {\n    action: \"query\",\n    list: \"categorymembers\",\n    cmtitle: \"Category:Cadre\",\n    cmtype: \"subcat\",\n    cmlimit: \"max\",\n  };\n\n  yield put(\n    Requests.fetch({\n      desc: \"queryCadres\",\n      queryParams,\n      url: jsonApiRequest(queryParams),\n    })\n  );\n}\n\nfunction* queryRevisions({ pageIds }) {\n  const queryParams = {\n    action: \"query\",\n    prop: \"revisions\",\n    pageids: pageIds.join(\"|\"),\n  };\n\n  yield put(\n    Requests.fetch({\n      desc: \"queryRevisions\",\n      queryParams,\n      url: jsonApiRequest(queryParams),\n    })\n  );\n}\n\nfunction* queryPageIds({ pages }) {\n  const queryParams = {\n    action: \"query\",\n    prop: \"pageprops\",\n    titles: encodeURIComponent(pages.map((_) => _.text).join(\"|\")),\n  };\n\n  yield put(\n    Requests.fetch({\n      desc: \"queryPageIds\",\n      pages,\n      queryParams,\n      url: jsonApiRequest(queryParams),\n    })\n  );\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.io.requests;\n}\n\nfunction selectCached(state) {\n  const requests = select(state);\n  return requests.cached;\n}\n\nfunction selectCachedUrl(state, url) {\n  const cached = selectCached(state);\n  return cached[url];\n}\n\nfunction selectCachedRequestsByPageIds(state, pageIds) {\n  const cached = selectCached(state);\n  return Object.fromEntries(\n    Object.entries(cached).filter(\n      ([key, { data }]) =>\n        data && data.parse && pageIds.includes(data.parse.pageid)\n    )\n  );\n}\n\nfunction selectCachedParsedPageIds(state) {\n  const cached = selectCached(state);\n  return Object.values(cached)\n    .filter(({ data }) => data && data.parse)\n    .map(({ data }) => data.parse.pageid);\n}\n\nfunction selectPending(state) {\n  const requests = select(state);\n  return requests.pending;\n}\n\n// Utils\n\nfunction jsonApiRequest(queryParams) {\n  const jsonFormat = {\n    formatversion: 2,\n    format: \"json\",\n  };\n  const params = { ...queryParams, ...jsonFormat };\n\n  const queryString = Object.entries(params)\n    .map((keyValue) => keyValue.join(\"=\"))\n    .join(\"&\");\n\n  return \"https://privateerpress.wiki/api.php?\" + queryString;\n}\n","import { StateShard } from \"./utils\";\n\nconst ParserNames = StateShard(\n  \"ParserNames\",\n  init,\n  { setForPage },\n  {},\n  { selectByPage }\n);\n\nexport { ParserNames };\n\nfunction init(state) {\n  if (!state.data) {\n    state.data = {};\n  }\n\n  state.data.parserNames = {};\n}\n\n// Actions\n\nfunction setForPage(state, { page, parserName }) {\n  const parserNames = select(state);\n  parserNames[page] = parserName;\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.data.parserNames;\n}\n\nfunction selectByPage(state, page) {\n  const parserNames = select(state);\n  return parserNames[page];\n}\n","import { put, take } from \"redux-saga/effects\";\n\nimport { Requests } from \"../../state/io/Requests\";\nimport { ParserNames } from \"../../state/ParserNames\";\n\nfunction* cacheParserNames() {\n  while (true) {\n    const action = yield take(Requests.fetch().type);\n    const { payload } = action;\n    const { desc, queryParams, parserName } = payload;\n\n    if (desc !== \"parsePage\") {\n      continue;\n    }\n\n    const page = queryParams.page;\n\n    if (!page || !parserName) {\n      console.error(\"Could not cache parser!\", { page, parserName }, action);\n      continue;\n    }\n\n    yield put(ParserNames.setForPage({ page, parserName }));\n  }\n}\n\nexport { cacheParserNames };\n","const jsonp = (url) => {\n  return new Promise(function (resolve, reject) {\n    const callbackName = \"jsonp_callback_\" + Math.round(100000 * Math.random());\n    window[callbackName] = function (data) {\n      delete window[callbackName];\n      document.body.removeChild(script);\n      resolve(data);\n    };\n\n    const script = document.createElement(\"script\");\n    script.src =\n      url + (url.indexOf(\"?\") >= 0 ? \"&\" : \"?\") + \"callback=\" + callbackName;\n    document.body.appendChild(script);\n  });\n};\n\nexport { jsonp };\n","/*\nThese sagas fetch and cache wiki pages.\n\nThe wiki's JSONP API is used to fetch page contents. Since we want to be\npolite, we only call the API every two seconds. This throttle is implemented in\nfetchWikiPage through an actionChannel and a call to delay.\n*/\n\nimport {\n  actionChannel,\n  call,\n  delay,\n  put,\n  select,\n  take,\n} from \"redux-saga/effects\";\nimport { FetchedWikiPage, FetchedWikiPageRevisions } from \"../../../messages\";\nimport { jsonp } from \"../jsonp\";\n\nimport { Requests } from \"../../../state/io/Requests\";\nimport { CadreCategoryMembers } from \"../../../state/CadreCategoryMembers\";\nimport { CadreModels } from \"../../../state/CadreModels\";\nimport { PageIds } from \"../../../state/PageIds\";\n\nfunction* fetchWikiPage() {\n  const wikiPageChannel = yield actionChannel(Requests.fetch().type);\n\n  while (true) {\n    const action = yield take(wikiPageChannel);\n    const { payload } = action;\n    const { desc, parserName, queryParams, url } = payload;\n\n    let request = yield select(Requests.selectCachedUrl(url));\n    let wait = false;\n    if (!request) {\n      const data = yield call(jsonp, url);\n      request = { data, queryParams };\n      wait = true;\n      yield put(Requests.cache({ url, data, queryParams }));\n    }\n    yield put(Requests.fetched({ url }));\n\n    const data = request.data;\n\n    if (desc === \"queryRevisions\") {\n      const pageRevisions = data.query.pages;\n\n      yield put(FetchedWikiPageRevisions({ pageRevisions }));\n    }\n\n    if (desc === \"queryCadres\") {\n      const categorymembers = data.query.categorymembers;\n      if (categorymembers) {\n        const cadreCategoryMembers = Object.fromEntries(\n          categorymembers.map((member) => [\n            member.pageid,\n            member.title.replace(/^Category:/, \"\"),\n          ])\n        );\n\n        yield put(CadreCategoryMembers.set({ cadreCategoryMembers }));\n      }\n    }\n\n    if (desc === \"queryCadreModels\") {\n      const { cmpageid: cadrePageId } = queryParams;\n\n      const categoryMembers = data.query.categorymembers;\n      if (categoryMembers) {\n        const cadreModels = categoryMembers.map(({ pageid, title }) => ({\n          pageId: pageid,\n          title,\n        }));\n\n        yield put(CadreModels.setForCadrePageId({ cadrePageId, cadreModels }));\n      }\n    }\n\n    if (desc === \"parsePage\") {\n      const { page } = queryParams;\n\n      if (!page) {\n        console.error(\"No page to fetch!\", action);\n        continue;\n      }\n\n      yield put(FetchedWikiPage({ page, data: data.parse, parserName }));\n    }\n\n    if (desc === \"queryPageIds\") {\n      const { pages } = payload;\n\n      const titleToPageId = Object.fromEntries(\n        data.query.pages.map(({ title, pageid }) => [title, pageid])\n      );\n\n      const pageIdByTitle = Object.fromEntries(\n        pages.map(({ text, page }) => [page.split(\"#\")[0], titleToPageId[text]])\n      );\n\n      yield put(PageIds.addPages({ pageIdByTitle }));\n    }\n\n    if (wait) {\n      const twoSecondsInMs = 2 * 1000;\n      yield delay(twoSecondsInMs);\n    }\n  }\n}\n\nexport { fetchWikiPage };\n","/*\nThese sagas make sure, cached wiki pages stay up-to-date.\n\nEach app reload triggers a RefreshWikiPages action, that starts the cache\nupdate process. The refreshWikiPages saga bulk loads revision data for all\ncached pages from the wiki API. If a page cannot be found (probably because it\nwas deleted from the wiki), it is removed from the cache. If revision\ninformation is found, it is compared with the cached revision of the page. If\nthe loaded revision is higher, the page is removed and fetched again. If the\ncached revision is higher or equal, the page is not refreshed and remains\ncached.\n*/\n\nimport { FetchedWikiPageRevisions, RefreshWikiPages } from \"../../../messages\";\nimport { all, put, take, select } from \"redux-saga/effects\";\n\nimport { Requests } from \"../../../state/io/Requests\";\nimport { ParserNames } from \"../../../state/ParserNames\";\n\nfunction* updateCache() {\n  yield all([refreshWikiPages(), refreshOutdatedWikiPages()]);\n}\n\nexport { updateCache };\n\nfunction* refreshWikiPages() {\n  yield take(RefreshWikiPages().type);\n  const parsedPageIds = yield select(Requests.selectCachedParsedPageIds());\n\n  const queryLength = 50;\n  for (let i = 0; i < parsedPageIds.length; i += queryLength) {\n    const pageIds = parsedPageIds.slice(i, i + queryLength);\n\n    yield* Requests.queryRevisions({ pageIds });\n  }\n}\n\nfunction* refreshOutdatedWikiPages() {\n  while (true) {\n    const { payload } = yield take(FetchedWikiPageRevisions().type);\n    const { pageRevisions } = payload;\n    const revInfoByPageId = Object.fromEntries(\n      pageRevisions.map((revision) => [\n        revision.pageid,\n        revision.missing\n          ? { missing: revision.missing }\n          : {\n              revid: Math.max(\n                ...revision.revisions.map((revision) => revision.revid)\n              ),\n            },\n      ])\n    );\n    const pageIds = pageRevisions.map((revision) => revision.pageid);\n\n    const requests = yield select(\n      Requests.selectCachedRequestsByPageIds(pageIds)\n    );\n\n    for (const [url, { data, queryParams }] of Object.entries(requests)) {\n      const { page } = queryParams;\n      const { parse } = data;\n\n      const revInfo = revInfoByPageId[parse.pageid];\n      if (revInfo.missing) {\n        yield put(Requests.expire({ url }));\n      } else if (parse.revid < revInfo.revid) {\n        yield put(Requests.expire({ url }));\n        const parserName = yield select(ParserNames.selectByPage(page));\n\n        yield* Requests.parsePage({ page, parserName });\n      }\n    }\n  }\n}\n","function partitionBy(slice, array) {\n  var arrays = [];\n\n  for (var i = 0; i < array.length; i += slice) {\n    arrays[arrays.length] = array.slice(i, i + slice);\n  }\n\n  return arrays;\n}\n\nexport { partitionBy };\n","import { all, put, take, select } from \"redux-saga/effects\";\n\nimport { AppSync } from \"../../../state/AppSync\";\nimport { CypherCodecs } from \"../../../state/CypherCodecs\";\nimport { FactionModels } from \"../../../state/FactionModels\";\nimport { Factions } from \"../../../state/Factions\";\nimport { PageIds } from \"../../../state/PageIds\";\nimport { WildCardModels } from \"../../../state/WildCardModels\";\n\nimport { partitionBy } from \"../partitionBy\";\nimport { Requests } from \"../../../state/io/Requests\";\n\nfunction* fetchPageIds() {\n  const cachedPageIds = yield select(PageIds.select());\n\n  if (Object.keys(cachedPageIds).length === 0) {\n    yield put(\n      AppSync.addReasons({\n        reasons: [\n          {\n            reason: \"Loading factions\",\n            description: \"Load available Warcaster factions\",\n          },\n          {\n            reason: \"Loading cyphers\",\n            description: \"Load available Cypher Codecs\",\n          },\n          {\n            reason: \"Loading wildcard models\",\n            description: \"Load available Wild Cards\",\n          },\n        ],\n      })\n    );\n\n    const [factionsSet] = yield all([\n      take(Factions.set().type),\n      take(CypherCodecs.set().type),\n      take(WildCardModels.set().type),\n    ]);\n\n    const factions = Object.keys(factionsSet.payload.factions);\n\n    yield put(\n      AppSync.addReasons({\n        reasons: factions.map((faction) => ({\n          reason: `Loading ${faction.replace(/_/g, \" \")}`,\n          description: `Used to build ${faction.replace(/_/g, \" \")} menu`,\n        })),\n      })\n    );\n\n    yield all(\n      factions.map((faction) =>\n        take(\n          (action) =>\n            action.type === FactionModels.setForPage().type &&\n            action.payload.page === faction\n        )\n      )\n    );\n\n    const factionModelPages = Object.values(\n      yield select(FactionModels.select())\n    )\n      .flat()\n      .map((_) => _.Name);\n\n    const wildCardPages = Object.values(yield select(WildCardModels.select()))\n      .flat()\n      .map((_) => _.Name)\n      .sort(({ text, page }) => [text, page])\n      .filter(\n        ({ text, page }, index, cards) =>\n          !index ||\n          (text !== cards[index - 1].text && page !== cards[index - 1].page)\n      );\n\n    const cypherPages = (yield select(CypherCodecs.select())).map(\n      (_) => _.Cypher\n    );\n\n    const pages = [...factionModelPages, ...wildCardPages, ...cypherPages].sort(\n      (_) => _.page\n    );\n    const pageSlices = partitionBy(50, pages);\n\n    yield put(\n      AppSync.addReasons({\n        reasons: pageSlices.map((_, index) => ({\n          reason: `Loading page ids ${index + 1} of ${pageSlices.length}`,\n          description:\n            \"Card lists are encoded in the URL using unique wiki page ids\",\n        })),\n      })\n    );\n\n    for (const pages of pageSlices) {\n      yield* Requests.queryPageIds({ pages });\n    }\n\n    let processedCount = 0;\n    while (yield take(PageIds.addPages().type)) {\n      processedCount += 1;\n      if (pageSlices.length === processedCount) {\n        yield put(AppSync.done());\n      }\n    }\n  }\n}\n\nexport { fetchPageIds };\n","import { all } from \"redux-saga/effects\";\nimport { fetchWikiPage } from \"./fetchWikiPage\";\nimport { updateCache } from \"./updateCache\";\nimport { fetchPageIds } from \"./fetchPageIds\";\n\nfunction* cacheWikiPages() {\n  yield all([fetchPageIds(), updateCache(), fetchWikiPage()]);\n}\n\nexport { cacheWikiPages };\n","import { Requests } from \"../../../state/io/Requests\";\n\nfunction* fetchCadreCategoryMembers() {\n  yield* Requests.queryCadres();\n}\n\nexport { fetchCadreCategoryMembers };\n","import { take } from \"redux-saga/effects\";\nimport { CadreCategoryMembers } from \"../../../state/CadreCategoryMembers\";\nimport { Requests } from \"../../../state/io/Requests\";\n\nfunction* fetchCadreModels() {\n  while (true) {\n    const {\n      payload: { cadreCategoryMembers },\n    } = yield take(CadreCategoryMembers.set().type);\n\n    const pageIds = Object.keys(cadreCategoryMembers);\n    for (const pageId of pageIds) {\n      yield* Requests.queryCadreModels({ pageId });\n    }\n  }\n}\n\nexport { fetchCadreModels };\n","/*\nThese sagas load meta data necessary for grouping models into cadres.\n\n`fetchCadreCategoryMembers` gets a list of all cadres in game, while `fetchCadreModels` fetches\nthe cadre models for a given cadre.\n*/\n\nimport { all } from \"redux-saga/effects\";\nimport { fetchCadreCategoryMembers } from \"./fetchCadreCategoryMembers\";\nimport { fetchCadreModels } from \"./fetchCadreModels\";\n\nfunction* fetchCadres() {\n  yield all([fetchCadreCategoryMembers(), fetchCadreModels()]);\n}\n\nexport { fetchCadres };\n","function cleanText(text) {\n  return text.replace(/\\n/g, \"\");\n}\n\nfunction prepareDOM(text) {\n  const doc = new DOMParser().parseFromString(text, \"text/html\");\n  doc\n    .querySelectorAll(\n      \"h1 > span[id], h2 > span[id], h3 > span[id], h4 > span[id]\"\n    )\n    .forEach((node) => {\n      node.parentNode.id = node.id;\n    });\n\n  return doc;\n}\n\nexport { cleanText, prepareDOM };\n","import { prepareDOM } from \"./utils\";\n\nconst parseCypherText = (text) => {\n  const doc = prepareDOM(text);\n\n  const type = extractLink(doc, \"Type\");\n  const pow = extractLink(doc, \"Pow\");\n  const effect = extractParagraphs(doc, \"Effect\");\n  const faction = extractLink(doc, \"Faction\");\n  const source = extractLink(doc, \"Source\");\n\n  const cypher = {\n    type,\n    pow,\n    effect,\n    faction,\n    source,\n  };\n\n  return removeUndefinedValues(cypher);\n};\n\nexport { parseCypherText };\n\nfunction extractLink(doc, id) {\n  const p = doc.querySelector(`h2#${id} ~ p`);\n  if (!p) return undefined;\n\n  const a = p.querySelector(\"a\");\n  if (!a) return { text: p.innerText };\n\n  const hrefs = a.href.split(\"title=\");\n  return { text: a.innerText, page: hrefs[hrefs.length - 1] };\n}\n\nfunction extractParagraphs(doc, id) {\n  function helper(node, texts) {\n    switch (node.tagName) {\n      case \"P\":\n        return helper(node.nextSibling, [...texts, node.innerText.trim()]);\n      case \"H2\":\n        return texts;\n      default:\n        return helper(node.nextSibling, texts);\n    }\n  }\n\n  const node = doc.querySelector(`h2#${id} ~ p`);\n  if (!node) return undefined;\n\n  return helper(node, []);\n}\n\nfunction removeUndefinedValues(obj) {\n  if (Array.isArray(obj)) return obj.map(removeUndefinedValues);\n  if (typeof obj !== \"object\") return obj;\n\n  return Object.fromEntries(\n    Object.entries(obj)\n      .filter(([key, value]) => typeof value !== \"undefined\")\n      .map(([key, value]) => [key, removeUndefinedValues(value)])\n  );\n}\n","import { cleanText } from \"./utils\";\n\nfunction parseAnchorTable(table) {\n  const header = [...table.querySelectorAll(\"th\")].map((th) =>\n    cleanText(th.innerText)\n  );\n\n  const body = [...table.querySelectorAll(\"tr\")].map((tr) =>\n    [...tr.querySelectorAll(\"td\")].map((td) => {\n      const anchors = [...td.querySelectorAll(\"a\")].map(parseAnchor);\n      if (anchors.length > 0) {\n        return anchors;\n      }\n      const text = parseText(td);\n      if (text) {\n        return [{ text }];\n      }\n      return [];\n    })\n  );\n\n  return body\n    .filter((row) => row.length === header.length)\n    .map((row) =>\n      Object.fromEntries(\n        header.flatMap((title, i) => (row[i] ? [[title, row[i]]] : []))\n      )\n    );\n}\n\nfunction parseAnchor(a) {\n  const titleColon = a.title.split(\":\");\n  const hrefTitle = a.href.split(\"title=\");\n  return {\n    text: titleColon[titleColon.length - 1],\n    page: hrefTitle[hrefTitle.length - 1],\n  };\n}\n\nexport { parseAnchor, parseAnchorTable };\n\nfunction parseText(node) {\n  return cleanText(node.innerText);\n}\n","import { parseAnchorTable } from \"./parsers\";\nimport { prepareDOM } from \"./utils\";\n\nconst parseCypherCodecsText = (text) => {\n  const doc = prepareDOM(text);\n\n  const cypherCodecsTable = doc.querySelector(\"table.sortable\");\n  if (!cypherCodecsTable) {\n    console.error(\"parseCypherCodecsText: cypherCodecsTable not found!\");\n    return undefined;\n  }\n\n  const cypherCodecs = parseAnchorTable(cypherCodecsTable);\n  return cypherCodecs.map((cypherCodec) =>\n    Object.fromEntries(\n      Object.entries(cypherCodec).map(([key, values]) => [key, values[0]])\n    )\n  );\n};\n\nexport { parseCypherCodecsText };\n","import { parseAnchorTable } from \"./parsers\";\nimport { prepareDOM } from \"./utils\";\n\nconst parseFactionModelsText = (text) => {\n  const doc = prepareDOM(text);\n\n  const table = doc.querySelector(\"h1#Models ~ table\");\n  if (!table) {\n    console.error(\"parseFactionModelsText: table not found!\");\n    return undefined;\n  }\n  const models = parseAnchorTable(table);\n\n  return models.map((model) =>\n    Object.fromEntries(\n      Object.entries(model).flatMap(([key, values]) =>\n        key === \"Subtype\"\n          ? values.length > 0\n            ? [[key, values]]\n            : []\n          : [[key, values[0]]]\n      )\n    )\n  );\n};\n\nexport { parseFactionModelsText };\n","import { parseAnchor } from \"./parsers\";\nimport { prepareDOM } from \"./utils\";\n\nconst parseFactionsText = (text) => {\n  const doc = prepareDOM(text);\n\n  const p = doc.querySelector(\"h2#Factions ~ p\");\n  const factions = Object.fromEntries(collectFactions(p, []));\n  delete factions.Wild_Card; // Wild Cards are crawled independently.\n  return factions;\n};\n\nexport { parseFactionsText };\n\nfunction collectFactions(node, factions) {\n  switch (node.tagName) {\n    case \"P\":\n      const a = node.querySelector(\"a\");\n      if (!a) {\n        console.error(\"collectFactions: a not found!\");\n        return collectFactions(node.nextSibling, factions);\n      }\n      const anchor = parseAnchor(a);\n      const faction = [anchor.page, anchor];\n      return collectFactions(node.nextSibling, [...factions, faction]);\n    case \"H2\":\n      return factions;\n    default:\n      return collectFactions(node.nextSibling, factions);\n  }\n}\n","import { parseAnchor } from \"./parsers\";\nimport { cleanText, prepareDOM } from \"./utils\";\n\nconst parseModelText = (text) => {\n  const doc = prepareDOM(text);\n\n  const factionAndTypes =\n    extractList(doc, \"Unit_Faction_and_Type\") ||\n    extractList(doc, \"Model_Faction_and_Type\");\n  const faction = factionAndTypes[0];\n  const types = factionAndTypes.slice(1);\n  const squadSize = extractText(doc, \"Squad_Size\");\n  const deploymentCost = extractText(doc, \"Deployment_Cost\");\n  const baseSize = extractText(doc, \"Base_Size\");\n  const health = extractText(doc, \"Health\");\n  const wildCardFactions = extractList(doc, \"Wild_Card_Factions\");\n  const weaponPoints = extractText(doc, \"Weapon_Points\");\n  const hardpoints = extractText(doc, \"Hardpoints\");\n  const specialRules = extractDefinitions(doc, \"Special_Rules\");\n  const chassisSpecialRules = extractDefinitions(doc, \"Chassis_Special_Rules\");\n  const advantages = extractDefinitions(doc, \"Advantages\");\n  const maneuvers = extractDefinitions(doc, \"Maneuvers\");\n  const vehicleWeaponSelection = extractWeaponSelection(\n    doc,\n    \"Weapon_Selection\"\n  );\n  const cortexes = extractCortexes(doc, \"Cortexes\");\n\n  const modelStatsData = [\n    ...doc\n      .querySelector(\"h3#Unit_Stats ~ table, h3#Model_Stats ~ table\")\n      .querySelectorAll(\"tr > td\"),\n  ].map((_) => cleanText(_.innerText));\n  const modelStatsLength = modelStatsData.length / 2;\n  const modelStats = Object.fromEntries(\n    Array.from({ length: modelStatsLength }, (_, i) => i).map((i) => [\n      modelStatsData[i],\n      modelStatsData[i + modelStatsLength],\n    ])\n  );\n\n  let weaponsData = [...doc.querySelectorAll(\"h3#Weapons ~ table tr\")].map(\n    (tr) => [...tr.querySelectorAll(\"td\")]\n  );\n  let weapons = undefined;\n  if (weaponsData.length > 0) {\n    weapons = [];\n    let header = weaponsData[0].map((td) => td.innerText);\n    let weaponsList = weaponsData.slice(1);\n    for (const tds of weaponsList) {\n      if (tds.length === header.length) {\n        const stats = tds.map((td) => td.innerText);\n        const weapon = Object.fromEntries(\n          header.map((key, i) => [cleanText(key), cleanText(stats[i])])\n        );\n        weapons.push(weapon);\n      }\n      if (tds.length === 1) {\n        const previousWeapons = weapons.slice(0, weapons.length - 1);\n        const lastWeapon = weapons[weapons.length - 1];\n\n        const weapon = {\n          ...lastWeapon,\n          specialRules: parseDefinitionText(tds[0]),\n        };\n        weapons = [...previousWeapons, weapon];\n      }\n    }\n  }\n\n  function weaponDetails() {\n    const weaponDetailsTable = doc.querySelector(\"table.mw-collapsible\");\n    if (!weaponDetailsTable) return undefined;\n\n    const weaponDetailsData = [...weaponDetailsTable.querySelectorAll(\"tr\")]\n      .map((tr) => [...tr.querySelectorAll(\"td, th\")])\n      .filter((_) => _.length === 4);\n    if (!weaponDetailsData || weaponDetailsData.length === 0) return undefined;\n\n    const detailsHeader = weaponDetailsData[0].map((_) =>\n      cleanText(_.innerText)\n    );\n    return weaponDetailsData.slice(1).map((tds) =>\n      Object.fromEntries(\n        tds.map((td, i) => {\n          const a = td.querySelector(\"a\");\n          const hrefs = a ? a.href.split(\"title=\") : undefined;\n          const text = cleanText(td.innerText);\n          return [\n            detailsHeader[i],\n            a ? { text, page: hrefs[hrefs.length - 1] } : { text },\n          ];\n        })\n      )\n    );\n  }\n\n  const release = extractText(doc, \"Release\", { node: \"h1\" });\n  const lore = extractText(doc, \"Lore\", { node: \"h1\" });\n\n  const model = {\n    faction,\n    types,\n    squadSize,\n    deploymentCost,\n    baseSize,\n    health,\n    wildCardFactions,\n    hardpoints,\n    weaponPoints,\n    modelStats,\n    specialRules,\n    weapons,\n    advantages,\n    maneuvers,\n    vehicleWeaponSelection,\n    cortexes,\n    chassisSpecialRules,\n    weaponDetails: weaponDetails(),\n    release,\n    lore,\n  };\n\n  return removeUndefinedValues(model);\n};\n\nexport { parseModelText };\n\nfunction removeUndefinedValues(obj) {\n  if (Array.isArray(obj)) return obj.map(removeUndefinedValues);\n  if (typeof obj !== \"object\") return obj;\n\n  return Object.fromEntries(\n    Object.entries(obj)\n      .filter(([key, value]) => typeof value !== \"undefined\")\n      .map(([key, value]) => [key, removeUndefinedValues(value)])\n  );\n}\n\nfunction extractText(doc, id, { node = \"h3\" } = {}) {\n  const p = doc.querySelector(`${node}#${id} ~ p`);\n  if (!p) return undefined;\n\n  return cleanText(p.innerText);\n}\n\nfunction extractList(doc, id) {\n  const p = doc.querySelector(`h3#${id} ~ p`);\n  if (!p) return undefined;\n\n  const as = [...p.querySelectorAll(\"a\")];\n  if (as.length === 0) return undefined;\n\n  return as.map((a) => {\n    const hrefs = a.href.split(\"title=\");\n    return { text: a.innerText, page: hrefs[hrefs.length - 1] };\n  });\n}\n\nfunction extractWeaponSelection(doc, id) {\n  const node = doc.querySelector(`h3#${id} + p`);\n  if (!node) return undefined;\n\n  const anchors = [...node.querySelectorAll(\"a\")];\n\n  return anchors.map((a) => parseAnchor(a));\n}\n\nfunction extractCortexes(doc, id) {\n  function helper(node, cortexes) {\n    switch (node.tagName) {\n      case \"P\":\n        const cortex = node.querySelector(\"b\").innerText;\n        const definitions = parseDefinitionText(node);\n        return helper(node.nextSibling, [...cortexes, [cortex, definitions]]);\n      case \"H3\":\n        return cortexes;\n      default:\n        return helper(node.nextSibling, cortexes);\n    }\n  }\n\n  const node = doc.querySelector(`h3#${id} ~ p`);\n  if (!node) return undefined;\n\n  return Object.fromEntries(helper(node, []));\n}\n\nfunction parseDefinitionText(node) {\n  const definitions = node.innerHTML\n    .split(\"<br>\")\n    .map((_) => _.replace(/<[^>]+>/g, \"\").trim());\n\n  const pairs = definitions.flatMap((definition) => {\n    const separator = \": \";\n    const groups = definition.split(separator).map(cleanText);\n    if (groups.length < 2) return [];\n    const key = groups[0];\n    const val = groups.slice(1).join(separator);\n    return [[key, val]];\n  });\n  if (pairs.length === 0) return undefined;\n\n  return Object.fromEntries(pairs);\n}\n\nfunction extractDefinitions(doc, id) {\n  const p = doc.querySelector(`h3#${id} ~ p`);\n  if (!p) return undefined;\n\n  return parseDefinitionText(p);\n}\n","import { parseAnchor } from \"./parsers\";\nimport { prepareDOM } from \"./utils\";\n\nconst parseVehicleAndWarjackWeaponText = (text) => {\n  const doc = prepareDOM(text);\n\n  const vehicleWeaponId = doc.querySelector(\"#Vehicle_Weapon\");\n  const warjackWeaponId = doc.querySelector(\"#Warjack_Weapon\");\n\n  if (vehicleWeaponId && warjackWeaponId) {\n    const vehicleWeapon = parseVehicleOrWarjackWeapon(\n      \"#Vehicle_Weapon ~ \",\n      doc\n    );\n    const warjackWeapon = parseVehicleOrWarjackWeapon(\n      \"#Warjack_Weapon ~ \",\n      doc\n    );\n\n    return { vehicleWeapon, warjackWeapon };\n  } else {\n    const vehicleOrWarjackWeapon = parseVehicleOrWarjackWeapon(\"\", doc);\n\n    return { vehicleOrWarjackWeapon };\n  }\n};\n\nexport { parseVehicleAndWarjackWeaponText };\n\nfunction parseVehicleOrWarjackWeapon(prefix, doc) {\n  let res = {};\n\n  const availableFor = [\n    ...doc.querySelectorAll(`${prefix}[id^=Available_For] + p > a`),\n  ].map(parseAnchor);\n\n  res.availableFor = availableFor;\n\n  const pointCostNode = doc.querySelector(`${prefix}[id^=Point_Cost] + p`);\n  if (pointCostNode) {\n    const pointCost = parseInt(pointCostNode.innerText);\n\n    res.pointCost = pointCost;\n  }\n\n  const locationNode = doc.querySelector(`${prefix}[id^=Location] + p`);\n  if (locationNode) {\n    const location = locationNode.innerText.replace(/\\n/g, \"\");\n\n    res.location = location;\n  }\n\n  // Good special rules example: Metaperceptor\n  const specialRulesP = doc.querySelector(`${prefix}[id^=Special_Rules] + p`);\n  if (specialRulesP) {\n    const specialRules = specialRulesP\n      ? Object.fromEntries(\n          specialRulesP.innerText\n            .replace(/\\n$/g, \"\")\n            .split(\"\\n\")\n            .map((specialRule) => specialRule.split(\": \"))\n        )\n      : {};\n\n    res.specialRules = specialRules;\n  }\n\n  // Good weapons examples:\n  // - Nova_Cannon#Warjack_Weapon (several special abilities)\n  // - Protean_Forge (several attack modes)\n  // - Assault_Rifle_%26_Bayonet (several weapons)\n  const table = doc.querySelector(`${prefix}[id^=Weapons] + table`);\n\n  if (table) {\n    const header = [...table.querySelectorAll(\"tr:first-of-type td\")].map(\n      (td) => td.innerText.replace(/\\n/g, \"\")\n    );\n\n    const weapons = [...table.querySelectorAll(\"tr:not(:first-of-type)\")]\n      .map((tr) => [...tr.querySelectorAll(\"td\")])\n      .flatMap((tr, index) =>\n        index % 2 === 0\n          ? [\n              tr.map((td) =>\n                [...td.childNodes]\n                  .map((node) =>\n                    (node.innerText || node.textContent).replace(/\\n$/g, \"\")\n                  )\n                  .filter((text) => [\" \", \"\"].indexOf(text) === -1)\n              ),\n            ]\n          : tr.map((td) => {\n              if (td.innerText === \"\") return {};\n              const ul = td.querySelector(\"ul\");\n\n              if (ul) {\n                const textNode = td.querySelector(\"ul\").previousSibling;\n                textNode.nodeValue.replace(/\\n/g, \" \");\n\n                td.querySelector(\"ul\").insertAdjacentText(\n                  \"beforebegin\",\n                  textNode.nodeValue.replace(/\\n/g, \" \") +\n                    td.querySelector(\"ul\").innerText.replace(/\\n/g, \" \")\n                );\n                textNode.remove();\n                td.querySelector(\"ul\").remove();\n              }\n\n              const specialRules = Object.fromEntries(\n                [...td.childNodes]\n                  .map((node) =>\n                    node.nodeName === \"BR\"\n                      ? \"\\n\"\n                      : node.innerText || node.textContent\n                  )\n                  .join(\"\")\n                  .replace(/\\n$/, \"\")\n                  .split(\"\\n\")\n                  .filter((text) => text !== \"\")\n                  .map((entry) => {\n                    let colonIndex = entry.indexOf(\": \");\n                    return [\n                      entry.slice(0, colonIndex),\n                      entry.slice(colonIndex + 2),\n                    ];\n                  })\n              );\n\n              if (Object.keys(specialRules).length === 0) return {};\n              return { specialRules };\n            })\n      )\n      .reduce(\n        (acc, tr, index) =>\n          index % 2 === 0\n            ? [\n                ...acc,\n                tr.reduce(\n                  (acc2, value, index2) => ({\n                    ...acc2,\n                    [header[index2]]: value.length === 1 ? value[0] : value,\n                  }),\n                  {}\n                ),\n              ]\n            : [\n                ...acc.slice(0, acc.length - 1),\n                { ...acc[acc.length - 1], ...tr },\n              ],\n        []\n      );\n    if (weapons.length > 0) {\n      res.weapons = weapons;\n    }\n  }\n\n  return res;\n}\n","import { parseAnchorTable } from \"./parsers\";\nimport { prepareDOM } from \"./utils\";\n\nconst parseWildCardText = (text) => {\n  const doc = prepareDOM(text);\n\n  const h1OrTable = doc.querySelectorAll(\"h1, table.sortable\");\n  const factionAndModels = [];\n\n  for (let i = 0; i < h1OrTable.length; i++) {\n    if (i % 2 === 0) {\n      const h1 = h1OrTable[i];\n      if (h1.tagName !== \"H1\") {\n        console.error(\n          `parseWildCardText: expected H1, but got ${h1.tagName}!`,\n          h1\n        );\n      }\n      factionAndModels.push({ faction: h1.id });\n    } else {\n      const table = h1OrTable[i];\n      if (table.tagName !== \"TABLE\") {\n        console.error(\n          `parseWildCardText: expected TABLE, but got ${table.tagName}!`,\n          table\n        );\n      }\n      const last = factionAndModels[factionAndModels.length - 1];\n      const models = parseAnchorTable(table);\n      last.models = models.map((model) =>\n        Object.fromEntries(\n          Object.entries(model).flatMap(([key, values]) =>\n            key === \"Subtype\"\n              ? values.length > 0\n                ? [[key, values]]\n                : []\n              : [[key, values[0]]]\n          )\n        )\n      );\n    }\n  }\n\n  return factionAndModels;\n};\n\nexport { parseWildCardText };\n","import { put } from \"redux-saga/effects\";\nimport { parseCypherText } from \"../../core/parse\";\nimport { Cyphers } from \"../../../state/Cyphers\";\n\nfunction* parseCypher({ data, page }) {\n  const cypher = parseCypherText(data.text);\n  cypher.name = { text: data.title, page };\n  yield put(Cyphers.setForPage({ page, cypher }));\n}\n\nexport { parseCypher };\n","import { put } from \"redux-saga/effects\";\nimport { parseCypherCodecsText } from \"../../core/parse\";\nimport { CypherCodecs } from \"../../../state/CypherCodecs\";\n\nfunction* parseCypherCodecs({ data }) {\n  const cypherCodecs = parseCypherCodecsText(data.text);\n  yield put(CypherCodecs.set({ cypherCodecs }));\n}\n\nexport { parseCypherCodecs };\n","import { put } from \"redux-saga/effects\";\nimport { parseFactionModelsText } from \"../../core/parse\";\nimport { FactionModels } from \"../../../state/FactionModels\";\n\nfunction* parseFactionModels({ data, page }) {\n  const factionModels = parseFactionModelsText(data.text);\n  yield put(FactionModels.setForPage({ page, factionModels }));\n}\n\nexport { parseFactionModels };\n","import { put } from \"redux-saga/effects\";\nimport { parseFactionsText } from \"../../core/parse\";\nimport { Factions } from \"../../../state/Factions\";\n\nfunction* parseFactions({ data }) {\n  const factions = parseFactionsText(data.text);\n  yield put(Factions.set({ factions }));\n}\n\nexport { parseFactions };\n","import { put } from \"redux-saga/effects\";\nimport { parseModelText } from \"../../core/parse\";\nimport { Models } from \"../../../state/Models\";\nimport { partitionBy } from \"../partitionBy\";\nimport { Requests } from \"../../../state/io/Requests\";\n\nfunction* parseModel({ data, page }) {\n  const model = parseModelText(data.text);\n  model.name = { text: data.title, page };\n\n  const cortexSelections = identifyCortexSelections(\n    model.cortexes,\n    data.categories\n  );\n\n  if (cortexSelections) {\n    model.cortexSelections = cortexSelections;\n  }\n\n  const warjackWeaponSelections = buildWarjackWeaponSelections(\n    model.weaponDetails\n  );\n\n  if (warjackWeaponSelections) {\n    model.warjackWeaponSelections = warjackWeaponSelections;\n  }\n\n  yield put(Models.setForPage({ page, model }));\n\n  let fetchPages = [];\n\n  if (cortexSelections) {\n    const cortexCategories = Object.values(cortexSelections).flatMap(\n      (advantages) =>\n        Object.values(advantages).flatMap(({ category }) => ({\n          text: category.replace(/_/g, \" \"),\n          page: category,\n        }))\n    );\n\n    fetchPages = [...fetchPages, ...cortexCategories];\n  }\n\n  if (warjackWeaponSelections) {\n    const weaponPages = Object.values(warjackWeaponSelections).map(\n      ({ name, page }) => ({ text: name, page })\n    );\n\n    fetchPages = [...fetchPages, ...weaponPages];\n  }\n\n  if (model.vehicleWeaponSelection) {\n    fetchPages = [...fetchPages, ...model.vehicleWeaponSelection];\n  }\n\n  if (fetchPages.length > 0) {\n    const pageSlices = partitionBy(50, fetchPages);\n\n    for (const pages of pageSlices) {\n      yield* Requests.queryPageIds({ pages: pages });\n    }\n  }\n}\n\nexport { parseModel };\n\nfunction buildWarjackWeaponSelections(weaponDetails) {\n  if (!weaponDetails) {\n    return undefined;\n  }\n\n  return Object.fromEntries(\n    weaponDetails.map(({ Cost, Location, Weapon }) => [\n      Weapon.page,\n      {\n        cost: Cost.text,\n        location: Location.text,\n        name: Weapon.text,\n        page: Weapon.page,\n      },\n    ])\n  );\n}\n\nfunction identifyCortexSelections(cortexes, categories) {\n  if (\n    !cortexes ||\n    Object.entries(cortexes).length === 0 ||\n    !categories ||\n    Object.entries(categories).length === 0\n  ) {\n    return undefined;\n  }\n\n  const categoryTexts = categories.map(({ category }) => category);\n\n  return Object.fromEntries(\n    Object.entries(cortexes).map(([cortex, advantages]) => [\n      cortex,\n      Object.fromEntries(\n        Object.entries(advantages).map(([advantage, text]) => [\n          advantage,\n          {\n            category: `Category:${findClosestCategory(\n              advantage,\n              categoryTexts\n            )}`,\n            text,\n          },\n        ])\n      ),\n    ])\n  );\n}\n\nfunction findClosestCategory(advantage, categoryTexts) {\n  return categoryTexts.find(\n    (category) => advantage === category.replace(/^WNM_/, \"\").replace(/_/g, \" \")\n  );\n}\n","import { put, select } from \"redux-saga/effects\";\nimport { parseVehicleAndWarjackWeaponText } from \"../../core/parse\";\nimport { VehicleWeapons } from \"../../../state/VehicleWeapons\";\nimport { WarjackWeapons } from \"../../../state/WarjackWeapons\";\nimport { Models } from \"../../../state/Models\";\n\nfunction* parseVehicleOrWarjackWeapon({ data, page }) {\n  const { vehicleWeapon, vehicleOrWarjackWeapon, warjackWeapon } =\n    parseVehicleAndWarjackWeaponText(data.text);\n\n  if (vehicleWeapon)\n    yield put(VehicleWeapons.setForPage({ page, vehicleWeapon }));\n  if (warjackWeapon)\n    yield put(WarjackWeapons.setForPage({ page, warjackWeapon }));\n  if (vehicleOrWarjackWeapon) {\n    const models = Object.values(yield select(Models.select()));\n\n    const vehicles = models.filter(({ types }) =>\n      types.some(({ text }) => text === \"Vehicle\")\n    );\n    const warjacks = models.filter(({ types }) =>\n      types.some(({ text }) => text === \"Warjack\")\n    );\n\n    const vehicleWeapons = vehicles.flatMap((vehicle) =>\n      vehicle.vehicleWeaponSelection.map((weapon) => weapon.page)\n    );\n    const warjackWeapons = warjacks.flatMap((warjack) =>\n      !warjack.weaponDetails\n        ? []\n        : warjack.weaponDetails.map(({ Weapon }) => Weapon.page)\n    );\n\n    if (vehicleWeapons.includes(page) && warjackWeapons.includes(page)) {\n      console.error(\n        `Vehicle weapons and warjack weapons cannot both contain page ${page}!`\n      );\n    }\n\n    if (vehicleWeapons.includes(page)) {\n      yield put(\n        VehicleWeapons.setForPage({\n          page,\n          vehicleWeapon: vehicleOrWarjackWeapon,\n        })\n      );\n    }\n\n    if (warjackWeapons.includes(page)) {\n      yield put(\n        WarjackWeapons.setForPage({\n          page,\n          warjackWeapon: vehicleOrWarjackWeapon,\n        })\n      );\n    }\n  }\n}\n\nexport { parseVehicleOrWarjackWeapon };\n","import { put } from \"redux-saga/effects\";\nimport { parseWildCardText } from \"../../core/parse\";\nimport { WildCardModels } from \"../../../state/WildCardModels\";\n\nfunction* parseWildCard({ data }) {\n  const wildCards = parseWildCardText(data.text);\n  yield put(WildCardModels.set({ wildCards }));\n}\n\nexport { parseWildCard };\n","import { parseCypher } from \"./parseCypher\";\nimport { parseCypherCodecs } from \"./parseCypherCodecs\";\nimport { parseFactionModels } from \"./parseFactionModels\";\nimport { parseFactions } from \"./parseFactions\";\nimport { parseModel } from \"./parseModel\";\nimport { parseVehicleOrWarjackWeapon } from \"./parseVehicleOrWarjackWeapon\";\nimport { parseWildCard } from \"./parseWildCard\";\n\nconst parsers = {\n  parseCypher,\n  parseCypherCodecs,\n  parseFactionModels,\n  parseFactions,\n  parseModel,\n  parseVehicleOrWarjackWeapon,\n  parseWildCard,\n};\n\nexport default parsers;\n","import { select, take } from \"redux-saga/effects\";\n\nimport { FetchedWikiPage } from \"../../messages\";\nimport parsers from \"./parsers\";\nimport { ParserNames } from \"../../state/ParserNames\";\n\nfunction* parseWikiPages() {\n  while (true) {\n    const action = yield take(FetchedWikiPage().type);\n    const { payload } = action;\n\n    let parserName = payload.parserName;\n    if (!parserName) {\n      parserName = yield select(ParserNames.selectByPage(payload.page));\n    }\n\n    if (!parserName) {\n      console.error(\"Parser name not found!\", action);\n      continue;\n    }\n\n    const parser = parsers[parserName];\n\n    if (!parser) {\n      console.error(\"Parser not found!\", action);\n      continue;\n    }\n\n    yield* parser(payload);\n  }\n}\n\nexport { parseWikiPages };\n","import { all, take } from \"redux-saga/effects\";\nimport { Factions } from \"../../state/Factions\";\nimport { Requests } from \"../../state/io/Requests\";\n\nfunction* triggerFetchWikiPages() {\n  yield all([triggerFetchFactions()]);\n}\n\nexport { triggerFetchWikiPages };\n\nfunction* triggerFetchFactions() {\n  while (true) {\n    const { payload } = yield take(Factions.set().type);\n    const { factions } = payload;\n\n    const factionPages = Object.values(factions).map((faction) => faction.page);\n\n    for (const page of factionPages) {\n      yield* Requests.parsePage({ page, parserName: \"parseFactionModels\" });\n    }\n  }\n}\n","const digitsBase62 =\n  \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\nfunction toBase62(n) {\n  if (n === 0) return \"0\";\n  var result = \"\";\n  while (n > 0) {\n    result = digitsBase62[n % digitsBase62.length] + result;\n    n = parseInt(n / digitsBase62.length, 10);\n  }\n  return result;\n}\n\nfunction fromBase62(s) {\n  var result = 0;\n  for (var i = 0; i < s.length; i++) {\n    var p = digitsBase62.indexOf(s[i]);\n    if (p < 0) return NaN;\n    result += p * Math.pow(digitsBase62.length, s.length - i - 1);\n  }\n  return result;\n}\n\nexport { fromBase62, toBase62 };\n","import { eventChannel } from \"redux-saga\";\nimport { all, put, select, take } from \"redux-saga/effects\";\nimport {\n  CardDragEnded,\n  CardDragStarted,\n  MenuItemClicked,\n} from \"../../messages\";\nimport { AppSync } from \"../../state/AppSync\";\nimport { CypherCodecs } from \"../../state/CypherCodecs\";\nimport { Dragging } from \"../../state/Dragging\";\nimport { FactionModels } from \"../../state/FactionModels\";\nimport { Requests } from \"../../state/io/Requests\";\nimport { Lists } from \"../../state/Lists\";\nimport { Models } from \"../../state/Models\";\nimport { PageIds } from \"../../state/PageIds\";\nimport { Url } from \"../../state/Url\";\nimport { VehicleWeapons } from \"../../state/VehicleWeapons\";\nimport { WarjackWeapons } from \"../../state/WarjackWeapons\";\nimport { WildCardModels } from \"../../state/WildCardModels\";\nimport { toBase62, fromBase62 } from \"./base62\";\n\nfunction* ui() {\n  yield all([\n    addCard(),\n    removeCards(),\n    setDraggingFalse(),\n    setDraggingTrue(),\n    updateCards(),\n    updateUrl(),\n    parseListsFromQuery(),\n    parseListsFromQuery2(),\n    fetchCardOnShow(),\n    fetchWeaponsIfVehicleAdded(),\n    fetchWeaponsIfWarjackAdded(),\n  ]);\n}\n\nexport { ui };\n\nfunction* updateCards() {\n  while (true) {\n    const { payload } = yield take(CardDragEnded().type);\n    const { reason, source, destination } = payload;\n    if (reason === \"DROP\" && destination.droppableId.startsWith(\"cards_\")) {\n      const sourceListIndex = parseInt(\n        source.droppableId.replace(\"cards_\", \"\"),\n        10\n      );\n      const sourcePosition = source.index;\n\n      const destinationListIndex = parseInt(\n        destination.droppableId.replace(\"cards_\", \"\"),\n        10\n      );\n      const destinationPosition = destination.index;\n\n      yield put(\n        Lists.moveCard({\n          source: { listIndex: sourceListIndex, cardIndex: sourcePosition },\n          destination: {\n            listIndex: destinationListIndex,\n            cardIndex: destinationPosition,\n          },\n        })\n      );\n    }\n  }\n}\n\nfunction* removeCards() {\n  while (true) {\n    const { payload } = yield take(CardDragEnded().type);\n    const { reason, source, destination } = payload;\n    if (reason === \"DROP\" && destination.droppableId.startsWith(\"trash\")) {\n      const listIndex = parseInt(source.droppableId.replace(\"cards_\", \"\"), 10);\n      const cardIndex = source.index;\n\n      yield put(\n        Lists.removeCard({\n          source: { listIndex, cardIndex },\n        })\n      );\n    }\n  }\n}\n\nfunction* addCard() {\n  while (true) {\n    const { payload } = yield take(MenuItemClicked().type);\n    const { page } = payload;\n    const model = yield select(FactionModels.selectByPage(page));\n    const wildCard = yield select(WildCardModels.selectByPage(page));\n    const cypher = yield select(CypherCodecs.selectByPage(page));\n    if (model || wildCard || cypher) {\n      const pageId = yield select(PageIds.selectByPage(page));\n      yield put(Lists.addCard({ pageId }));\n    }\n  }\n}\n\nfunction* setDraggingTrue() {\n  while (yield take(CardDragStarted().type)) {\n    yield put(Dragging.activate());\n  }\n}\n\nfunction* setDraggingFalse() {\n  while (yield take(CardDragEnded().type)) {\n    yield put(Dragging.deactivate());\n  }\n}\n\nfunction* updateUrl() {\n  while (yield take((action) => action.type.startsWith(\"Lists.\"))) {\n    const lists = yield select(Lists.select());\n    const pageIds = lists.map(({ cards }) => cards.map((_) => _.pageId));\n\n    if (window.history && window.history.replaceState) {\n      const maxPageId = Math.max(0, ...pageIds.flat());\n      const codeLength = Math.ceil(Math.log(maxPageId + 1) / Math.log(62)) || 0;\n\n      function renderWarjackWeaponIds(warjackWeaponIds, codeLength) {\n        const ids = warjackWeaponIds || [];\n        let res = \"\";\n        for (let i = 0; i < ids.length; i++) {\n          const id = ids[i];\n          res += (id ? toBase62(id) : \"0\").padStart(codeLength, \"0\");\n        }\n        return res;\n      }\n\n      const state = lists.reduce(\n        (state, list, index) => ({\n          ...state,\n          ...(list.title ? { [`t${index}`]: list.title } : {}),\n          [`l${index}`]: list.cards.reduce(\n            (acc, card) =>\n              acc +\n              toBase62(card.pageId).padStart(codeLength, \"0\") +\n              (card.cortexIds || card.warjackWeaponIds\n                ? `(${(card.cortexIds || [])\n                    .map((id) => toBase62(id).padStart(codeLength, \"0\"))\n                    .join(\"\")},${renderWarjackWeaponIds(\n                    card.warjackWeaponIds,\n                    codeLength\n                  )})`\n                : \"\") +\n              (card.vehicleWeaponId\n                ? `[${toBase62(card.vehicleWeaponId).padStart(\n                    codeLength,\n                    \"0\"\n                  )}]`\n                : \"\"),\n            \"\"\n          ),\n        }),\n        { v: 1, e: codeLength }\n      );\n\n      const query = Object.entries(state)\n        .map(([key, value]) => `${key}=${value}`)\n        .join(\"&\");\n      const url =\n        window.location.origin + window.location.pathname + \"?\" + query;\n\n      yield put(Url.set({ url }));\n\n      window.history.replaceState(query, \"\", url);\n    }\n  }\n}\n\nfunction* parseListsFromQuery() {\n  const loadChannel = eventChannel((emitter) => {\n    window.addEventListener(\"load\", emitter);\n\n    return () => {\n      window.removeEventListener(\"load\", emitter);\n    };\n  });\n\n  while (true) {\n    yield take(loadChannel);\n\n    yield* parseLists();\n  }\n}\n\nfunction* parseListsFromQuery2() {\n  yield take(AppSync.done().type);\n\n  yield* parseLists();\n}\n\nfunction* parseLists() {\n  const urlParams = new URLSearchParams(window.location.search);\n  const params = Object.fromEntries(urlParams);\n\n  const version = params.v;\n  const exponent = parseInt(params.e, 10) || 0;\n\n  let lists = null;\n  if (version === \"1\" && exponent) {\n    const listIndexes = Object.keys(params)\n      .filter((key) => key.match(/^l[\\d]+$/))\n      .map((key) => parseInt(key.substring(1), 10))\n      .sort((a, b) => a - b);\n\n    lists = listIndexes.map((index) => ({\n      title: params[\"t\" + index] || \"\",\n      cards: parseList(exponent, params[\"l\" + index]),\n    }));\n  } else {\n    lists = yield select(Lists.select());\n  }\n\n  // If the card is either a configured warjack or a configured vehicle, its page must be\n  // fetched in order for its subtitle to be shown correctly. A warjack or vehicle can be\n  // identified by having at least one cortex id, warjack weapon id or vehicle weapon id.\n  for (const list of lists) {\n    for (const {\n      pageId,\n      cortexIds,\n      warjackWeaponIds,\n      vehicleWeaponId,\n    } of list.cards) {\n      if (cortexIds || warjackWeaponIds || vehicleWeaponId) {\n        const page = yield select(PageIds.selectPageByPageId(pageId));\n        if (page) {\n          yield* Requests.parsePage({ page, parserName: \"parseModel\" });\n        }\n      }\n    }\n  }\n\n  yield put(Lists.set({ lists }));\n}\n\nfunction* fetchWeaponsIfVehicleAdded() {\n  while (true) {\n    const { payload } = yield take(Models.setForPage().type);\n    if (\n      payload &&\n      payload.model &&\n      payload.model.types &&\n      payload.model.types.map((type) => type.text).includes(\"Vehicle\")\n    ) {\n      const vehicleWeaponSelection = payload.model.vehicleWeaponSelection;\n      if (vehicleWeaponSelection) {\n        for (const { page } of vehicleWeaponSelection) {\n          if (page) {\n            const pageWithoutTarget = page.split(\"#\")[0];\n            const weapon = yield select(\n              VehicleWeapons.selectByPage(pageWithoutTarget)\n            );\n            if (!weapon) {\n              yield put(\n                VehicleWeapons.setForPage({\n                  page: pageWithoutTarget,\n                  vehicleWeapon: {},\n                })\n              );\n            }\n            yield* Requests.parsePage({\n              page: pageWithoutTarget,\n              parserName: \"parseVehicleOrWarjackWeapon\",\n            });\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction* fetchWeaponsIfWarjackAdded() {\n  while (true) {\n    const { payload } = yield take(Models.setForPage().type);\n    if (\n      payload &&\n      payload.model &&\n      payload.model.types &&\n      payload.model.types.map((type) => type.text).includes(\"Warjack\")\n    ) {\n      const weaponDetails = payload.model.weaponDetails;\n      if (weaponDetails) {\n        for (const { Weapon } of weaponDetails) {\n          const page = Weapon.page;\n          if (page) {\n            const pageWithoutTarget = page.split(\"#\")[0];\n            const weapon = yield select(\n              WarjackWeapons.selectByPage(pageWithoutTarget)\n            );\n            if (!weapon) {\n              yield put(\n                WarjackWeapons.setForPage({\n                  page: pageWithoutTarget,\n                  warjackWeapon: {},\n                })\n              );\n            }\n            yield* Requests.parsePage({\n              page: pageWithoutTarget,\n              parserName: \"parseVehicleOrWarjackWeapon\",\n            });\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction* fetchCardOnShow() {\n  while (true) {\n    const { payload } = yield take(Lists.toggleCard().type);\n    if (payload && payload.pageId) {\n      const page = yield select(PageIds.selectPageByPageId(payload.pageId));\n      if (page) {\n        const cypher = yield select(CypherCodecs.selectByPage(page));\n        if (cypher) {\n          yield* Requests.parsePage({ page, parserName: \"parseCypher\" });\n        } else {\n          yield* Requests.parsePage({ page, parserName: \"parseModel\" });\n        }\n      }\n    }\n  }\n}\n\nfunction parseList(exponent, encodedList) {\n  function parseCards(cards, rest) {\n    if (rest === \"\") {\n      return cards;\n    }\n\n    const pageId = rest.slice(0, exponent);\n\n    if (rest[exponent] === \"(\") {\n      const blockEnd = rest.indexOf(\")\");\n      const delimiter = rest.indexOf(\",\");\n      if (!blockEnd || !delimiter) {\n        return [];\n      }\n\n      const block = rest.slice(exponent + 1, blockEnd);\n      const [cortexIds, warjackWeaponIds] = block.split(\",\");\n      return parseCards(\n        [\n          ...cards,\n          {\n            pageId,\n            cortexIds: partitionBy(exponent, cortexIds),\n            warjackWeaponIds: partitionBy(exponent, warjackWeaponIds),\n            vehicleWeaponId: [],\n          },\n        ],\n        rest.slice(blockEnd + 1)\n      );\n    }\n\n    if (rest[exponent] === \"[\") {\n      const blockEnd = rest.indexOf(\"]\");\n      if (!blockEnd) {\n        return [];\n      }\n\n      const vehicleWeaponId = rest.slice(exponent + 1, blockEnd);\n      return parseCards(\n        [\n          ...cards,\n          {\n            pageId,\n            cortexIds: [],\n            warjackWeaponIds: [],\n            vehicleWeaponId: [vehicleWeaponId],\n          },\n        ],\n        rest.slice(blockEnd + 1)\n      );\n    }\n\n    return parseCards(\n      [\n        ...cards,\n        { pageId, cortexIds: [], warjackWeaponIds: [], vehicleWeaponId: [] },\n      ],\n      rest.slice(exponent)\n    );\n  }\n\n  const cards = parseCards([], encodedList);\n\n  const decode = (string) => {\n    const normalizedString = string.replace(/^0+/, \"\") || \"0\";\n    if (normalizedString === \"0\") return null;\n    return parseInt(fromBase62(normalizedString), 10);\n  };\n\n  return cards\n    .map(({ pageId, cortexIds, warjackWeaponIds, vehicleWeaponId }) => ({\n      pageId: decode(pageId),\n      cortexIds: cortexIds.map(decode),\n      warjackWeaponIds: warjackWeaponIds.map(decode),\n      vehicleWeaponId: vehicleWeaponId.map(decode),\n    }))\n    .map(({ pageId, cortexIds, warjackWeaponIds, vehicleWeaponId }) => ({\n      pageId,\n      ...(cortexIds.length === 0 ? {} : { cortexIds }),\n      ...(warjackWeaponIds.length === 0 ? {} : { warjackWeaponIds }),\n      ...(vehicleWeaponId.length === 0\n        ? {}\n        : { vehicleWeaponId: vehicleWeaponId[0] }),\n      hidden: true,\n    }));\n}\n\nfunction partitionBy(slice, string) {\n  var strings = [];\n\n  for (let i = 0; i < string.length; i += slice) {\n    strings[strings.length] = string.slice(i, i + slice);\n  }\n\n  return strings;\n}\n","import { all, put, select } from \"redux-saga/effects\";\nimport { RefreshWikiPages } from \"../../messages\";\nimport { Requests } from \"../../state/io/Requests\";\nimport { cacheParserNames } from \"./cacheParserNames\";\nimport { cacheWikiPages } from \"./cacheWikiPages\";\nimport { fetchCadres } from \"./fetchCadres\";\nimport { parseWikiPages } from \"./parseWikiPages\";\nimport { triggerFetchWikiPages } from \"./triggerFetchWikiPages\";\nimport { ui } from \"./ui\";\n\nfunction* processes() {\n  yield all([\n    continuePending(),\n    cacheWikiPages(),\n    parseWikiPages(),\n    triggerFetchWikiPages(),\n    cacheParserNames(),\n    ui(),\n    fetchCadres(),\n    fetchInitialData(),\n    refresh(),\n  ]);\n}\n\nexport { processes };\n\nfunction* fetchInitialData() {\n  const pages = [\n    { page: \"Warcaster\", parserName: \"parseFactions\" },\n    { page: \"Wild_Card\", parserName: \"parseWildCard\" },\n    { page: \"Cypher_Codecs\", parserName: \"parseCypherCodecs\" },\n  ];\n  for (const page of pages) {\n    yield* Requests.parsePage(page);\n  }\n}\n\nfunction* continuePending() {\n  const pending = yield select(Requests.selectPending());\n  for (const params of pending) {\n    yield put(Requests.fetch(params));\n  }\n}\n\nfunction* refresh() {\n  yield put(RefreshWikiPages());\n}\n","import { StateShard } from \"./utils\";\n\nconst Version = StateShard(\"Version\", init, {}, {}, {});\n\nexport { Version };\n\nfunction init(state) {\n  state.version = \"2023-06-04T21:13:15.000Z\";\n}\n","import { AppSync } from \"./AppSync\";\nimport { CadreCategoryMembers } from \"./CadreCategoryMembers\";\nimport { CadreModels } from \"./CadreModels\";\nimport { Cyphers } from \"./Cyphers\";\nimport { CypherCodecs } from \"./CypherCodecs\";\nimport { Dragging } from \"./Dragging\";\nimport { Factions } from \"./Factions\";\nimport { FactionModels } from \"./FactionModels\";\nimport { Lists } from \"./Lists\";\nimport { Models } from \"./Models\";\nimport { PageIds } from \"./PageIds\";\nimport { ParserNames } from \"./ParserNames\";\nimport { Requests } from \"./io/Requests\";\nimport { Url } from \"./Url\";\nimport { VehicleWeapons } from \"./VehicleWeapons\";\nimport { Version } from \"./Version\";\nimport { WarjackWeapons } from \"./WarjackWeapons\";\nimport { WildCardModels } from \"./WildCardModels\";\nimport { immer, initAll } from \"./utils\";\n\nconst objects = [\n  AppSync,\n  CadreCategoryMembers,\n  CadreModels,\n  CypherCodecs,\n  Cyphers,\n  Factions,\n  FactionModels,\n  Models,\n  PageIds,\n  ParserNames,\n  Requests,\n  Url,\n  VehicleWeapons,\n  WarjackWeapons,\n  WildCardModels,\n  // UI\n  Dragging,\n  Lists,\n  // General\n  Version,\n];\n\nconst state = initAll(...objects)({});\n\nconst dispatch = immer(({ type, payload }) => {\n  const namespaces = Object.fromEntries(\n    objects.map((group) => [group.namespace, group])\n  );\n\n  const namespace = type.substring(0, type.indexOf(\".\"));\n  if (namespace && namespaces[namespace]) {\n    return redirect({ type, payload }, namespaces[namespace]);\n  }\n  if (type === \"CH\") {\n    return (state) => {\n      const url =\n        \"https://privateerpress.wiki/api.php?action=parse&page=Particle_Blaster&formatversion=2&format=json\";\n      state.io.requests.cached[url].data.parse.revid = 0;\n    };\n  }\n  if (type === \"RE\") {\n    return (state) => {\n      state.data.cadreCategoryMembers = {};\n      state.data.cadreModels = {};\n      state.data.models = {};\n      state.data.warjackWeapons = {};\n      for (const page of Object.keys(state.data.pages)) {\n        const white_list = [\n          \"Warcaster\",\n          \"Wild_Card\",\n          \"Cypher_Codecs\",\n          \"Aeternus_Continuum\",\n          \"Empyrean\",\n          \"Iron_Star_Alliance\",\n          \"Marcher_Worlds\",\n        ];\n        if (!white_list.includes(page)) {\n          delete state.data.pages[page];\n        }\n      }\n    };\n  }\n  return (state) => state;\n});\n\nexport { dispatch, state };\n\nfunction redirect(action, obj) {\n  return (state) =>\n    immer(({ type, payload }) => {\n      const f = obj.dispatch[type] || ((state, payload) => state);\n      return (state) => f(state, payload);\n    })(state, action);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport \"./index.css\";\nimport App from \"./ui/App\";\nimport { processes } from \"./businessLogic/processes\";\nimport { dispatch, state } from \"./state\";\n\nconst saga = initSaga();\nconst store = initStore(saga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nsaga.run(processes);\n\nfunction initStore(saga) {\n  const persistedState = localStorage.getItem(\"reduxState\")\n    ? JSON.parse(localStorage.getItem(\"reduxState\"))\n    : state;\n\n  const latestState =\n    new Date(persistedState.version) >= new Date(state.version)\n      ? persistedState\n      : state;\n\n  const composedEnhancers = composeWithDevTools(applyMiddleware(saga));\n  const store = createStore(dispatch, latestState, composedEnhancers);\n\n  store.subscribe(() => {\n    localStorage.setItem(\"reduxState\", JSON.stringify(store.getState()));\n  });\n\n  return store;\n}\n\nfunction initSaga() {\n  return createSagaMiddleware();\n}\n"],"sourceRoot":""}