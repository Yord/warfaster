{"version":3,"sources":["ui/Aeternus_Continuum.png","ui/Cyphers.png","ui/Empyrean.png","ui/Iron_Star_Alliance.png","ui/Lost_Legion.png","ui/Marcher_Worlds.png","ui/Wild_Card.png","messages.js","state/utils.js","state/AppSync.js","state/CypherCodecs.js","state/Cyphers.js","state/Dragging.js","state/FactionModels.js","state/Factions.js","state/Lists.js","state/PageIds.js","state/Url.js","state/WildCardModels.js","state/Models.js","ui/App.js","businessLogic/processes/jsonp.js","state/WikiPages.js","businessLogic/processes/cacheWikiPages/cacheWikiPages.js","businessLogic/processes/cacheWikiPages/updateCache.js","businessLogic/processes/partitionBy.js","businessLogic/processes/cacheWikiPages/fetchPageIds.js","businessLogic/processes/cacheWikiPages/index.js","businessLogic/core/parse/utils.js","businessLogic/core/parse/parseCypherText.js","businessLogic/core/parse/parsers.js","businessLogic/core/parse/parseCypherCodecsText.js","businessLogic/core/parse/parseFactionModelsText.js","businessLogic/core/parse/parseFactionsText.js","businessLogic/core/parse/parseModelText.js","businessLogic/core/parse/parseWildCardText.js","businessLogic/processes/parseWikiPages.js","businessLogic/processes/triggerFetchWikiPages.js","businessLogic/processes/base62.js","businessLogic/processes/ui.js","businessLogic/processes/index.js","state/Version.js","state/index.js","index.js"],"names":["CardDragEnded","message","CardDragStarted","MenuItemClicked","FetchPageIdsSlice","FetchWikiPage","FetchedWikiPage","FetchWikiPageRevisions","FetchedWikiPageRevisions","RefreshWikiPages","type","payload","immer","f","state","action","produce","identity","StateShard","namespace","init","actions","selectors","dispatch","Object","fromEntries","entries","map","functionName","keys","name","args","a","pipe","fs","AppSync","data","sync","done","reasons","select","addReasons","selectDone","selectReasons","CypherCodecs","cypherCodecs","set","selectPages","codec","Cypher","page","selectByPage","find","Cyphers","cyphers","cypher","values","flat","Dragging","ui","dragging","activate","deactivate","FactionModels","factionModels","models","selectModelPages","model","Name","Factions","factions","Lists","lists","oneEmptyList","addCard","pageId","card","hidden","cards","push","addEmptyList","moveListBy","listIndex","by","length","list","splice","removeCard","source","cardIndex","removeList","setCardCortex","cortexIds","setCardVehicleWeapon","vehicleWeaponId","setCardWarjackWeapons","hardpointNameIndex","warjackWeaponId","warjackWeaponIds","setListTitle","title","toggleCard","moveCard","destination","console","log","PageIds","pageIds","addPages","pageIdByTitle","selectByPages","pages","reduce","acc","selectPageByPageId","statePageId","undefined","Url","url","WildCardModels","wildCardModels","wildCards","wildCard","faction","Models","Header","Layout","Footer","Content","TextArea","Input","SubMenu","Menu","FactionImage","src","Aeternus_Continuum","alt","height","Empyrean","Iron_Star_Alliance","Lost_Legion","Marcher_Worlds","Wild_Card","App","connect","initialized","syncReasons","sort","text","Type","Subtype","subtype","_","join","flatMap","pageIdByPage","filter","details","hardpoints","hardpointNames","parseHardpoints","cortexSelections","cortex","advantages","advantage","category","categoryId","warjackWeaponSelections","selection","vehicleWeaponSelection","Cyphers2","Faction","dragStart","event","dragEnd","menuItemClicked","stopPropagation","target","value","setUrl","bookmark","document","querySelector","navigator","userAgent","match","range","createRange","selectNodeContents","window","getSelection","removeAllRanges","addRange","setSelectionRange","open","key","label","rootSubmenuKeys","i","React","useState","openKeys","setOpenKeys","className","onDragStart","onDragEnd","droppableId","provided","ref","innerRef","droppableProps","style","animation","color","DeleteOutlined","href","placeholder","id","onOpenChange","latestOpenKey","indexOf","mode","triggerSubMenuAction","factionName","icon","ItemGroup","shortName","slice","Item","onClick","placement","w1","w2","j","c1","c2","gutter","xs","sm","md","lg","xl","xxl","trigger","align","offset","cursor","display","paddingRight","fontSize","padding","PlusSquareOutlined","UpSquareOutlined","paddingLeft","DownSquareOutlined","span","maxLength","autoSize","onChange","Universal","count","size","draggableId","index","draggableProps","dragHandleProps","hoverable","Meta","avatar","width","textAlign","replace","vehicleWeaponName","cortexName","weaponIds","weaponId","weapon","pow","effect","squadSize","deploymentCost","baseSize","health","wildCardFactions","weaponPoints","modelStats","stat","specialRules","Fragment","weapons","ruleIndex","rule","colSpan","maneuvers","defaultValue","fontStyle","onSelect","Option","cortexes","advantageIndex","chassisSpecialRules","hardpointName","warjackWeaponNames","location","cost","warjackWeaponName","weaponDetails","release","lore","margin","SyncOutlined","spin","reason","description","Date","getFullYear","onKeyDown","vehicleWeapon","rHardpointGroup","results","n","RegExp","repeat","exec","hardpointCount","parseInt","groupCount","groupName","error","s","jsonp","Promise","resolve","reject","callbackName","Math","round","random","body","removeChild","script","createElement","appendChild","WikiPages","addPage","removePage","selectPageByPage","selectPagesByPageIds","includes","pageid","selectPageIds","cacheWikiPages","fetchWikiPage","addWikiPage","all","actionChannel","wikiPageChannel","take","call","parsePage","put","parse","delay","updateCache","refreshWikiPages","fetchWikiPageRevisions","refreshOutdatedWikiPages","pageidsList","ids","pageids","revisionsChannel","revisionsQuery","pageRevisions","query","revInfoByPageId","revision","missing","revid","max","revisions","revInfo","partitionBy","array","arrays","fetchPageIds","fetchPageIds2","fetchPageIdsSlice","cachedPageIds","factionsSet","factionModelPages","wildCardPages","cypherPages","pageSlices","processedCount","pageIdsSliceChannel","pageInfo","titleToPageId","pageList","encodeURIComponent","cacheWikiPages2","cleanText","prepareDOM","doc","DOMParser","parseFromString","querySelectorAll","forEach","node","parentNode","parseCypherText","removeUndefinedValues","extractLink","helper","texts","tagName","nextSibling","innerText","trim","extractParagraphs","p","hrefs","split","obj","Array","isArray","parseAnchorTable","table","header","th","tr","td","anchors","parseAnchor","row","titleColon","hrefTitle","parseCypherCodecsText","cypherCodecsTable","cypherCodec","parseFactionModelsText","parseFactionsText","collectFactions","anchor","parseModelText","factionAndTypes","extractList","types","extractText","extractDefinitions","extractWeaponSelection","definitions","parseDefinitionText","extractCortexes","modelStatsData","modelStatsLength","from","weaponsData","weaponsList","tds","stats","previousWeapons","lastWeapon","weaponDetailsTable","weaponDetailsData","detailsHeader","as","pairs","innerHTML","definition","groups","parseWildCardText","h1OrTable","factionAndModels","h1","last","parseWikiPages","identifyCortexSelections","categories","buildWarjackWeaponSelections","fetchPages","cortexCategories","weaponPages","Cost","Location","Weapon","categoryTexts","findClosestCategory","triggerFetchWikiPages","triggerFetchFactions","factionPages","digitsBase62","toBase62","result","updateCards","removeCards","setDraggingTrue","setDraggingFalse","updateUrl","parseListsFromQuery","parseListsFromQuery2","parseLists","fetchCardOnShow","startsWith","sourceListIndex","sourcePosition","destinationListIndex","destinationPosition","history","replaceState","renderWarjackWeaponIds","codeLength","res","padStart","maxPageId","ceil","v","e","origin","pathname","loadChannel","eventChannel","emitter","addEventListener","removeEventListener","urlParams","URLSearchParams","search","params","version","exponent","titleIndexes","substring","b","parseList","encodedList","parseCards","rest","blockEnd","delimiter","decode","string","normalizedString","NaN","fromBase62","strings","processes","fetchInitialData","refresh","Version","objects","initAll","namespaces","group","saga","createSagaMiddleware","store","persistedState","localStorage","getItem","JSON","latestState","composedEnhancers","composeWithDevTools","applyMiddleware","createStore","subscribe","setItem","stringify","getState","initStore","ReactDOM","render","getElementById","run"],"mappings":"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","file":"static/js/main.a93dfe6b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Aeternus_Continuum.d1b19d0e.png\";","export default __webpack_public_path__ + \"static/media/Cyphers.1ae05c50.png\";","export default __webpack_public_path__ + \"static/media/Empyrean.4ab49225.png\";","export default __webpack_public_path__ + \"static/media/Iron_Star_Alliance.82d76402.png\";","export default __webpack_public_path__ + \"static/media/Lost_Legion.78737fb2.png\";","export default __webpack_public_path__ + \"static/media/Marcher_Worlds.61a330cf.png\";","export default __webpack_public_path__ + \"static/media/Wild_Card.3da9dbca.png\";","const CardDragEnded = message(\"CARD/DRAG_ENDED\");\nconst CardDragStarted = message(\"CARD/DRAG_STARTED\");\nconst MenuItemClicked = message(\"MENU_ITEM/CLICKED\");\n\nconst FetchPageIdsSlice = message(\"PAGE_IDS_SLICE/FETCH\");\nconst FetchWikiPage = message(\"WIKI_PAGE/FETCH\");\nconst FetchedWikiPage = message(\"WIKI_PAGE/FETCHED\");\nconst FetchWikiPageRevisions = message(\"WIKI_PAGE_REVISIONS/FETCH\");\nconst FetchedWikiPageRevisions = message(\"WIKI_PAGE_REVISIONS/FETCHED\");\nconst RefreshWikiPages = message(\"WIKI_PAGES/REFRESH\");\n\nexport {\n  CardDragEnded,\n  CardDragStarted,\n  FetchPageIdsSlice,\n  FetchedWikiPage,\n  FetchedWikiPageRevisions,\n  FetchWikiPage,\n  FetchWikiPageRevisions,\n  MenuItemClicked,\n  RefreshWikiPages,\n};\n\nfunction message(type) {\n  return (payload = {}) => ({ type, payload });\n}\n","import produce from \"immer\";\n\nconst initAll = (...objects) =>\n  pipe(...objects.map((obj) => produce(obj.init)));\n\nconst immer = (f) => (state, action) => produce(f(action) || identity)(state);\n\nconst StateShard = (namespace, init, actions, selectors) => ({\n  namespace,\n  init,\n  dispatch: Object.fromEntries(\n    Object.entries(actions).map(([functionName, f]) => [\n      namespace + \".\" + functionName,\n      f,\n    ])\n  ),\n  ...Object.fromEntries(\n    Object.keys(actions).map((functionName) => [\n      functionName,\n      (payload = {}) => ({ type: namespace + \".\" + functionName, payload }),\n    ])\n  ),\n  ...Object.fromEntries(\n    Object.entries(selectors).map(([name, f]) => [\n      name,\n      (...args) =>\n        (state) =>\n          f(state, ...args),\n    ])\n  ),\n});\n\nexport { StateShard, immer, initAll };\n\nfunction identity(a) {\n  return a;\n}\n\nfunction pipe(...fs) {\n  return (a) => {\n    for (const f of fs) {\n      a = f(a);\n    }\n    return a;\n  };\n}\n","import { StateShard } from \"./utils\";\n\nconst AppSync = StateShard(\n  \"AppSync\",\n  init,\n  { done, addReasons },\n  { selectDone, selectReasons }\n);\n\nexport { AppSync };\n\nfunction init(state) {\n  if (!state.data) {\n    state.data = {};\n  }\n\n  if (!state.data.sync) {\n    state.data.sync = {};\n  }\n\n  state.data.sync.done = false;\n  state.data.sync.reasons = [];\n}\n\n// Actions\n\nfunction done(state) {\n  const sync = select(state);\n  sync.done = true;\n}\n\nfunction addReasons(state, { reasons }) {\n  const sync = select(state);\n  sync.reasons = [...sync.reasons, ...reasons];\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.data.sync;\n}\n\nfunction selectDone(state) {\n  const sync = select(state);\n  return sync.done;\n}\n\nfunction selectReasons(state) {\n  const sync = select(state);\n  return sync.reasons;\n}\n","import { StateShard } from \"./utils\";\n\nconst CypherCodecs = StateShard(\n  \"CypherCodecs\",\n  init,\n  { set },\n  { select, selectPages, selectByPage }\n);\n\nexport { CypherCodecs };\n\nfunction init(state) {\n  if (!state.data) {\n    state.data = {};\n  }\n\n  state.data.cypherCodecs = [];\n}\n\n// Actions\n\nfunction set(state, { cypherCodecs }) {\n  state.data.cypherCodecs = cypherCodecs;\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.data.cypherCodecs;\n}\n\nfunction selectPages(state) {\n  const codecs = select(state);\n  return codecs.map((codec) => codec.Cypher.page);\n}\n\nfunction selectByPage(state, page) {\n  const codecs = select(state);\n  return codecs.find((codec) => codec.Cypher.page === page);\n}\n","import { StateShard } from \"./utils\";\n\nconst Cyphers = StateShard(\"Cyphers\", init, { set }, { select, selectByPage });\n\nexport { Cyphers };\n\nfunction init(state) {\n  if (!state.data) {\n    state.data = {};\n  }\n\n  state.data.cyphers = {};\n}\n\n// Actions\n\nfunction set(state, { page, cypher }) {\n  const cyphers = select(state);\n  cyphers[page] = cypher;\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.data.cyphers;\n}\n\nfunction selectByPage(state, page) {\n  const cyphers = select(state);\n  return Object.values(cyphers)\n    .flat()\n    .find((cypher) => cypher.name.page === page);\n}\n","import { StateShard } from \"./utils\";\n\nconst Dragging = StateShard(\n  \"Dragging\",\n  init,\n  { activate, deactivate },\n  { select }\n);\n\nexport { Dragging };\n\nfunction init(state) {\n  if (!state.ui) {\n    state.ui = {};\n  }\n\n  state.ui.dragging = false;\n}\n\n// Actions\n\nfunction activate(state) {\n  state.ui.dragging = true;\n}\n\nfunction deactivate(state) {\n  state.ui.dragging = false;\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.ui.dragging;\n}\n","import { StateShard } from \"./utils\";\n\nconst FactionModels = StateShard(\n  \"FactionModels\",\n  init,\n  { set },\n  { select, selectModelPages, selectByPage }\n);\n\nexport { FactionModels };\n\nfunction init(state) {\n  if (!state.data) {\n    state.data = {};\n  }\n\n  state.data.factionModels = {};\n}\n\n// Actions\n\nfunction set(state, { page, factionModels }) {\n  const models = select(state);\n  if (!models[page]) {\n    models[page] = [];\n  }\n  models[page] = [...models[page], ...factionModels];\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.data.factionModels;\n}\n\nfunction selectModelPages(state) {\n  const models = select(state);\n  return Object.values(models)\n    .flat()\n    .map((model) => model.Name.page);\n}\n\nfunction selectByPage(state, page) {\n  const models = select(state);\n  return Object.values(models)\n    .flat()\n    .find((model) => model.Name.page === page);\n}\n","import { StateShard } from \"./utils\";\n\nconst Factions = StateShard(\"Factions\", init, { set }, { select, selectPages });\n\nexport { Factions };\n\nfunction init(state) {\n  if (!state.data) {\n    state.data = {};\n  }\n\n  state.data.factions = {};\n}\n\n// Actions\n\nfunction set(state, { factions }) {\n  state.data.factions = factions;\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.data.factions;\n}\n\nfunction selectPages(state) {\n  const factions = select(state);\n  return Object.keys(factions);\n}\n","import { StateShard } from \"./utils\";\n\nconst Lists = StateShard(\n  \"Lists\",\n  init,\n  {\n    addCard,\n    addEmptyList,\n    moveListBy,\n    removeCard,\n    removeList,\n    set,\n    setCardCortex,\n    setCardVehicleWeapon,\n    setCardWarjackWeapons,\n    setListTitle,\n    toggleCard,\n    moveCard,\n  },\n  { select }\n);\n\nconsole.log({ Lists });\n\nexport { Lists };\n\nconst oneEmptyList = [\n  {\n    title: \"Empty\",\n    cards: [],\n  },\n];\n\nfunction init(state) {\n  if (!state.ui) {\n    state.ui = {};\n  }\n\n  state.ui.lists = oneEmptyList;\n}\n\n// Actions\n\nfunction set(state, { lists }) {\n  state.ui.lists = lists.length > 0 ? lists : oneEmptyList;\n}\n\nfunction setListTitle(state, { listIndex, title }) {\n  const lists = select(state);\n  lists[listIndex].title = title;\n}\n\nfunction addCard(state, { pageId }) {\n  const lists = select(state);\n  const card = { pageId, hidden: true };\n  lists[0].cards.push(card);\n}\n\nfunction addEmptyList(state, { listIndex }) {\n  const lists = select(state);\n  lists.splice(listIndex, 0, oneEmptyList[0]);\n}\n\nfunction removeCard(state, { source }) {\n  const lists = select(state);\n  lists[source.listIndex].cards.splice(source.cardIndex, 1);\n}\n\nfunction removeList(state, { listIndex }) {\n  const lists = select(state);\n  lists.splice(listIndex, 1);\n  if (lists.length === 0) {\n    addEmptyList(state, { listIndex: 0 });\n  }\n}\n\nfunction moveListBy(state, { listIndex, by }) {\n  const lists = select(state);\n  if (\n    (by > 0 && listIndex + by < lists.length) ||\n    (by < 0 && listIndex + by >= 0)\n  ) {\n    const list = lists[listIndex];\n    lists.splice(listIndex, 1);\n    lists.splice(listIndex + by, 0, list);\n  }\n}\n\nfunction moveCard(state, { destination, source }) {\n  const lists = select(state);\n  const card = lists[source.listIndex].cards[source.cardIndex];\n  lists[source.listIndex].cards.splice(source.cardIndex, 1);\n  lists[destination.listIndex].cards.splice(destination.cardIndex, 0, card);\n}\n\nfunction toggleCard(state, { listIndex, cardIndex, pageId }) {\n  const lists = select(state);\n  const card = lists[listIndex].cards[cardIndex];\n  if (card.pageId === pageId) {\n    card.hidden = !card.hidden;\n  }\n}\n\nfunction setCardCortex(state, { listIndex, cardIndex, pageId, cortexIds }) {\n  const lists = select(state);\n  const card = lists[listIndex].cards[cardIndex];\n  if (card.pageId === pageId) {\n    card.cortexIds = cortexIds;\n  }\n}\n\nfunction setCardWarjackWeapons(\n  state,\n  { listIndex, cardIndex, hardpointNameIndex, pageId, warjackWeaponId }\n) {\n  const lists = select(state);\n  const card = lists[listIndex].cards[cardIndex];\n  if (card.pageId === pageId) {\n    if (!card.warjackWeaponIds) {\n      card.warjackWeaponIds = [];\n    }\n    card.warjackWeaponIds[hardpointNameIndex] = warjackWeaponId;\n  }\n}\n\nfunction setCardVehicleWeapon(\n  state,\n  { listIndex, cardIndex, pageId, vehicleWeaponId }\n) {\n  const lists = select(state);\n  const card = lists[listIndex].cards[cardIndex];\n  if (card.pageId === pageId) {\n    card.vehicleWeaponId = vehicleWeaponId;\n  }\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.ui.lists;\n}\n","import { StateShard } from \"./utils\";\n\nconst PageIds = StateShard(\n  \"PageIds\",\n  init,\n  { addPages },\n  { select, selectByPage, selectByPages, selectPageByPageId }\n);\n\nexport { PageIds };\n\nfunction init(state) {\n  if (!state.data) {\n    state.data = {};\n  }\n\n  state.data.pageIds = {};\n}\n\n// Actions\n\nfunction addPages(state, { pageIdByTitle }) {\n  const pageIds = select(state);\n  for (const title in pageIdByTitle) {\n    pageIds[title] = pageIdByTitle[title];\n  }\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.data.pageIds;\n}\n\nfunction selectByPage(state, page) {\n  const pageIds = select(state);\n  return pageIds[page];\n}\n\nfunction selectByPages(state, pages) {\n  const pageIds = select(state);\n  return pages.reduce((acc, page) => [...acc, pageIds[page]], []);\n}\n\nfunction selectPageByPageId(state, pageId) {\n  const pageIds = select(state);\n  return Object.entries(pageIds).reduce(\n    (acc, [page, statePageId]) =>\n      acc ? acc : statePageId === pageId ? page : acc,\n    undefined\n  );\n}\n","import { StateShard } from \"./utils\";\n\nconst Url = StateShard(\"Url\", init, { set }, { select });\n\nexport { Url };\n\nfunction init(state) {\n  if (!state.ui) {\n    state.ui = {};\n  }\n\n  state.ui.url = \"\";\n}\n\n// Actions\n\nfunction set(state, { url }) {\n  state.ui.url = url;\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.ui.url;\n}\n","import { StateShard } from \"./utils\";\n\nconst WildCardModels = StateShard(\n  \"WildCardModels\",\n  init,\n  { set },\n  { select, selectByPage, selectModelPages }\n);\n\nexport { WildCardModels };\n\nfunction init(state) {\n  if (!state.data) {\n    state.data = {};\n  }\n\n  state.data.wildCardModels = {};\n}\n\n// Actions\n\nfunction set(state, { wildCards }) {\n  const models = select(state);\n  for (const wildCard of wildCards) {\n    models[wildCard.faction] = wildCard.models;\n  }\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.data.wildCardModels;\n}\n\nfunction selectModelPages(state) {\n  const models = select(state);\n  return Object.values(models)\n    .flat()\n    .map((model) => model.Name.page);\n}\n\nfunction selectByPage(state, page) {\n  const models = select(state);\n  return Object.values(models)\n    .flat()\n    .find((model) => model.Name.page === page);\n}\n","import { StateShard } from \"./utils\";\n\nconst Models = StateShard(\"Models\", init, { set }, { select, selectByPage });\n\nexport { Models };\n\nfunction init(state) {\n  if (!state.data) {\n    state.data = {};\n  }\n\n  state.data.models = {};\n}\n\n// Actions\n\nfunction set(state, { page, model }) {\n  const models = select(state);\n  models[page] = model;\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.data.models;\n}\n\nfunction selectByPage(state, page) {\n  const models = select(state);\n  return Object.values(models)\n    .flat()\n    .find((model) => model.name.page === page);\n}\n","import \"./App.css\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  Badge,\n  Card,\n  Col,\n  Input,\n  Layout,\n  Menu,\n  Row,\n  Select,\n  Tooltip,\n} from \"antd\";\nimport {\n  DeleteOutlined,\n  DownSquareOutlined,\n  PlusSquareOutlined,\n  SyncOutlined,\n  UpSquareOutlined,\n} from \"@ant-design/icons\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport Aeternus_Continuum from \"./Aeternus_Continuum.png\";\nimport Cyphers from \"./Cyphers.png\";\nimport Empyrean from \"./Empyrean.png\";\nimport Iron_Star_Alliance from \"./Iron_Star_Alliance.png\";\nimport Lost_Legion from \"./Lost_Legion.png\";\nimport Marcher_Worlds from \"./Marcher_Worlds.png\";\nimport Wild_Card from \"./Wild_Card.png\";\nimport { CardDragEnded, CardDragStarted, MenuItemClicked } from \"../messages\";\nimport { AppSync } from \"../state/AppSync\";\nimport { CypherCodecs } from \"../state/CypherCodecs\";\nimport { Cyphers as Cyphers2 } from \"../state/Cyphers\";\nimport { Dragging } from \"../state/Dragging\";\nimport { FactionModels } from \"../state/FactionModels\";\nimport { Factions } from \"../state/Factions\";\nimport { Lists } from \"../state/Lists\";\nimport { PageIds } from \"../state/PageIds\";\nimport { Url } from \"../state/Url\";\nimport { WildCardModels } from \"../state/WildCardModels\";\nimport { Models } from \"../state/Models\";\n\nconst { Header, Footer, Content } = Layout;\nconst { TextArea } = Input;\nconst { SubMenu } = Menu;\n\nfunction FactionImage({ faction }) {\n  switch (faction) {\n    case \"Aeternus_Continuum\":\n      return <img src={Aeternus_Continuum} alt={faction} height=\"35px\" />;\n    case \"Empyrean\":\n      return <img src={Empyrean} alt={faction} height=\"35px\" />;\n    case \"Iron_Star_Alliance\":\n      return <img src={Iron_Star_Alliance} alt={faction} height=\"35px\" />;\n    case \"Lost_Legion\":\n      return <img src={Lost_Legion} alt={faction} height=\"35px\" />;\n    case \"Marcher_Worlds\":\n      return <img src={Marcher_Worlds} alt={faction} height=\"35px\" />;\n    case \"Wild_Card\":\n      return <img src={Wild_Card} alt={faction} height=\"35px\" />;\n    case \"Universal\":\n      return <img src={Cyphers} alt={faction} height=\"35px\" />;\n    default:\n      return <img src={Cyphers} alt={faction} height=\"35px\" />;\n  }\n}\n\nfunction AppPresentation({\n  initialized,\n  syncReasons,\n  factionModels,\n  wildCardModels,\n  cypherCodecs,\n  dragging,\n  menuItemClicked,\n  dragEnd,\n  dragStart,\n  lists,\n  toggleCard,\n  removeList,\n  addEmptyList,\n  moveListBy,\n  setListTitle,\n  setUrl,\n  url,\n  bookmark,\n  open,\n  setCardCortex,\n  setCardWarjackWeapons,\n  setCardVehicleWeapon,\n}) {\n  const rootSubmenuKeys = [\n    ...[...factionModels, ...Object.entries(wildCardModels)].map(\n      (_, i) => `sub${i}`\n    ),\n    \"cypher_codecs\",\n  ];\n\n  const [openKeys, setOpenKeys] = React.useState([\"sub0\"]);\n\n  const onOpenChange = (keys) => {\n    const latestOpenKey = keys.find((key) => openKeys.indexOf(key) === -1);\n    if (rootSubmenuKeys.indexOf(latestOpenKey) === -1) {\n      setOpenKeys(keys);\n    } else {\n      setOpenKeys(latestOpenKey ? [latestOpenKey] : []);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Layout>\n        <Layout>\n          <DragDropContext onDragStart={dragStart} onDragEnd={dragEnd}>\n            <Header>\n              <Droppable key={\"trash_header\"} droppableId={\"trash_header\"}>\n                {(provided) => (\n                  <div ref={provided.innerRef} {...provided.droppableProps}>\n                    {dragging ? (\n                      <div\n                        style={{\n                          animation:\n                            \"shake 0.82s cubic-bezier(.36,.07,.19,.97) both\",\n                          color: \"white\",\n                        }}\n                      >\n                        <DeleteOutlined />\n                      </div>\n                    ) : (\n                      <a className=\"logo\" href=\"/\">\n                        WARFASTER\n                      </a>\n                    )}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n            </Header>\n            {!initialized ? (\n              <Content>\n                <Layout>\n                  <Row>\n                    <Col xs={24} sm={12} md={12} lg={12} xl={8} xxl={8}>\n                      <div className=\"cards\" key=\"cards0\">\n                        <div style={{ cursor: \"pointer\" }} className=\"header\">\n                          <Row>\n                            <Col span={16} className=\"army-list-title\">\n                              <TextArea\n                                value={\"Setting up Warfaster\"}\n                                maxLength={30}\n                                autoSize\n                              />\n                            </Col>\n                            <Col span={8} className=\"faction-icons\">\n                              <SyncOutlined\n                                spin\n                                style={{\n                                  color: \"#d1c5b1\",\n                                  fontSize: \"23px\",\n                                  margin: \"3px 10px 0 0\",\n                                }}\n                              />\n                            </Col>\n                          </Row>\n                        </div>\n\n                        <div>\n                          {syncReasons.map(({ reason, description }, index) => (\n                            <div className=\"body\" key={`reason${index}`}>\n                              <Card hoverable className=\"card\">\n                                <Card.Meta\n                                  avatar={\n                                    <div\n                                      style={{\n                                        height: \"25px\",\n                                        width: \"35px\",\n                                        textAlign: \"center\",\n                                      }}\n                                    >\n                                      <SyncOutlined\n                                        spin\n                                        style={{\n                                          color: \"#d1c5b1\",\n                                          fontSize: \"35px\",\n                                        }}\n                                      />\n                                    </div>\n                                  }\n                                  title={\n                                    <>\n                                      <div>{reason}</div>\n                                      <div className=\"card-type\">\n                                        {description}\n                                      </div>\n                                    </>\n                                  }\n                                />\n                              </Card>\n                            </div>\n                          ))}\n                        </div>\n                        <div className=\"footer\">\n                          <Badge\n                            size=\"small\"\n                            key=\"_badge\"\n                            count={syncReasons.length}\n                            offset={[10, 5]}\n                          >\n                            Loading:\n                          </Badge>\n                        </div>\n                      </div>\n                    </Col>\n                  </Row>\n                </Layout>\n              </Content>\n            ) : (\n              <>\n                <Content>\n                  <Menu\n                    id=\"factions\"\n                    openKeys={openKeys}\n                    onOpenChange={onOpenChange}\n                    mode=\"horizontal\"\n                    triggerSubMenuAction=\"click\"\n                  >\n                    {factionModels.map(([factionName, faction, models]) => (\n                      <SubMenu\n                        key={faction}\n                        icon={<FactionImage faction={faction} />}\n                      >\n                        <Menu.ItemGroup title={factionName}>\n                          {models.map(({ name, page, type, subtype }) => {\n                            const shortName = name.slice(0, 40);\n\n                            return (\n                              <Menu.Item\n                                key={faction + \":\" + page}\n                                className={faction}\n                              >\n                                <span onClick={menuItemClicked(page)}>\n                                  <span className=\"card\">\n                                    {shortName.length === name.length ? (\n                                      shortName\n                                    ) : (\n                                      <Tooltip placement=\"top\" title={name}>\n                                        {shortName}...\n                                      </Tooltip>\n                                    )}\n                                  </span>\n                                  <span className=\"types\">\n                                    {subtype ? subtype : \"\"}\n                                    {type ? (subtype ? \" \" : \"\") + type : \"\"}\n                                  </span>\n                                </span>\n                              </Menu.Item>\n                            );\n                          })}\n                        </Menu.ItemGroup>\n                        <Menu.ItemGroup title={`${factionName} Wild Cards`}>\n                          {(wildCardModels[faction] || [])\n                            .sort((w1, w2) => (w1.type < w2.type ? -1 : 1))\n                            .map(({ name, page, type, subtype }, j) => {\n                              const shortName = name.slice(0, 40);\n\n                              return (\n                                <Menu.Item key={faction + \":\" + page}>\n                                  <span onClick={menuItemClicked(page)}>\n                                    <span className=\"card\">\n                                      {shortName.length === name.length ? (\n                                        shortName\n                                      ) : (\n                                        <Tooltip placement=\"top\" title={name}>\n                                          {shortName}...\n                                        </Tooltip>\n                                      )}\n                                    </span>\n                                    <span className=\"types\">\n                                      {subtype ? subtype : \"\"}\n                                      {type ? (subtype ? \" \" : \"\") + type : \"\"}\n                                    </span>\n                                  </span>\n                                </Menu.Item>\n                              );\n                            })}\n                        </Menu.ItemGroup>\n                      </SubMenu>\n                    ))}\n                    <SubMenu\n                      key=\"cypher_codecs\"\n                      icon={<FactionImage faction=\"Cyphers\" />}\n                    >\n                      {Object.entries(\n                        cypherCodecs.reduce(\n                          (acc, cypher) => ({\n                            ...acc,\n                            [cypher.Faction.text]: [\n                              ...(acc[cypher.Faction.text] || []),\n                              cypher,\n                            ],\n                          }),\n                          {}\n                        )\n                      )\n                        .sort()\n                        .map(([faction, cyphers]) => (\n                          <Menu.ItemGroup\n                            title={`${faction} Cyphers`}\n                            key={faction}\n                          >\n                            {cyphers\n                              .sort((c1, c2) =>\n                                c1.Type.text < c2.Type.text ? -1 : 1\n                              )\n                              .map(({ Cypher, Type }) => (\n                                <Menu.Item\n                                  key={\":\" + Cypher.page}\n                                  className={Type.text}\n                                >\n                                  <span onClick={menuItemClicked(Cypher.page)}>\n                                    <span className=\"card\">{Cypher.text}</span>\n                                    <span className=\"types\">{Type.text}</span>\n                                  </span>\n                                </Menu.Item>\n                              ))}\n                          </Menu.ItemGroup>\n                        ))}\n                    </SubMenu>\n                  </Menu>\n                </Content>\n                <Content>\n                  <Layout>\n                    <Row gutter={16}>\n                      {lists.map(({ title, cards }, listIndex) => (\n                        <Col\n                          key={`lists_col_${listIndex}`}\n                          xs={24}\n                          sm={12}\n                          md={12}\n                          lg={12}\n                          xl={8}\n                          xxl={8}\n                        >\n                          <div className=\"cards\" key={`cards${listIndex}`}>\n                            <Tooltip\n                              placement=\"top\"\n                              color=\"transparent\"\n                              trigger=\"click\"\n                              align={{ offset: [0, 17] }}\n                              title={\n                                <div className=\"ant-tooltip-inner-box\">\n                                  <div\n                                    onClick={removeList(listIndex)}\n                                    style={{\n                                      cursor: \"pointer\",\n                                      display: \"inline-block\",\n                                      paddingRight: \"4px\",\n                                      fontSize: \"1.5em\",\n                                    }}\n                                  >\n                                    <DeleteOutlined />\n                                  </div>\n                                  <div\n                                    onClick={addEmptyList(listIndex)}\n                                    style={{\n                                      cursor: \"pointer\",\n                                      display: \"inline-block\",\n                                      padding: \"0 4px\",\n                                      fontSize: \"1.5em\",\n                                    }}\n                                  >\n                                    <PlusSquareOutlined />\n                                  </div>\n                                  <div\n                                    onClick={moveListBy(listIndex, -1)}\n                                    style={{\n                                      cursor: \"pointer\",\n                                      display: \"inline-block\",\n                                      padding: \"0 4px\",\n                                      fontSize: \"1.5em\",\n                                    }}\n                                  >\n                                    <UpSquareOutlined />\n                                  </div>\n                                  <div\n                                    onClick={moveListBy(listIndex, 1)}\n                                    style={{\n                                      cursor: \"pointer\",\n                                      display: \"inline-block\",\n                                      paddingLeft: \"4px\",\n                                      fontSize: \"1.5em\",\n                                    }}\n                                  >\n                                    <DownSquareOutlined />\n                                  </div>\n                                </div>\n                              }\n                            >\n                              <div\n                                style={{ cursor: \"pointer\" }}\n                                className=\"header\"\n                              >\n                                <Row>\n                                  <Col span={16} className=\"army-list-title\">\n                                    <TextArea\n                                      placeholder=\"Name your list\"\n                                      value={title}\n                                      maxLength={30}\n                                      autoSize\n                                      onChange={setListTitle(listIndex)}\n                                    />\n                                  </Col>\n                                  <Col span={8} className=\"faction-icons\">\n                                    {Object.entries(\n                                      cards.reduce(\n                                        (acc, card) => ({\n                                          ...acc,\n                                          ...(card.faction\n                                            ? {\n                                                [card.faction]:\n                                                  (acc[card.faction] || 0) + 1,\n                                              }\n                                            : {\n                                                Universal:\n                                                  (acc.Universal || 0) + 1,\n                                              }),\n                                        }),\n                                        {}\n                                      )\n                                    )\n                                      .sort()\n                                      .map(([faction, count], i) => (\n                                        <Badge\n                                          size=\"small\"\n                                          key={`badge${i}`}\n                                          count={count}\n                                          offset={[0, 10]}\n                                        >\n                                          <FactionImage faction={faction} />\n                                        </Badge>\n                                      ))}\n                                  </Col>\n                                </Row>\n                              </div>\n                            </Tooltip>\n\n                            <Droppable\n                              key={`cards_${listIndex}`}\n                              droppableId={`cards_${listIndex}`}\n                            >\n                              {(provided) => (\n                                <div\n                                  ref={provided.innerRef}\n                                  {...provided.droppableProps}\n                                >\n                                  {cards.map(\n                                    (\n                                      {\n                                        card,\n                                        hidden,\n                                        type,\n                                        title,\n                                        page,\n                                        pageId,\n                                        cortexIds,\n                                        vehicleWeaponId,\n                                        warjackWeaponIds,\n                                        subtype,\n                                        faction,\n                                        details,\n                                      },\n                                      cardIndex\n                                    ) => (\n                                      <Draggable\n                                        key={`${page}_${listIndex}_${cardIndex}`}\n                                        draggableId={`${page}_${listIndex}_${cardIndex}`}\n                                        index={cardIndex}\n                                      >\n                                        {(provided) => (\n                                          <div\n                                            className=\"body\"\n                                            ref={provided.innerRef}\n                                            {...provided.draggableProps}\n                                            {...provided.dragHandleProps}\n                                          >\n                                            <Card\n                                              hoverable\n                                              className={[\n                                                \"card\",\n                                                faction,\n                                                type,\n                                              ]}\n                                              onClick={toggleCard(\n                                                listIndex,\n                                                cardIndex,\n                                                pageId,\n                                                card\n                                              )}\n                                            >\n                                              <Card.Meta\n                                                avatar={\n                                                  faction ? (\n                                                    <div\n                                                      style={{\n                                                        height: \"25px\",\n                                                        width: \"35px\",\n                                                        textAlign: \"center\",\n                                                      }}\n                                                    >\n                                                      <FactionImage\n                                                        faction={faction}\n                                                      />\n                                                    </div>\n                                                  ) : (\n                                                    <FactionImage faction=\"Universal\" />\n                                                  )\n                                                }\n                                                title={\n                                                  <>\n                                                    <div>{title}</div>\n                                                    <div className=\"card-type\">\n                                                      {(faction || \"\").replace(\n                                                        /_/g,\n                                                        \" \"\n                                                      )}\n                                                      {subtype\n                                                        ? \" \" + subtype\n                                                        : \"\"}\n                                                      {type ? \" \" + type : \"\"}\n                                                    </div>\n                                                    <div>\n                                                      <span className=\"subtitle\">\n                                                        {[\n                                                          ...(!details ||\n                                                          !details.vehicleWeaponSelection ||\n                                                          !vehicleWeaponName(\n                                                            details.vehicleWeaponSelection,\n                                                            vehicleWeaponId\n                                                          )\n                                                            ? []\n                                                            : [\n                                                                vehicleWeaponName(\n                                                                  details.vehicleWeaponSelection,\n                                                                  vehicleWeaponId\n                                                                ),\n                                                              ]),\n                                                          ...(!details ||\n                                                          !details.cortexSelections ||\n                                                          !cortexName(\n                                                            details.cortexSelections,\n                                                            cortexIds\n                                                          )\n                                                            ? []\n                                                            : [\n                                                                cortexName(\n                                                                  details.cortexSelections,\n                                                                  cortexIds\n                                                                ),\n                                                              ]),\n                                                          ...(!details ||\n                                                          !details.warjackWeaponSelections ||\n                                                          !warjackWeaponIds ||\n                                                          warjackWeaponIds.length ===\n                                                            0\n                                                            ? []\n                                                            : warjackWeaponNamesSubtitle(\n                                                                details.warjackWeaponSelections,\n                                                                warjackWeaponIds\n                                                              )),\n                                                        ].join(\", \")}\n                                                      </span>\n                                                    </div>\n                                                  </>\n                                                }\n                                              />\n                                              {hidden ? (\n                                                <></>\n                                              ) : !details ? (\n                                                <div\n                                                  style={{\n                                                    margin: \"10px 0\",\n                                                    textAlign: \"center\",\n                                                  }}\n                                                >\n                                                  <SyncOutlined\n                                                    spin\n                                                    style={{ fontSize: \"23px\" }}\n                                                  />\n                                                </div>\n                                              ) : (\n                                                <div className=\"card-content\">\n                                                  {!details.pow ? (\n                                                    <></>\n                                                  ) : (\n                                                    <p>\n                                                      Pow: {details.pow.text}\n                                                    </p>\n                                                  )}\n                                                  {!details.effect ||\n                                                  details.effect.length ===\n                                                    0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    details.effect.map(\n                                                      (effect, index) => (\n                                                        <p\n                                                          key={`effect_${index}`}\n                                                        >\n                                                          {effect}\n                                                        </p>\n                                                      )\n                                                    )\n                                                  )}\n                                                  {!details.squadSize ? (\n                                                    <></>\n                                                  ) : (\n                                                    <dl>\n                                                      <dt>Squad Size</dt>\n                                                      <dd>\n                                                        {details.squadSize}\n                                                      </dd>\n                                                    </dl>\n                                                  )}\n                                                  {!details.deploymentCost ? (\n                                                    <></>\n                                                  ) : (\n                                                    <dl>\n                                                      <dt>DC</dt>\n                                                      <dd>\n                                                        {details.deploymentCost}\n                                                      </dd>\n                                                    </dl>\n                                                  )}\n                                                  {!details.baseSize ? (\n                                                    <></>\n                                                  ) : (\n                                                    <dl>\n                                                      <dt>Base Size</dt>\n                                                      <dd>\n                                                        {details.baseSize}\n                                                      </dd>\n                                                    </dl>\n                                                  )}\n                                                  {!details.health ? (\n                                                    <></>\n                                                  ) : (\n                                                    <dl>\n                                                      <dt>Health</dt>\n                                                      <dd>{details.health}</dd>\n                                                    </dl>\n                                                  )}\n                                                  {!details.wildCardFactions ||\n                                                  Object.values(\n                                                    details.wildCardFactions\n                                                  ).length === 0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>Wild Card Factions</p>\n                                                      <ul>\n                                                        {Object.values(\n                                                          details.wildCardFactions\n                                                        ).map(\n                                                          ({ text }, index) => (\n                                                            <li\n                                                              key={`wild_card_faction_${index}`}\n                                                            >\n                                                              {text}\n                                                            </li>\n                                                          )\n                                                        )}\n                                                      </ul>\n                                                    </>\n                                                  )}\n                                                  {!details.hardpoints ? (\n                                                    <></>\n                                                  ) : (\n                                                    <dl>\n                                                      <dt>Hardpoints</dt>\n                                                      <dd>\n                                                        {details.hardpoints}\n                                                      </dd>\n                                                    </dl>\n                                                  )}\n                                                  {!details.weaponPoints ? (\n                                                    <></>\n                                                  ) : (\n                                                    <dl>\n                                                      <dt>Weapon Points</dt>\n                                                      <dd>\n                                                        {details.weaponPoints}\n                                                      </dd>\n                                                    </dl>\n                                                  )}\n                                                  {!details.modelStats ||\n                                                  Object.keys(\n                                                    details.modelStats\n                                                  ).length === 0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    <table>\n                                                      <thead>\n                                                        <tr>\n                                                          {Object.keys(\n                                                            details.modelStats\n                                                          ).map(\n                                                            (name, index) => (\n                                                              <th\n                                                                key={`${name}_stat_${index}`}\n                                                              >\n                                                                {name}\n                                                              </th>\n                                                            )\n                                                          )}\n                                                        </tr>\n                                                      </thead>\n                                                      <tbody>\n                                                        <tr>\n                                                          {Object.entries(\n                                                            details.modelStats\n                                                          ).map(\n                                                            (\n                                                              [name, stat],\n                                                              index\n                                                            ) => (\n                                                              <td\n                                                                key={`${name}_stat_value_${index}`}\n                                                              >\n                                                                {stat}\n                                                              </td>\n                                                            )\n                                                          )}\n                                                        </tr>\n                                                      </tbody>\n                                                    </table>\n                                                  )}\n                                                  {!details.specialRules ||\n                                                  Object.entries(\n                                                    details.specialRules\n                                                  ).length === 0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>Special Rules</p>\n                                                      <dl>\n                                                        {Object.entries(\n                                                          details.specialRules\n                                                        ).map(\n                                                          (\n                                                            [name, text],\n                                                            index\n                                                          ) => (\n                                                            <React.Fragment\n                                                              key={`special_rules_${index}`}\n                                                            >\n                                                              <dt>{name}</dt>\n                                                              <dd>{text}</dd>\n                                                            </React.Fragment>\n                                                          )\n                                                        )}\n                                                      </dl>\n                                                    </>\n                                                  )}\n                                                  {!details.weapons ||\n                                                  details.weapons.length ===\n                                                    0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>Weapons</p>\n                                                      <table>\n                                                        <thead>\n                                                          <tr>\n                                                            <th>Name</th>\n                                                            <th>Attack Type</th>\n                                                            <th>Damage Type</th>\n                                                            <th>Range</th>\n                                                            <th>POW</th>\n                                                          </tr>\n                                                        </thead>\n                                                        <tbody>\n                                                          {details.weapons.map(\n                                                            (weapon, index) => (\n                                                              <React.Fragment\n                                                                key={`weapon_number_${index}`}\n                                                              >\n                                                                <tr>\n                                                                  <td>\n                                                                    {\n                                                                      weapon[\n                                                                        \"Name\"\n                                                                      ]\n                                                                    }\n                                                                  </td>\n                                                                  <td>\n                                                                    {\n                                                                      weapon[\n                                                                        \"Attack Type\"\n                                                                      ]\n                                                                    }\n                                                                  </td>\n                                                                  <td>\n                                                                    {\n                                                                      weapon[\n                                                                        \"Damage Type\"\n                                                                      ]\n                                                                    }\n                                                                  </td>\n                                                                  <td>\n                                                                    {\n                                                                      weapon[\n                                                                        \"Range\"\n                                                                      ]\n                                                                    }\n                                                                  </td>\n                                                                  <td>\n                                                                    {\n                                                                      weapon[\n                                                                        \"POW\"\n                                                                      ]\n                                                                    }\n                                                                  </td>\n                                                                </tr>\n                                                                {!weapon.specialRules ? (\n                                                                  <></>\n                                                                ) : (\n                                                                  Object.entries(\n                                                                    weapon.specialRules\n                                                                  ).map(\n                                                                    (\n                                                                      [\n                                                                        rule,\n                                                                        text,\n                                                                      ],\n                                                                      ruleIndex\n                                                                    ) => (\n                                                                      <tr\n                                                                        key={`weapon_number_${index}_rule_${ruleIndex}`}\n                                                                      >\n                                                                        <td colSpan=\"5\">\n                                                                          <dl>\n                                                                            <dt>\n                                                                              {\n                                                                                rule\n                                                                              }\n                                                                            </dt>\n                                                                            <dd>\n                                                                              {\n                                                                                text\n                                                                              }\n                                                                            </dd>\n                                                                          </dl>\n                                                                        </td>\n                                                                      </tr>\n                                                                    )\n                                                                  )\n                                                                )}\n                                                              </React.Fragment>\n                                                            )\n                                                          )}\n                                                        </tbody>\n                                                      </table>\n                                                    </>\n                                                  )}\n                                                  {!details.advantages ||\n                                                  Object.entries(\n                                                    details.advantages\n                                                  ).length === 0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>Advantages</p>\n                                                      <dl>\n                                                        {Object.entries(\n                                                          details.advantages\n                                                        ).map(\n                                                          (\n                                                            [name, text],\n                                                            index\n                                                          ) => (\n                                                            <React.Fragment\n                                                              key={`advantage_${index}`}\n                                                            >\n                                                              <dt>{name}</dt>\n                                                              <dd>{text}</dd>\n                                                            </React.Fragment>\n                                                          )\n                                                        )}\n                                                      </dl>\n                                                    </>\n                                                  )}\n                                                  {!details.maneuvers ||\n                                                  Object.values(\n                                                    details.maneuvers\n                                                  ).length === 0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>Maneuvers</p>\n                                                      <dl>\n                                                        {Object.entries(\n                                                          details.maneuvers\n                                                        ).map(\n                                                          (\n                                                            [name, text],\n                                                            index\n                                                          ) => (\n                                                            <React.Fragment\n                                                              key={`advantage_${index}`}\n                                                            >\n                                                              <dt>{name}</dt>\n                                                              <dd>{text}</dd>\n                                                            </React.Fragment>\n                                                          )\n                                                        )}\n                                                      </dl>\n                                                    </>\n                                                  )}\n\n                                                  {!details.vehicleWeaponSelection ||\n                                                  details.vehicleWeaponSelection\n                                                    .length === 0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>\n                                                        Vehicle Weapon\n                                                        Selections\n                                                      </p>\n                                                      <Select\n                                                        defaultValue={\n                                                          <span\n                                                            style={{\n                                                              color: \"gray\",\n                                                              fontStyle:\n                                                                \"italic\",\n                                                            }}\n                                                          >\n                                                            Vehicle Weapon\n                                                          </span>\n                                                        }\n                                                        onClick={(event) =>\n                                                          event.stopPropagation()\n                                                        }\n                                                        onSelect={setCardVehicleWeapon(\n                                                          listIndex,\n                                                          cardIndex,\n                                                          pageId\n                                                        )}\n                                                        value={\n                                                          !vehicleWeaponId\n                                                            ? undefined\n                                                            : vehicleWeaponName(\n                                                                details.vehicleWeaponSelection,\n                                                                vehicleWeaponId\n                                                              )\n                                                        }\n                                                      >\n                                                        {details.vehicleWeaponSelection.map(\n                                                          (\n                                                            { text, pageId },\n                                                            index\n                                                          ) => (\n                                                            <Select.Option\n                                                              key={`vehicle_weapon_${index}`}\n                                                              label={pageId}\n                                                              value={text}\n                                                              onClick={(\n                                                                event\n                                                              ) =>\n                                                                event.stopPropagation()\n                                                              }\n                                                            >\n                                                              {text}\n                                                              {\n                                                                // TODO\n                                                              }\n                                                            </Select.Option>\n                                                          )\n                                                        )}\n                                                      </Select>\n                                                    </>\n                                                  )}\n\n                                                  {!details.vehicleWeaponSelection ||\n                                                  Object.values(\n                                                    details.vehicleWeaponSelection\n                                                  ).length === 0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>\n                                                        Vehicle Weapon Selection\n                                                      </p>\n                                                      <ol>\n                                                        {Object.values(\n                                                          details.vehicleWeaponSelection\n                                                        ).map(\n                                                          (\n                                                            { text, page },\n                                                            index\n                                                          ) => (\n                                                            <li\n                                                              key={`weapon_selection_${index}`}\n                                                            >\n                                                              <a href={page}>\n                                                                {text}\n                                                              </a>\n                                                            </li>\n                                                          )\n                                                        )}\n                                                      </ol>\n                                                    </>\n                                                  )}\n                                                  {!details.cortexes ||\n                                                  Object.entries(\n                                                    details.cortexes\n                                                  ).length === 0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>Cortex</p>\n                                                      <ol>\n                                                        {Object.entries(\n                                                          details.cortexes\n                                                        ).map(\n                                                          (\n                                                            [\n                                                              cortex,\n                                                              advantages,\n                                                            ],\n                                                            index\n                                                          ) => (\n                                                            <li\n                                                              key={`cortex_${index}`}\n                                                            >\n                                                              {cortex}\n                                                              <dl>\n                                                                {Object.entries(\n                                                                  advantages\n                                                                ).map(\n                                                                  (\n                                                                    [\n                                                                      name,\n                                                                      text,\n                                                                    ],\n                                                                    advantageIndex\n                                                                  ) => (\n                                                                    <React.Fragment\n                                                                      key={`cortex_${index}_advantage_${advantageIndex}`}\n                                                                    >\n                                                                      <dt>\n                                                                        {name}\n                                                                      </dt>\n                                                                      <dd>\n                                                                        {text}\n                                                                      </dd>\n                                                                    </React.Fragment>\n                                                                  )\n                                                                )}\n                                                              </dl>\n                                                            </li>\n                                                          )\n                                                        )}\n                                                      </ol>\n                                                    </>\n                                                  )}\n                                                  {!details.cortexSelections ||\n                                                  Object.entries(\n                                                    details.cortexSelections\n                                                  ).length === 0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>Cortex Selections</p>\n                                                      <Select\n                                                        defaultValue={\n                                                          <span\n                                                            style={{\n                                                              color: \"gray\",\n                                                              fontStyle:\n                                                                \"italic\",\n                                                            }}\n                                                          >\n                                                            Cortex\n                                                          </span>\n                                                        }\n                                                        onClick={(event) =>\n                                                          event.stopPropagation()\n                                                        }\n                                                        onSelect={setCardCortex(\n                                                          listIndex,\n                                                          cardIndex,\n                                                          pageId\n                                                        )}\n                                                        value={\n                                                          !cortexIds\n                                                            ? undefined\n                                                            : cortexName(\n                                                                details.cortexSelections,\n                                                                cortexIds\n                                                              )\n                                                        }\n                                                      >\n                                                        {Object.entries(\n                                                          details.cortexSelections\n                                                        ).map(\n                                                          (\n                                                            [\n                                                              cortex,\n                                                              advantages,\n                                                            ],\n                                                            index\n                                                          ) => (\n                                                            <Select.Option\n                                                              key={`cortex_${index}`}\n                                                              label={Object.values(\n                                                                advantages\n                                                              ).map(\n                                                                ({\n                                                                  categoryId,\n                                                                }) => categoryId\n                                                              )}\n                                                              value={cortex}\n                                                              onClick={(\n                                                                event\n                                                              ) =>\n                                                                event.stopPropagation()\n                                                              }\n                                                            >\n                                                              {cortex}\n                                                              <dl>\n                                                                {Object.entries(\n                                                                  advantages\n                                                                ).map(\n                                                                  (\n                                                                    [\n                                                                      name,\n                                                                      { text },\n                                                                    ],\n                                                                    advantageIndex\n                                                                  ) => (\n                                                                    <React.Fragment\n                                                                      key={`cortex_${index}_advantage_${advantageIndex}`}\n                                                                    >\n                                                                      <dt>\n                                                                        {name}\n                                                                      </dt>\n                                                                      <dd>\n                                                                        {text}\n                                                                      </dd>\n                                                                    </React.Fragment>\n                                                                  )\n                                                                )}\n                                                              </dl>\n                                                            </Select.Option>\n                                                          )\n                                                        )}\n                                                      </Select>\n                                                    </>\n                                                  )}\n                                                  {!details.chassisSpecialRules ||\n                                                  Object.entries(\n                                                    details.chassisSpecialRules\n                                                  ).length === 0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>\n                                                        Chassis Special Rules\n                                                      </p>\n                                                      <dl>\n                                                        {Object.entries(\n                                                          details.chassisSpecialRules\n                                                        ).map(\n                                                          (\n                                                            [name, text],\n                                                            index\n                                                          ) => (\n                                                            <React.Fragment\n                                                              key={`advantage_${index}`}\n                                                            >\n                                                              <dt>{name}</dt>\n                                                              <dd>{text}</dd>\n                                                            </React.Fragment>\n                                                          )\n                                                        )}\n                                                      </dl>\n                                                    </>\n                                                  )}\n                                                  {!details.hardpointNames ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>\n                                                        Warjack Weapon\n                                                        Selections\n                                                      </p>\n                                                      {details.hardpointNames.map(\n                                                        (\n                                                          hardpointName,\n                                                          hardpointNameIndex\n                                                        ) =>\n                                                          !details.warjackWeaponSelections ||\n                                                          Object.keys(\n                                                            details.warjackWeaponSelections\n                                                          ).length === 0 ? (\n                                                            <></>\n                                                          ) : (\n                                                            <div\n                                                              key={`warjack_weapon_${hardpointNameIndex}`}\n                                                            >\n                                                              <Select\n                                                                defaultValue={\n                                                                  <span\n                                                                    style={{\n                                                                      color:\n                                                                        \"gray\",\n                                                                      fontStyle:\n                                                                        \"italic\",\n                                                                    }}\n                                                                  >\n                                                                    {\n                                                                      hardpointName\n                                                                    }\n                                                                  </span>\n                                                                }\n                                                                onClick={(\n                                                                  event\n                                                                ) =>\n                                                                  event.stopPropagation()\n                                                                }\n                                                                onSelect={setCardWarjackWeapons(\n                                                                  listIndex,\n                                                                  cardIndex,\n                                                                  hardpointNameIndex,\n                                                                  pageId\n                                                                )}\n                                                                value={\n                                                                  !warjackWeaponIds ||\n                                                                  !warjackWeaponIds[\n                                                                    hardpointNameIndex\n                                                                  ]\n                                                                    ? undefined\n                                                                    : warjackWeaponNames(\n                                                                        details.warjackWeaponSelections,\n                                                                        warjackWeaponIds[\n                                                                          hardpointNameIndex\n                                                                        ]\n                                                                      )\n                                                                }\n                                                              >\n                                                                {Object.values(\n                                                                  details.warjackWeaponSelections\n                                                                )\n                                                                  .filter(\n                                                                    ({\n                                                                      location,\n                                                                    }) =>\n                                                                      location ===\n                                                                      hardpointName\n                                                                  )\n                                                                  .map(\n                                                                    (\n                                                                      {\n                                                                        name,\n                                                                        page,\n                                                                        pageId,\n                                                                        cost,\n                                                                        location,\n                                                                      },\n                                                                      index\n                                                                    ) => (\n                                                                      <Select.Option\n                                                                        key={`warjack_weapon_${hardpointNameIndex}_${index}`}\n                                                                        label={\n                                                                          pageId\n                                                                        }\n                                                                        value={\n                                                                          name\n                                                                        }\n                                                                        onClick={(\n                                                                          event\n                                                                        ) =>\n                                                                          event.stopPropagation()\n                                                                        }\n                                                                      >\n                                                                        {warjackWeaponName(\n                                                                          name,\n                                                                          cost\n                                                                        )}\n                                                                        <div>\n                                                                          Weapon\n                                                                          details!\n                                                                        </div>\n                                                                        {\n                                                                          // TODO\n                                                                        }\n                                                                      </Select.Option>\n                                                                    )\n                                                                  )}\n                                                              </Select>\n                                                            </div>\n                                                          )\n                                                      )}\n                                                    </>\n                                                  )}\n                                                  {!details.weaponDetails ||\n                                                  details.weaponDetails\n                                                    .length === 0 ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>Weapon Details</p>\n                                                      <table>\n                                                        <thead>\n                                                          <tr>\n                                                            <th>Weapon</th>\n                                                            <th>Location</th>\n                                                            <th>Cost</th>\n                                                            <th>Weapon Pack</th>\n                                                          </tr>\n                                                        </thead>\n                                                        <tbody>\n                                                          {details.weaponDetails.map(\n                                                            (weapon, index) => (\n                                                              <React.Fragment\n                                                                key={`weapon_details_number_${index}`}\n                                                              >\n                                                                <tr>\n                                                                  <td>\n                                                                    {\n                                                                      weapon[\n                                                                        \"Weapon\"\n                                                                      ].text\n                                                                    }\n                                                                  </td>\n                                                                  <td>\n                                                                    {\n                                                                      weapon[\n                                                                        \"Location\"\n                                                                      ].text\n                                                                    }\n                                                                  </td>\n                                                                  <td>\n                                                                    {\n                                                                      weapon[\n                                                                        \"Cost\"\n                                                                      ].text\n                                                                    }\n                                                                  </td>\n                                                                  <td>\n                                                                    {\n                                                                      weapon[\n                                                                        \"Weapon Pack\"\n                                                                      ].text\n                                                                    }\n                                                                  </td>\n                                                                </tr>\n                                                              </React.Fragment>\n                                                            )\n                                                          )}\n                                                        </tbody>\n                                                      </table>\n                                                    </>\n                                                  )}\n                                                  {!details.release ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>Release</p>\n                                                      <p>{details.release}</p>\n                                                    </>\n                                                  )}\n                                                  {!details.lore ? (\n                                                    <></>\n                                                  ) : (\n                                                    <>\n                                                      <p>Lore</p>\n                                                      <p>{details.lore}</p>\n                                                    </>\n                                                  )}\n                                                </div>\n                                              )}\n                                            </Card>\n                                          </div>\n                                        )}\n                                      </Draggable>\n                                    )\n                                  )}\n                                  {provided.placeholder}\n                                </div>\n                              )}\n                            </Droppable>\n\n                            {cards.length > 0 ? (\n                              <div className=\"footer\">\n                                <Badge\n                                  size=\"small\"\n                                  key=\"_badge\"\n                                  count={cards.length}\n                                  offset={[10, 5]}\n                                >\n                                  Card:\n                                </Badge>\n                                {Object.entries(\n                                  cards.reduce(\n                                    (acc, card) => ({\n                                      ...acc,\n                                      [card.type]: (acc[card.type] || 0) + 1,\n                                    }),\n                                    {}\n                                  )\n                                )\n                                  .sort()\n                                  .map(([type, count], i) => (\n                                    <Badge\n                                      size=\"small\"\n                                      key={`badge${i}`}\n                                      count={count}\n                                      offset={[10, 5]}\n                                    >\n                                      {type}:\n                                    </Badge>\n                                  ))}\n                              </div>\n                            ) : (\n                              <></>\n                            )}\n                          </div>\n                        </Col>\n                      ))}\n                    </Row>\n                  </Layout>\n                </Content>\n              </>\n            )}\n            <Droppable key={\"trash_footer\"} droppableId={\"trash_footer\"}>\n              {(provided) => (\n                <div ref={provided.innerRef} {...provided.droppableProps}>\n                  {dragging ? (\n                    <>\n                      <div className=\"trash-footer\">\n                        <div\n                          style={{\n                            animation:\n                              \"shake 0.82s cubic-bezier(.36,.07,.19,.97) both\",\n                            color: \"white\",\n                          }}\n                        >\n                          <DeleteOutlined />\n                          <div style={{ display: \"none\" }}>\n                            {provided.placeholder}\n                          </div>\n                        </div>\n                      </div>\n                      <Footer>\n                        <div className=\"copyright-notice\">\n                          Images originating from the Privateer Press website\n                          are © 2001—\n                          <>{new Date().getFullYear()}</> Privateer Press, Inc.\n                          All Rights Reserved. Privateer Press, warcaster and\n                          their logos are trademarks of Privateer Press, Inc.\n                          Images and trademarks used without permission. This\n                          website is unofficial and is not endorsed by Privateer\n                          Press.\n                        </div>\n                      </Footer>\n                    </>\n                  ) : (\n                    <Footer>\n                      <div className=\"bookmark\">\n                        <Layout>\n                          <Row>\n                            <Col\n                              xs={24}\n                              sm={24}\n                              md={18}\n                              lg={18}\n                              xl={16}\n                              xxl={16}\n                            >\n                              <input\n                                value={url}\n                                onChange={setUrl}\n                                onKeyDown={open}\n                                onClick={bookmark}\n                              />\n                            </Col>\n                          </Row>\n                        </Layout>\n                      </div>\n                      <div className=\"copyright-notice\">\n                        Images originating from the Privateer Press website are\n                        © 2001—\n                        <>{new Date().getFullYear()}</> Privateer Press, Inc.\n                        All Rights Reserved. Privateer Press, warcaster and\n                        their logos are trademarks of Privateer Press, Inc.\n                        Images and trademarks used without permission. This\n                        website is unofficial and is not endorsed by Privateer\n                        Press.\n                      </div>\n                    </Footer>\n                  )}\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n        </Layout>\n      </Layout>\n    </div>\n  );\n}\n\nconst App = connect(\n  (state) => ({\n    initialized: AppSync.selectDone()(state),\n    syncReasons: AppSync.selectReasons()(state),\n    factionModels: Object.entries(FactionModels.select()(state))\n      .sort()\n      .map(([faction, models]) => [\n        Factions.select()(state)[faction].text,\n        faction,\n        models.map((model) => ({\n          name: model.Name.text,\n          page: model.Name.page,\n          type: model.Type.text,\n          ...(model.Subtype\n            ? { subtype: model.Subtype.map((_) => _.text).join(\" \") }\n            : {}),\n        })),\n      ]),\n    wildCardModels: Object.fromEntries(\n      Object.entries(WildCardModels.select()(state))\n        .sort()\n        .map(([faction, models]) => [\n          faction,\n          models.map((model) => ({\n            name: model.Name.text,\n            page: model.Name.page,\n            type: model.Type.text,\n            ...(model.Subtype\n              ? { subtype: model.Subtype.map((_) => _.text).join(\" \") }\n              : {}),\n          })),\n        ])\n    ),\n    cypherCodecs: CypherCodecs.select()(state),\n    lists: Lists.select()(state).map(({ title, cards }) => ({\n      title,\n      cards: cards.flatMap(\n        ({ pageId, cortexIds, warjackWeaponIds, vehicleWeaponId, hidden }) => {\n          const pageIdByPage = PageIds.select()(state);\n\n          const page =\n            Object.entries(pageIdByPage)\n              .filter(([_, id]) => id === pageId)\n              .map(([page, _]) => page)[0] || \"\";\n\n          const model = Object.entries(state.data.factionModels)\n            .flatMap(([faction, models]) =>\n              models.map((model) => ({ ...model, faction }))\n            )\n            .find(({ Name }) => Name.page === page);\n          const wildCard = Object.entries(state.data.wildCardModels)\n            .flatMap(([faction, models]) =>\n              models.map((model) => ({ ...model, faction }))\n            )\n            .find(({ Name }) => Name.page === page);\n          const cypher = state.data.cypherCodecs.find(\n            ({ Cypher }) => Cypher.page === page\n          );\n\n          if (model) {\n            const details = Models.selectByPage(page)(state);\n            return [\n              {\n                card: \"model\",\n                hidden,\n                type: model.Type.text,\n                title: model.Name.text,\n                page: model.Name.page,\n                pageId,\n                cortexIds,\n                warjackWeaponIds,\n                vehicleWeaponId,\n                faction: model.faction,\n                ...(model.Subtype\n                  ? { subtype: model.Subtype.map((_) => _.text).join(\" \") }\n                  : {}),\n                ...(!details\n                  ? {}\n                  : {\n                      details: {\n                        ...details,\n                        ...(!details.hardpoints\n                          ? {}\n                          : {\n                              hardpointNames: parseHardpoints(\n                                details.hardpoints\n                              ),\n                            }),\n                        ...(!details.cortexSelections\n                          ? {}\n                          : {\n                              cortexSelections: Object.fromEntries(\n                                Object.entries(details.cortexSelections).map(\n                                  ([cortex, advantages]) => [\n                                    cortex,\n                                    Object.fromEntries(\n                                      Object.entries(advantages).map(\n                                        ([advantage, { text, category }]) => [\n                                          advantage,\n                                          {\n                                            text,\n                                            categoryId: pageIdByPage[category],\n                                          },\n                                        ]\n                                      )\n                                    ),\n                                  ]\n                                )\n                              ),\n                            }),\n                        ...(!details.warjackWeaponSelections\n                          ? {}\n                          : {\n                              warjackWeaponSelections: Object.fromEntries(\n                                Object.entries(\n                                  details.warjackWeaponSelections\n                                ).map(([page, selection]) => [\n                                  page,\n                                  { ...selection, pageId: pageIdByPage[page] },\n                                ])\n                              ),\n                            }),\n                        ...(!details.vehicleWeaponSelection\n                          ? {}\n                          : {\n                              vehicleWeaponSelection:\n                                details.vehicleWeaponSelection.map(\n                                  ({ text, page }) => ({\n                                    text,\n                                    page,\n                                    pageId: pageIdByPage[page],\n                                  })\n                                ),\n                            }),\n                      },\n                    }),\n              },\n            ];\n          }\n\n          if (wildCard) {\n            const details = Models.selectByPage(page)(state);\n            return [\n              {\n                card: \"model\",\n                hidden,\n                type: wildCard.Type.text,\n                title: wildCard.Name.text,\n                page: wildCard.Name.page,\n                pageId,\n                faction: \"Wild_Card\",\n                ...(wildCard.Subtype\n                  ? { subtype: wildCard.Subtype.map((_) => _.text).join(\" \") }\n                  : {}),\n                details,\n              },\n            ];\n          }\n\n          if (cypher) {\n            const details = Cyphers2.selectByPage(page)(state);\n            return [\n              {\n                card: \"cypher\",\n                hidden,\n                type: cypher.Type.text,\n                title: cypher.Cypher.text,\n                page: cypher.Cypher.page,\n                pageId,\n                ...(cypher.Faction.text === \"Universal\"\n                  ? { faction: \"Universal\" }\n                  : { faction: cypher.Faction.page }),\n                details,\n              },\n            ];\n          }\n\n          return [];\n        }\n      ),\n    })),\n    dragging: Dragging.select()(state),\n    url: Url.select()(state),\n  }),\n  (dispatch) => ({\n    toggleCard: (listIndex, cardIndex, pageId, card) => {\n      return () =>\n        dispatch(Lists.toggleCard({ listIndex, cardIndex, pageId, card }));\n    },\n    dragStart: (event) => dispatch(CardDragStarted(event)),\n    dragEnd: (event) => dispatch(CardDragEnded(event)),\n    menuItemClicked: (page) => (event) => {\n      dispatch(MenuItemClicked({ page }));\n      event.stopPropagation();\n    },\n    removeList: (listIndex) => () => dispatch(Lists.removeList({ listIndex })),\n    addEmptyList: (listIndex) => () =>\n      dispatch(Lists.addEmptyList({ listIndex })),\n    moveListBy: (listIndex, by) => () =>\n      dispatch(Lists.moveListBy({ listIndex, by })),\n    setListTitle: (listIndex) => (event) =>\n      dispatch(Lists.setListTitle({ listIndex, title: event.target.value })),\n    setUrl: (event) => dispatch(Url.set({ url: event.target.value })),\n    bookmark: () => {\n      const bookmark = document.querySelector(\".bookmark input\");\n      if (bookmark) {\n        if (navigator.userAgent.match(/ipad|iphone/i)) {\n          const range = document.createRange();\n          range.selectNodeContents(bookmark);\n\n          const selection = window.getSelection();\n          selection.removeAllRanges();\n          selection.addRange(range);\n          bookmark.setSelectionRange(0, 999999);\n        } else {\n          bookmark.select();\n        }\n      }\n    },\n    open: (event) => {\n      if (event.key === \"Enter\") {\n        const url = document.querySelector(\".bookmark input\").value;\n        if (url) window.open(url, \"_self\");\n      }\n    },\n    setCardCortex:\n      (listIndex, cardIndex, pageId) =>\n      (_, { label }) =>\n        dispatch(\n          Lists.setCardCortex({\n            listIndex,\n            cardIndex,\n            pageId,\n            cortexIds: label,\n          })\n        ),\n    setCardWarjackWeapons:\n      (listIndex, cardIndex, hardpointNameIndex, pageId) =>\n      (_, { label }) =>\n        dispatch(\n          Lists.setCardWarjackWeapons({\n            listIndex,\n            cardIndex,\n            hardpointNameIndex,\n            pageId,\n            warjackWeaponId: label,\n          })\n        ),\n    setCardVehicleWeapon:\n      (listIndex, cardIndex, pageId) =>\n      (_, { label }) =>\n        dispatch(\n          Lists.setCardVehicleWeapon({\n            listIndex,\n            cardIndex,\n            pageId,\n            vehicleWeaponId: label,\n          })\n        ),\n  })\n)(AppPresentation);\n\nexport default App;\n\nfunction cortexName(cortexSelections, cortexIds) {\n  return (Object.entries(cortexSelections).find(\n    ([cortex, advantages]) =>\n      Object.values(advantages)\n        .map((advantage) => advantage.categoryId)\n        .join(\"\") === (cortexIds || []).join(\"\")\n  ) || [undefined])[0];\n}\n\nfunction vehicleWeaponName(vehicleWeaponSelection, vehicleWeaponId) {\n  const vehicleWeapon = vehicleWeaponSelection.find(\n    ({ pageId }) => pageId === vehicleWeaponId\n  );\n  if (!vehicleWeapon) return undefined;\n  return vehicleWeapon.text;\n}\n\nfunction warjackWeaponNames(warjackWeaponSelections, weaponId) {\n  const weapon = Object.values(warjackWeaponSelections).find(\n    ({ pageId }) => pageId === weaponId\n  );\n  if (weapon) {\n    return warjackWeaponName(weapon.name, weapon.cost);\n  }\n  return weaponId;\n}\n\nfunction warjackWeaponNamesSubtitle(warjackWeaponSelections, weaponIds) {\n  return weaponIds.flatMap((weaponId) => {\n    const weapon = Object.values(warjackWeaponSelections).find(\n      ({ pageId }) => pageId === weaponId\n    );\n    if (weapon) {\n      return [weapon.name];\n    }\n    return [];\n  });\n}\n\nfunction warjackWeaponName(name, cost) {\n  return `${name} (cost ${cost})`;\n}\n\nfunction parseHardpoints(hardpoints) {\n  // Parses strings of the following type: \"3 : 2 Arm, 1 Back\"\n\n  const rHardpointCount = \"\\\\s*(\\\\d+)\\\\s*\";\n  const rHardpointGroup = \"\\\\s*(\\\\d+)\\\\s*(\\\\w+)\\\\s*\";\n\n  let results = null;\n  for (let n = 1; n <= 10; n++) {\n    const regexp = new RegExp(\n      `^${rHardpointCount}:${rHardpointGroup}${repeat(\n        `,${rHardpointGroup}`,\n        n - 1\n      )}$`\n    );\n    results = regexp.exec(hardpoints);\n    if (results !== null) {\n      break;\n    }\n  }\n\n  if (results === null) {\n    return undefined;\n  }\n\n  const hardpointCount = parseInt(results[1], 10);\n\n  const hardpointNames = [];\n  for (let n = 2; n < results.length; n += 2) {\n    const groupCount = parseInt(results[n], 10);\n    const groupName = results[n + 1];\n\n    for (let i = 1; i <= groupCount; i++) {\n      hardpointNames.push(groupName);\n    }\n  }\n\n  if (hardpointCount !== hardpointNames.length) {\n    console.error(\n      \"Hardpoints do not add up!\",\n      hardpoints,\n      hardpointCount,\n      hardpointNames\n    );\n  }\n\n  return hardpointNames;\n\n  function repeat(s, n) {\n    if (n === 0) return \"\";\n    return s + repeat(s, n - 1);\n  }\n}\n","const jsonp = (url) => {\n  return new Promise(function (resolve, reject) {\n    const callbackName = \"jsonp_callback_\" + Math.round(100000 * Math.random());\n    window[callbackName] = function (data) {\n      delete window[callbackName];\n      document.body.removeChild(script);\n      resolve(data);\n    };\n\n    const script = document.createElement(\"script\");\n    script.src =\n      url + (url.indexOf(\"?\") >= 0 ? \"&\" : \"?\") + \"callback=\" + callbackName;\n    document.body.appendChild(script);\n  });\n};\n\nexport { jsonp };\n","import { StateShard } from \"./utils\";\n\nconst WikiPages = StateShard(\n  \"WikiPages\",\n  init,\n  { addPage, removePage },\n  {\n    selectPageByPage,\n    selectPagesByPageIds,\n    selectPageIds,\n  }\n);\n\nexport { WikiPages };\n\nfunction init(state) {\n  if (!state.data) {\n    state.data = {};\n  }\n\n  state.data.pages = {};\n}\n\n// Actions\n\nfunction addPage(state, { page, type, data }) {\n  const pages = select(state);\n  data.page = page;\n  data.type = type;\n  pages[page] = data;\n}\n\nfunction removePage(state, { page }) {\n  const pages = select(state);\n  delete pages[page];\n}\n\n// Selectors\n\nfunction select(state) {\n  return state.data.pages;\n}\n\nfunction selectPageByPage(state, page) {\n  const pages = select(state);\n  return pages[page];\n}\n\nfunction selectPagesByPageIds(state, pageIds) {\n  const pages = select(state);\n  return Object.values(pages).filter((page) => pageIds.includes(page.pageid));\n}\n\nfunction selectPageIds(state) {\n  const pages = select(state);\n  return Object.values(pages).map((page) => page.pageid);\n}\n","/*\nThese sagas fetch and cache wiki pages.\n\nThe wiki's JSONP API is used to fetch page contents. Since we want to be\npolite, we only call the API every two seconds. This throttle is implemented in\nfetchWikiPage through an actionChannel and a call to delay.\n*/\n\nimport {\n  actionChannel,\n  all,\n  call,\n  delay,\n  put,\n  select,\n  take,\n} from \"redux-saga/effects\";\nimport { FetchedWikiPage, FetchWikiPage } from \"../../../messages\";\nimport { jsonp } from \"../jsonp\";\n\nimport { WikiPages } from \"../../../state/WikiPages\";\n\nfunction* cacheWikiPages() {\n  yield all([addWikiPage(), fetchWikiPage()]);\n}\n\nexport { cacheWikiPages };\n\nfunction* fetchWikiPage() {\n  const wikiPageChannel = yield actionChannel(FetchWikiPage().type);\n\n  while (true) {\n    const { payload } = yield take(wikiPageChannel);\n    const page = payload.page;\n    const data = yield select(WikiPages.selectPageByPage(page));\n\n    if (!data) {\n      const data = yield call(jsonp, parsePage(page));\n      yield put(FetchedWikiPage({ page, data: data.parse }));\n\n      const twoSecondsInMs = 2 * 1000;\n      yield delay(twoSecondsInMs);\n    }\n  }\n}\n\nfunction* addWikiPage() {\n  while (true) {\n    const { payload } = yield take(FetchedWikiPage().type);\n    const page = payload.page;\n    const data = payload.data;\n\n    if (data) {\n      yield put(WikiPages.addPage({ page, data }));\n    }\n  }\n}\n\nfunction parsePage(page) {\n  return `https://privateerpress.wiki/api.php?action=parse&page=${page}&formatversion=2&format=json`;\n}\n","/*\nThese sagas make sure, cached wiki pages stay up-to-date.\n\nEach app reload triggers a RefreshWikiPages action, that starts the cache\nupdate process. The refreshWikiPages saga bulk loads revision data for all\ncached pages from the wiki API. If a page cannot be found (probably because it\nwas deleted from the wiki), it is removed from the cache. If revision\ninformation is found, it is compared with the cached revision of the page. If\nthe loaded revision is higher, the page is removed and fetched again. If the\ncached revision is higher or equal, the page is not refreshed and remains\ncached.\n*/\n\nimport {\n  FetchWikiPage,\n  FetchWikiPageRevisions,\n  FetchedWikiPageRevisions,\n  RefreshWikiPages,\n} from \"../../../messages\";\nimport {\n  actionChannel,\n  all,\n  call,\n  delay,\n  put,\n  take,\n  select,\n} from \"redux-saga/effects\";\nimport { jsonp } from \"../jsonp\";\n\nimport { WikiPages } from \"../../../state/WikiPages\";\n\nfunction* updateCache() {\n  yield all([\n    refreshWikiPages(),\n    fetchWikiPageRevisions(),\n    refreshOutdatedWikiPages(),\n  ]);\n}\n\nexport { updateCache };\n\nfunction* refreshWikiPages() {\n  yield take(RefreshWikiPages().type);\n  const pageIds = yield select(WikiPages.selectPageIds());\n\n  const queryLength = 50;\n  const pageidsList = [];\n  for (let i = 0; i < pageIds.length; i += queryLength) {\n    const ids = pageIds.slice(i, i + queryLength);\n    const pageids = ids.join(\"|\");\n    pageidsList.push(pageids);\n  }\n\n  for (const pageids of pageidsList) {\n    yield put(FetchWikiPageRevisions({ pageids }));\n  }\n}\n\nfunction* fetchWikiPageRevisions() {\n  const revisionsChannel = yield actionChannel(FetchWikiPageRevisions().type);\n\n  while (true) {\n    const { payload } = yield take(revisionsChannel);\n    const pageids = payload.pageids;\n\n    const data = yield call(jsonp, revisionsQuery(pageids));\n    yield put(\n      FetchedWikiPageRevisions({\n        pageRevisions: data.query.pages,\n      })\n    );\n\n    const twoSecondsInMs = 2 * 1000;\n    yield delay(twoSecondsInMs);\n  }\n}\n\nfunction* refreshOutdatedWikiPages() {\n  while (true) {\n    const { payload } = yield take(FetchedWikiPageRevisions().type);\n    const { pageRevisions } = payload;\n    const revInfoByPageId = Object.fromEntries(\n      pageRevisions.map((revision) => [\n        revision.pageid,\n        revision.missing\n          ? { missing: revision.missing }\n          : {\n              revid: Math.max(\n                ...revision.revisions.map((revision) => revision.revid)\n              ),\n            },\n      ])\n    );\n    const pageIds = pageRevisions.map((revision) => revision.pageid);\n\n    const pages = yield select(WikiPages.selectPagesByPageIds(pageIds));\n    for (const page of pages) {\n      const revInfo = revInfoByPageId[page.pageid];\n      if (revInfo.missing) {\n        yield put(WikiPages.removePage({ page: page.page }));\n      } else if (page.revid < revInfo.revid) {\n        yield put(WikiPages.removePage({ page: page.page }));\n        yield put(FetchWikiPage({ page: page.page, type: page.type }));\n      }\n    }\n  }\n}\n\nfunction revisionsQuery(pageids) {\n  return `https://privateerpress.wiki/api.php?action=query&pageids=${pageids}&prop=revisions&formatversion=2&format=json`;\n}\n","function partitionBy(slice, array) {\n  var arrays = [];\n\n  for (var i = 0; i < array.length; i += slice) {\n    arrays[arrays.length] = array.slice(i, i + slice);\n  }\n\n  return arrays;\n}\n\nexport { partitionBy };\n","import {\n  actionChannel,\n  all,\n  call,\n  delay,\n  put,\n  take,\n  select,\n} from \"redux-saga/effects\";\nimport { jsonp } from \"../jsonp\";\n\nimport { AppSync } from \"../../../state/AppSync\";\nimport { CypherCodecs } from \"../../../state/CypherCodecs\";\nimport { FactionModels } from \"../../../state/FactionModels\";\nimport { Factions } from \"../../../state/Factions\";\nimport { PageIds } from \"../../../state/PageIds\";\nimport { WildCardModels } from \"../../../state/WildCardModels\";\nimport { FetchPageIdsSlice } from \"../../../messages\";\n\nimport { partitionBy } from \"../partitionBy\";\n\nfunction* fetchPageIds() {\n  yield all([fetchPageIds2(), fetchPageIdsSlice()]);\n}\n\nexport { fetchPageIds };\n\nfunction* fetchPageIds2() {\n  const cachedPageIds = yield select(PageIds.select());\n\n  if (Object.keys(cachedPageIds).length === 0) {\n    yield put(\n      AppSync.addReasons({\n        reasons: [\n          {\n            reason: \"Loading factions\",\n            description: \"Load available Warcaster factions\",\n          },\n          {\n            reason: \"Loading cyphers\",\n            description: \"Load available Cypher Codecs\",\n          },\n          {\n            reason: \"Loading wildcard models\",\n            description: \"Load available Wild Cards\",\n          },\n        ],\n      })\n    );\n\n    const [factionsSet] = yield all([\n      take(Factions.set().type),\n      take(CypherCodecs.set().type),\n      take(WildCardModels.set().type),\n    ]);\n\n    const factions = Object.keys(factionsSet.payload.factions);\n\n    yield put(\n      AppSync.addReasons({\n        reasons: factions.map((faction) => ({\n          reason: `Loading ${faction.replace(/_/g, \" \")}`,\n          description: `Used to build ${faction.replace(/_/g, \" \")} menu`,\n        })),\n      })\n    );\n\n    yield all(\n      factions.map((faction) =>\n        take(\n          (action) =>\n            action.type === FactionModels.set().type &&\n            action.payload.page === faction\n        )\n      )\n    );\n\n    const factionModelPages = Object.values(\n      yield select(FactionModels.select())\n    )\n      .flat()\n      .map((_) => _.Name);\n\n    const wildCardPages = Object.values(yield select(WildCardModels.select()))\n      .flat()\n      .map((_) => _.Name)\n      .sort(({ text, page }) => [text, page])\n      .filter(\n        ({ text, page }, index, cards) =>\n          !index ||\n          (text !== cards[index - 1].text && page !== cards[index - 1].page)\n      );\n\n    const cypherPages = (yield select(CypherCodecs.select())).map(\n      (_) => _.Cypher\n    );\n\n    const pages = [...factionModelPages, ...wildCardPages, ...cypherPages].sort(\n      (_) => _.page\n    );\n    const pageSlices = partitionBy(50, pages);\n\n    yield put(\n      AppSync.addReasons({\n        reasons: pageSlices.map((_, index) => ({\n          reason: `Loading page ids ${index + 1} of ${pageSlices.length}`,\n          description:\n            \"Card lists are encoded in the URL using unique wiki page ids\",\n        })),\n      })\n    );\n\n    for (const pages of pageSlices) {\n      yield put(FetchPageIdsSlice({ pages }));\n    }\n\n    let processedCount = 0;\n    while (yield take(PageIds.addPages().type)) {\n      processedCount += 1;\n      if (pageSlices.length === processedCount) {\n        yield put(AppSync.done());\n      }\n    }\n  }\n}\n\nfunction* fetchPageIdsSlice() {\n  const pageIdsSliceChannel = yield actionChannel(FetchPageIdsSlice().type);\n\n  while (true) {\n    const { payload } = yield take(pageIdsSliceChannel);\n    const pages = payload.pages;\n\n    const data = yield call(jsonp, pageInfo(pages.map((_) => _.text)));\n    const titleToPageId = Object.fromEntries(\n      data.query.pages.map(({ title, pageid }) => [title, pageid])\n    );\n\n    const pageIdByTitle = Object.fromEntries(\n      pages.map(({ text, page }) => [page, titleToPageId[text]])\n    );\n\n    yield put(PageIds.addPages({ pageIdByTitle }));\n\n    const twoSecondsInMs = 2 * 1000;\n    yield delay(twoSecondsInMs);\n  }\n}\n\nfunction pageInfo(pages) {\n  const pageList = encodeURIComponent(pages.join(\"|\"));\n  return `https://privateerpress.wiki/api.php?action=query&formatversion=2&format=json&prop=pageprops&titles=${pageList}`;\n}\n","import { all } from \"redux-saga/effects\";\nimport { cacheWikiPages as cacheWikiPages2 } from \"./cacheWikiPages\";\nimport { updateCache } from \"./updateCache\";\nimport { fetchPageIds } from \"./fetchPageIds\";\n\nfunction* cacheWikiPages() {\n  yield all([updateCache(), cacheWikiPages2(), fetchPageIds()]);\n}\n\nexport { cacheWikiPages };\n","function cleanText(text) {\n  return text.replace(/\\n/g, \"\");\n}\n\nfunction prepareDOM(text) {\n  const doc = new DOMParser().parseFromString(text, \"text/html\");\n  doc\n    .querySelectorAll(\n      \"h1 > span[id], h2 > span[id], h3 > span[id], h4 > span[id]\"\n    )\n    .forEach((node) => {\n      node.parentNode.id = node.id;\n    });\n\n  return doc;\n}\n\nexport { cleanText, prepareDOM };\n","import { prepareDOM } from \"./utils\";\n\nconst parseCypherText = (text) => {\n  const doc = prepareDOM(text);\n\n  const type = extractLink(doc, \"Type\");\n  const pow = extractLink(doc, \"Pow\");\n  const effect = extractParagraphs(doc, \"Effect\");\n  const faction = extractLink(doc, \"Faction\");\n  const source = extractLink(doc, \"Source\");\n\n  const cypher = {\n    type,\n    pow,\n    effect,\n    faction,\n    source,\n  };\n\n  return removeUndefinedValues(cypher);\n};\n\nexport { parseCypherText };\n\nfunction extractLink(doc, id) {\n  const p = doc.querySelector(`h2#${id} ~ p`);\n  if (!p) return undefined;\n\n  const a = p.querySelector(\"a\");\n  if (!a) return { text: p.innerText };\n\n  const hrefs = a.href.split(\"title=\");\n  return { text: a.innerText, page: hrefs[hrefs.length - 1] };\n}\n\nfunction extractParagraphs(doc, id) {\n  function helper(node, texts) {\n    switch (node.tagName) {\n      case \"P\":\n        return helper(node.nextSibling, [...texts, node.innerText.trim()]);\n      case \"H2\":\n        return texts;\n      default:\n        return helper(node.nextSibling, texts);\n    }\n  }\n\n  const node = doc.querySelector(`h2#${id} ~ p`);\n  if (!node) return undefined;\n\n  return helper(node, []);\n}\n\nfunction removeUndefinedValues(obj) {\n  if (Array.isArray(obj)) return obj.map(removeUndefinedValues);\n  if (typeof obj !== \"object\") return obj;\n\n  return Object.fromEntries(\n    Object.entries(obj)\n      .filter(([key, value]) => typeof value !== \"undefined\")\n      .map(([key, value]) => [key, removeUndefinedValues(value)])\n  );\n}\n","import { cleanText } from \"./utils\";\n\nfunction parseAnchorTable(table) {\n  const header = [...table.querySelectorAll(\"th\")].map((th) =>\n    cleanText(th.innerText)\n  );\n\n  const body = [...table.querySelectorAll(\"tr\")].map((tr) =>\n    [...tr.querySelectorAll(\"td\")].map((td) => {\n      const anchors = [...td.querySelectorAll(\"a\")].map(parseAnchor);\n      if (anchors.length > 0) {\n        return anchors;\n      }\n      const text = parseText(td);\n      if (text) {\n        return [{ text }];\n      }\n      return [];\n    })\n  );\n\n  return body\n    .filter((row) => row.length === header.length)\n    .map((row) =>\n      Object.fromEntries(\n        header.flatMap((title, i) => (row[i] ? [[title, row[i]]] : []))\n      )\n    );\n}\n\nfunction parseAnchor(a) {\n  const titleColon = a.title.split(\":\");\n  const hrefTitle = a.href.split(\"title=\");\n  return {\n    text: titleColon[titleColon.length - 1],\n    page: hrefTitle[hrefTitle.length - 1],\n  };\n}\n\nexport { parseAnchor, parseAnchorTable };\n\nfunction parseText(node) {\n  return cleanText(node.innerText);\n}\n","import { parseAnchorTable } from \"./parsers\";\nimport { prepareDOM } from \"./utils\";\n\nconst parseCypherCodecsText = (text) => {\n  const doc = prepareDOM(text);\n\n  const cypherCodecsTable = doc.querySelector(\"table.sortable\");\n  if (!cypherCodecsTable) {\n    console.error(\"parseCypherCodecsText: cypherCodecsTable not found!\");\n    return undefined;\n  }\n\n  const cypherCodecs = parseAnchorTable(cypherCodecsTable);\n  return cypherCodecs.map((cypherCodec) =>\n    Object.fromEntries(\n      Object.entries(cypherCodec).map(([key, values]) => [key, values[0]])\n    )\n  );\n};\n\nexport { parseCypherCodecsText };\n","import { parseAnchorTable } from \"./parsers\";\nimport { prepareDOM } from \"./utils\";\n\nconst parseFactionModelsText = (text) => {\n  const doc = prepareDOM(text);\n\n  const table = doc.querySelector(\"h1#Models ~ table\");\n  if (!table) {\n    console.error(\"parseFactionModelsText: table not found!\");\n    return undefined;\n  }\n  const models = parseAnchorTable(table);\n\n  return models.map((model) =>\n    Object.fromEntries(\n      Object.entries(model).flatMap(([key, values]) =>\n        key === \"Subtype\"\n          ? values.length > 0\n            ? [[key, values]]\n            : []\n          : [[key, values[0]]]\n      )\n    )\n  );\n};\n\nexport { parseFactionModelsText };\n","import { parseAnchor } from \"./parsers\";\nimport { prepareDOM } from \"./utils\";\n\nconst parseFactionsText = (text) => {\n  const doc = prepareDOM(text);\n\n  const p = doc.querySelector(\"h2#Factions ~ p\");\n  const factions = Object.fromEntries(collectFactions(p, []));\n  delete factions.Wild_Card; // Wild Cards are crawled independently.\n  return factions;\n};\n\nexport { parseFactionsText };\n\nfunction collectFactions(node, factions) {\n  switch (node.tagName) {\n    case \"P\":\n      const a = node.querySelector(\"a\");\n      if (!a) {\n        console.error(\"collectFactions: a not found!\");\n        return collectFactions(node.nextSibling, factions);\n      }\n      const anchor = parseAnchor(a);\n      const faction = [anchor.page, anchor];\n      return collectFactions(node.nextSibling, [...factions, faction]);\n    case \"H2\":\n      return factions;\n    default:\n      return collectFactions(node.nextSibling, factions);\n  }\n}\n","import { parseAnchor } from \"./parsers\";\nimport { cleanText, prepareDOM } from \"./utils\";\n\nconst parseModelText = (text) => {\n  const doc = prepareDOM(text);\n\n  const factionAndTypes =\n    extractList(doc, \"Unit_Faction_and_Type\") ||\n    extractList(doc, \"Model_Faction_and_Type\");\n  const faction = factionAndTypes[0];\n  const types = factionAndTypes.slice(1);\n  const squadSize = extractText(doc, \"Squad_Size\");\n  const deploymentCost = extractText(doc, \"Deployment_Cost\");\n  const baseSize = extractText(doc, \"Base_Size\");\n  const health = extractText(doc, \"Health\");\n  const wildCardFactions = extractList(doc, \"Wild_Card_Factions\");\n  const weaponPoints = extractText(doc, \"Weapon_Points\");\n  const hardpoints = extractText(doc, \"Hardpoints\");\n  const specialRules = extractDefinitions(doc, \"Special_Rules\");\n  const chassisSpecialRules = extractDefinitions(doc, \"Chassis_Special_Rules\");\n  const advantages = extractDefinitions(doc, \"Advantages\");\n  const maneuvers = extractDefinitions(doc, \"Maneuvers\");\n  const vehicleWeaponSelection = extractWeaponSelection(\n    doc,\n    \"Weapon_Selection\"\n  );\n  const cortexes = extractCortexes(doc, \"Cortexes\");\n\n  const modelStatsData = [\n    ...doc\n      .querySelector(\"h3#Unit_Stats ~ table, h3#Model_Stats ~ table\")\n      .querySelectorAll(\"tr > td\"),\n  ].map((_) => cleanText(_.innerText));\n  const modelStatsLength = modelStatsData.length / 2;\n  const modelStats = Object.fromEntries(\n    Array.from({ length: modelStatsLength }, (_, i) => i).map((i) => [\n      modelStatsData[i],\n      modelStatsData[i + modelStatsLength],\n    ])\n  );\n\n  let weaponsData = [...doc.querySelectorAll(\"h3#Weapons ~ table tr\")].map(\n    (tr) => [...tr.querySelectorAll(\"td\")]\n  );\n  let weapons = undefined;\n  if (weaponsData.length > 0) {\n    weapons = [];\n    let header = weaponsData[0].map((td) => td.innerText);\n    let weaponsList = weaponsData.slice(1);\n    for (const tds of weaponsList) {\n      if (tds.length === header.length) {\n        const stats = tds.map((td) => td.innerText);\n        const weapon = Object.fromEntries(\n          header.map((key, i) => [cleanText(key), cleanText(stats[i])])\n        );\n        weapons.push(weapon);\n      }\n      if (tds.length === 1) {\n        const previousWeapons = weapons.slice(0, weapons.length - 1);\n        const lastWeapon = weapons[weapons.length - 1];\n\n        const weapon = {\n          ...lastWeapon,\n          specialRules: parseDefinitionText(tds[0]),\n        };\n        weapons = [...previousWeapons, weapon];\n      }\n    }\n  }\n\n  function weaponDetails() {\n    const weaponDetailsTable = doc.querySelector(\"table.mw-collapsible\");\n    if (!weaponDetailsTable) return undefined;\n\n    const weaponDetailsData = [...weaponDetailsTable.querySelectorAll(\"tr\")]\n      .map((tr) => [...tr.querySelectorAll(\"td, th\")])\n      .filter((_) => _.length === 4);\n    if (!weaponDetailsData || weaponDetailsData.length === 0) return undefined;\n\n    const detailsHeader = weaponDetailsData[0].map((_) =>\n      cleanText(_.innerText)\n    );\n    return weaponDetailsData.slice(1).map((tds) =>\n      Object.fromEntries(\n        tds.map((td, i) => {\n          const a = td.querySelector(\"a\");\n          const hrefs = a ? a.href.split(\"title=\") : undefined;\n          const text = cleanText(td.innerText);\n          return [\n            detailsHeader[i],\n            a ? { text, page: hrefs[hrefs.length - 1] } : { text },\n          ];\n        })\n      )\n    );\n  }\n\n  const release = extractText(doc, \"Release\", { node: \"h1\" });\n  const lore = extractText(doc, \"Lore\", { node: \"h1\" });\n\n  const model = {\n    faction,\n    types,\n    squadSize,\n    deploymentCost,\n    baseSize,\n    health,\n    wildCardFactions,\n    hardpoints,\n    weaponPoints,\n    modelStats,\n    specialRules,\n    weapons,\n    advantages,\n    maneuvers,\n    vehicleWeaponSelection,\n    cortexes,\n    chassisSpecialRules,\n    weaponDetails: weaponDetails(),\n    release,\n    lore,\n  };\n\n  return removeUndefinedValues(model);\n};\n\nexport { parseModelText };\n\nfunction removeUndefinedValues(obj) {\n  if (Array.isArray(obj)) return obj.map(removeUndefinedValues);\n  if (typeof obj !== \"object\") return obj;\n\n  return Object.fromEntries(\n    Object.entries(obj)\n      .filter(([key, value]) => typeof value !== \"undefined\")\n      .map(([key, value]) => [key, removeUndefinedValues(value)])\n  );\n}\n\nfunction extractText(doc, id, { node = \"h3\" } = {}) {\n  const p = doc.querySelector(`${node}#${id} ~ p`);\n  if (!p) return undefined;\n\n  return cleanText(p.innerText);\n}\n\nfunction extractList(doc, id) {\n  const p = doc.querySelector(`h3#${id} ~ p`);\n  if (!p) return undefined;\n\n  const as = [...p.querySelectorAll(\"a\")];\n  if (as.length === 0) return undefined;\n\n  return as.map((a) => {\n    const hrefs = a.href.split(\"title=\");\n    return { text: a.innerText, page: hrefs[hrefs.length - 1] };\n  });\n}\n\nfunction extractWeaponSelection(doc, id) {\n  const node = doc.querySelector(`h3#${id} + p`);\n  if (!node) return undefined;\n\n  const anchors = [...node.querySelectorAll(\"a\")];\n\n  return anchors.map((a) => parseAnchor(a));\n}\n\nfunction extractCortexes(doc, id) {\n  function helper(node, cortexes) {\n    switch (node.tagName) {\n      case \"P\":\n        const cortex = node.querySelector(\"b\").innerText;\n        const definitions = parseDefinitionText(node);\n        return helper(node.nextSibling, [...cortexes, [cortex, definitions]]);\n      case \"H3\":\n        return cortexes;\n      default:\n        return helper(node.nextSibling, cortexes);\n    }\n  }\n\n  const node = doc.querySelector(`h3#${id} ~ p`);\n  if (!node) return undefined;\n\n  return Object.fromEntries(helper(node, []));\n}\n\nfunction parseDefinitionText(node) {\n  const definitions = node.innerHTML\n    .split(\"<br>\")\n    .map((_) => _.replace(/<[^>]+>/g, \"\").trim());\n\n  const pairs = definitions.flatMap((definition) => {\n    const separator = \": \";\n    const groups = definition.split(separator).map(cleanText);\n    if (groups.length < 2) return [];\n    const key = groups[0];\n    const val = groups.slice(1).join(separator);\n    return [[key, val]];\n  });\n  if (pairs.length === 0) return undefined;\n\n  return Object.fromEntries(pairs);\n}\n\nfunction extractDefinitions(doc, id) {\n  const p = doc.querySelector(`h3#${id} ~ p`);\n  if (!p) return undefined;\n\n  return parseDefinitionText(p);\n}\n","import { parseAnchorTable } from \"./parsers\";\nimport { prepareDOM } from \"./utils\";\n\nconst parseWildCardText = (text) => {\n  const doc = prepareDOM(text);\n\n  const h1OrTable = doc.querySelectorAll(\"h1, table.sortable\");\n  const factionAndModels = [];\n\n  for (let i = 0; i < h1OrTable.length; i++) {\n    if (i % 2 === 0) {\n      const h1 = h1OrTable[i];\n      if (h1.tagName !== \"H1\") {\n        console.error(\n          `parseWildCardText: expected H1, but got ${h1.tagName}!`,\n          h1\n        );\n      }\n      factionAndModels.push({ faction: h1.id });\n    } else {\n      const table = h1OrTable[i];\n      if (table.tagName !== \"TABLE\") {\n        console.error(\n          `parseWildCardText: expected TABLE, but got ${table.tagName}!`,\n          table\n        );\n      }\n      const last = factionAndModels[factionAndModels.length - 1];\n      const models = parseAnchorTable(table);\n      last.models = models.map((model) =>\n        Object.fromEntries(\n          Object.entries(model).flatMap(([key, values]) =>\n            key === \"Subtype\"\n              ? values.length > 0\n                ? [[key, values]]\n                : []\n              : [[key, values[0]]]\n          )\n        )\n      );\n    }\n  }\n\n  return factionAndModels;\n};\n\nexport { parseWildCardText };\n","import { put, select, take } from \"redux-saga/effects\";\nimport {\n  parseCypherCodecsText,\n  parseCypherText,\n  parseFactionModelsText,\n  parseFactionsText,\n  parseModelText,\n  parseWildCardText,\n} from \"../core/parse\";\nimport { Cyphers } from \"../../state/Cyphers\";\nimport { CypherCodecs } from \"../../state/CypherCodecs\";\nimport { Factions } from \"../../state/Factions\";\nimport { FactionModels } from \"../../state/FactionModels\";\nimport { Models } from \"../../state/Models\";\nimport { WildCardModels } from \"../../state/WildCardModels\";\nimport { FetchedWikiPage, FetchPageIdsSlice } from \"../../messages\";\nimport { partitionBy } from \"./partitionBy\";\n\nfunction* parseWikiPages() {\n  while (true) {\n    const { payload } = yield take(FetchedWikiPage().type);\n    const { data, page } = payload;\n\n    const cypherCodecs = yield select(CypherCodecs.selectPages());\n    const factions = yield select(Factions.selectPages());\n\n    // TODO: Why Object.values?\n    const factionModels = Object.values(\n      yield select(FactionModels.selectModelPages())\n    );\n\n    const wildCardModels = Object.values(\n      yield select(WildCardModels.selectModelPages())\n    );\n\n    if (page === \"Warcaster\") {\n      const factions = parseFactionsText(data.text);\n      yield put(Factions.set({ factions }));\n    } else if (page === \"Wild_Card\") {\n      const wildCards = parseWildCardText(data.text);\n      yield put(WildCardModels.set({ wildCards }));\n    } else if (factionModels.includes(page) || wildCardModels.includes(page)) {\n      const model = parseModelText(data.text);\n      model.name = { text: data.title, page };\n\n      const cortexSelections = identifyCortexSelections(\n        model.cortexes,\n        data.categories\n      );\n\n      if (cortexSelections) {\n        model.cortexSelections = cortexSelections;\n      }\n\n      const warjackWeaponSelections = buildWarjackWeaponSelections(\n        model.weaponDetails\n      );\n\n      if (warjackWeaponSelections) {\n        model.warjackWeaponSelections = warjackWeaponSelections;\n      }\n\n      yield put(Models.set({ page, model }));\n\n      let fetchPages = [];\n\n      if (cortexSelections) {\n        const cortexCategories = Object.values(cortexSelections).flatMap(\n          (advantages) =>\n            Object.values(advantages).flatMap(({ category }) => ({\n              text: category.replace(/_/g, \" \"),\n              page: category,\n            }))\n        );\n\n        fetchPages = [...fetchPages, ...cortexCategories];\n      }\n\n      if (warjackWeaponSelections) {\n        const weaponPages = Object.values(warjackWeaponSelections).map(\n          ({ name, page }) => ({ text: name, page })\n        );\n\n        fetchPages = [...fetchPages, ...weaponPages];\n      }\n\n      if (model.vehicleWeaponSelection) {\n        fetchPages = [...fetchPages, ...model.vehicleWeaponSelection];\n      }\n\n      if (fetchPages.length > 0) {\n        const pageSlices = partitionBy(50, fetchPages);\n\n        for (const pages of pageSlices) {\n          yield put(FetchPageIdsSlice({ pages }));\n        }\n      }\n    } else if (factions.includes(page)) {\n      const factionModels = parseFactionModelsText(data.text);\n      yield put(FactionModels.set({ page, factionModels }));\n    } else if (page === \"Cypher_Codecs\") {\n      const cypherCodecs = parseCypherCodecsText(data.text);\n      yield put(CypherCodecs.set({ cypherCodecs }));\n    } else if (cypherCodecs.includes(page)) {\n      const cypher = parseCypherText(data.text);\n      cypher.name = { text: data.title, page };\n      yield put(Cyphers.set({ page, cypher }));\n    } else {\n      // TODO: Cannot parse WikiPage\n    }\n  }\n}\n\nexport { parseWikiPages };\n\nfunction buildWarjackWeaponSelections(weaponDetails) {\n  if (!weaponDetails) {\n    return undefined;\n  }\n\n  return Object.fromEntries(\n    weaponDetails.map(({ Cost, Location, Weapon }) => [\n      Weapon.page,\n      {\n        cost: Cost.text,\n        location: Location.text,\n        name: Weapon.text,\n        page: Weapon.page,\n      },\n    ])\n  );\n}\n\nfunction identifyCortexSelections(cortexes, categories) {\n  if (\n    !cortexes ||\n    Object.entries(cortexes).length === 0 ||\n    !categories ||\n    Object.entries(categories).length === 0\n  ) {\n    return undefined;\n  }\n\n  const categoryTexts = categories.map(({ category }) => category);\n\n  return Object.fromEntries(\n    Object.entries(cortexes).map(([cortex, advantages]) => [\n      cortex,\n      Object.fromEntries(\n        Object.entries(advantages).map(([advantage, text]) => [\n          advantage,\n          {\n            category: `Category:${findClosestCategory(\n              advantage,\n              categoryTexts\n            )}`,\n            text,\n          },\n        ])\n      ),\n    ])\n  );\n}\n\nfunction findClosestCategory(advantage, categoryTexts) {\n  return categoryTexts.find(\n    (category) => advantage === category.replace(/^WNM_/, \"\").replace(/_/g, \" \")\n  );\n}\n","import { all, put, take } from \"redux-saga/effects\";\nimport { FetchWikiPage } from \"../../messages\";\nimport { Factions } from \"../../state/Factions\";\n\nfunction* triggerFetchWikiPages() {\n  yield all([triggerFetchFactions()]);\n}\n\nexport { triggerFetchWikiPages };\n\nfunction* triggerFetchFactions() {\n  while (true) {\n    const { payload } = yield take(Factions.set().type);\n    const { factions } = payload;\n\n    const factionPages = Object.values(factions).map((faction) => faction.page);\n\n    for (const page of factionPages) {\n      yield put(FetchWikiPage({ page }));\n    }\n  }\n}\n","const digitsBase62 =\n  \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\nfunction toBase62(n) {\n  if (n === 0) return \"0\";\n  var result = \"\";\n  while (n > 0) {\n    result = digitsBase62[n % digitsBase62.length] + result;\n    n = parseInt(n / digitsBase62.length, 10);\n  }\n  return result;\n}\n\nfunction fromBase62(s) {\n  var result = 0;\n  for (var i = 0; i < s.length; i++) {\n    var p = digitsBase62.indexOf(s[i]);\n    if (p < 0) return NaN;\n    result += p * Math.pow(digitsBase62.length, s.length - i - 1);\n  }\n  return result;\n}\n\nexport { fromBase62, toBase62 };\n","import { eventChannel } from \"redux-saga\";\nimport { all, put, select, take } from \"redux-saga/effects\";\nimport {\n  CardDragEnded,\n  CardDragStarted,\n  FetchWikiPage,\n  MenuItemClicked,\n} from \"../../messages\";\nimport { AppSync } from \"../../state/AppSync\";\nimport { CypherCodecs } from \"../../state/CypherCodecs\";\nimport { Dragging } from \"../../state/Dragging\";\nimport { FactionModels } from \"../../state/FactionModels\";\nimport { Lists } from \"../../state/Lists\";\nimport { PageIds } from \"../../state/PageIds\";\nimport { Url } from \"../../state/Url\";\nimport { WildCardModels } from \"../../state/WildCardModels\";\nimport { toBase62, fromBase62 } from \"./base62\";\n\nfunction* ui() {\n  yield all([\n    addCard(),\n    removeCards(),\n    setDraggingFalse(),\n    setDraggingTrue(),\n    updateCards(),\n    updateUrl(),\n    parseListsFromQuery(),\n    parseListsFromQuery2(),\n    fetchCardOnShow(),\n  ]);\n}\n\nexport { ui };\n\nfunction* updateCards() {\n  while (true) {\n    const { payload } = yield take(CardDragEnded().type);\n    const { reason, source, destination } = payload;\n    if (reason === \"DROP\" && destination.droppableId.startsWith(\"cards_\")) {\n      const sourceListIndex = parseInt(\n        source.droppableId.replace(\"cards_\", \"\"),\n        10\n      );\n      const sourcePosition = source.index;\n\n      const destinationListIndex = parseInt(\n        destination.droppableId.replace(\"cards_\", \"\"),\n        10\n      );\n      const destinationPosition = destination.index;\n\n      yield put(\n        Lists.moveCard({\n          source: { listIndex: sourceListIndex, cardIndex: sourcePosition },\n          destination: {\n            listIndex: destinationListIndex,\n            cardIndex: destinationPosition,\n          },\n        })\n      );\n    }\n  }\n}\n\nfunction* removeCards() {\n  while (true) {\n    const { payload } = yield take(CardDragEnded().type);\n    const { reason, source, destination } = payload;\n    if (reason === \"DROP\" && destination.droppableId.startsWith(\"trash\")) {\n      const listIndex = parseInt(source.droppableId.replace(\"cards_\", \"\"), 10);\n      const cardIndex = source.index;\n\n      yield put(\n        Lists.removeCard({\n          source: { listIndex, cardIndex },\n        })\n      );\n    }\n  }\n}\n\nfunction* addCard() {\n  while (true) {\n    const { payload } = yield take(MenuItemClicked().type);\n    const { page } = payload;\n    const model = yield select(FactionModels.selectByPage(page));\n    const wildCard = yield select(WildCardModels.selectByPage(page));\n    const cypher = yield select(CypherCodecs.selectByPage(page));\n    if (model || wildCard || cypher) {\n      const pageId = yield select(PageIds.selectByPage(page));\n      yield put(Lists.addCard({ pageId }));\n    }\n  }\n}\n\nfunction* setDraggingTrue() {\n  while (yield take(CardDragStarted().type)) {\n    yield put(Dragging.activate());\n  }\n}\n\nfunction* setDraggingFalse() {\n  while (yield take(CardDragEnded().type)) {\n    yield put(Dragging.deactivate());\n  }\n}\n\nfunction* updateUrl() {\n  while (yield take((action) => action.type.startsWith(\"Lists.\"))) {\n    const lists = yield select(Lists.select());\n    const pageIds = lists.map(({ cards }) => cards.map((_) => _.pageId));\n\n    if (window.history && window.history.replaceState) {\n      const maxPageId = Math.max(0, ...pageIds.flat());\n      const codeLength = Math.ceil(Math.log(maxPageId + 1) / Math.log(62)) || 0;\n\n      function renderWarjackWeaponIds(warjackWeaponIds, codeLength) {\n        const ids = warjackWeaponIds || [];\n        let res = \"\";\n        for (let i = 0; i < ids.length; i++) {\n          const id = ids[i];\n          res += (id ? toBase62(id) : \"0\").padStart(codeLength, \"0\");\n        }\n        return res;\n      }\n\n      const state = lists.reduce(\n        (state, list, index) => ({\n          ...state,\n          [`t${index}`]: list.title,\n          [`l${index}`]: list.cards.reduce(\n            (acc, card) =>\n              acc +\n              toBase62(card.pageId).padStart(codeLength, \"0\") +\n              (card.cortexIds || card.warjackWeaponIds\n                ? `(${(card.cortexIds || [])\n                    .map((id) => toBase62(id).padStart(codeLength, \"0\"))\n                    .join(\"\")},${renderWarjackWeaponIds(\n                    card.warjackWeaponIds,\n                    codeLength\n                  )})`\n                : \"\") +\n              (card.vehicleWeaponId\n                ? `[${toBase62(card.vehicleWeaponId).padStart(\n                    codeLength,\n                    \"0\"\n                  )}]`\n                : \"\"),\n            \"\"\n          ),\n        }),\n        { v: 1, e: codeLength }\n      );\n\n      const query = Object.entries(state)\n        .map(([key, value]) => `${key}=${value}`)\n        .join(\"&\");\n      const url =\n        window.location.origin + window.location.pathname + \"?\" + query;\n\n      yield put(Url.set({ url }));\n\n      window.history.replaceState(query, \"\", url);\n    }\n  }\n}\n\nfunction* parseListsFromQuery() {\n  const loadChannel = eventChannel((emitter) => {\n    window.addEventListener(\"load\", emitter);\n\n    return () => {\n      window.removeEventListener(\"load\", emitter);\n    };\n  });\n\n  while (true) {\n    yield take(loadChannel);\n\n    yield* parseLists();\n  }\n}\n\nfunction* parseListsFromQuery2() {\n  yield take(AppSync.done().type);\n\n  yield* parseLists();\n}\n\nfunction* parseLists() {\n  const urlParams = new URLSearchParams(window.location.search);\n  const params = Object.fromEntries(urlParams);\n\n  const version = params.v;\n  const exponent = parseInt(params.e, 10) || 0;\n\n  if (version === \"1\" && exponent) {\n    const titleIndexes = Object.keys(params)\n      .filter((key) => key.match(/^t[\\d]+$/))\n      .map((key) => parseInt(key.substring(1), 10))\n      .sort((a, b) => a - b);\n\n    const lists = titleIndexes.map((index) => ({\n      title: params[\"t\" + index],\n      cards: parseList(exponent, params[\"l\" + index]),\n    }));\n\n    // If the card is either a configured warjack or a configured vehicle, its page must be\n    // fetched in order for its subtitle to be shown correctly. A warjack or vehicle can be\n    // identified by having at least one cortex id, warjack weapon id or vehicle weapon id.\n    for (const list of lists) {\n      for (const {\n        pageId,\n        cortexIds,\n        warjackWeaponIds,\n        vehicleWeaponId,\n      } of list.cards) {\n        if (cortexIds || warjackWeaponIds || vehicleWeaponId) {\n          const page = yield select(PageIds.selectPageByPageId(pageId));\n          if (page) {\n            yield put(FetchWikiPage({ page }));\n          }\n        }\n      }\n    }\n\n    yield put(Lists.set({ lists }));\n  } else {\n    yield put(Lists.set({ lists: [] }));\n  }\n}\n\nfunction* fetchCardOnShow() {\n  while (true) {\n    const { payload } = yield take(\"Lists.toggleCard\");\n    if (payload && payload.pageId) {\n      const page = yield select(PageIds.selectPageByPageId(payload.pageId));\n      if (page) {\n        yield put(FetchWikiPage({ page }));\n      }\n    }\n  }\n}\n\nfunction parseList(exponent, encodedList) {\n  function parseCards(cards, rest) {\n    if (rest === \"\") {\n      return cards;\n    }\n\n    const pageId = rest.slice(0, exponent);\n\n    if (rest[exponent] === \"(\") {\n      const blockEnd = rest.indexOf(\")\");\n      const delimiter = rest.indexOf(\",\");\n      if (!blockEnd || !delimiter) {\n        return [];\n      }\n\n      const block = rest.slice(exponent + 1, blockEnd);\n      const [cortexIds, warjackWeaponIds] = block.split(\",\");\n      return parseCards(\n        [\n          ...cards,\n          {\n            pageId,\n            cortexIds: partitionBy(exponent, cortexIds),\n            warjackWeaponIds: partitionBy(exponent, warjackWeaponIds),\n            vehicleWeaponId: [],\n          },\n        ],\n        rest.slice(blockEnd + 1)\n      );\n    }\n\n    if (rest[exponent] === \"[\") {\n      const blockEnd = rest.indexOf(\"]\");\n      if (!blockEnd) {\n        return [];\n      }\n\n      const vehicleWeaponId = rest.slice(exponent + 1, blockEnd);\n      return parseCards(\n        [\n          ...cards,\n          {\n            pageId,\n            cortexIds: [],\n            warjackWeaponIds: [],\n            vehicleWeaponId: [vehicleWeaponId],\n          },\n        ],\n        rest.slice(blockEnd + 1)\n      );\n    }\n\n    return parseCards(\n      [\n        ...cards,\n        { pageId, cortexIds: [], warjackWeaponIds: [], vehicleWeaponId: [] },\n      ],\n      rest.slice(exponent)\n    );\n  }\n\n  const cards = parseCards([], encodedList);\n\n  const decode = (string) => {\n    const normalizedString = string.replace(/^0+/, \"\") || \"0\";\n    if (normalizedString === \"0\") return null;\n    return parseInt(fromBase62(normalizedString), 10);\n  };\n\n  return cards\n    .map(({ pageId, cortexIds, warjackWeaponIds, vehicleWeaponId }) => ({\n      pageId: decode(pageId),\n      cortexIds: cortexIds.map(decode),\n      warjackWeaponIds: warjackWeaponIds.map(decode),\n      vehicleWeaponId: vehicleWeaponId.map(decode),\n    }))\n    .map(({ pageId, cortexIds, warjackWeaponIds, vehicleWeaponId }) => ({\n      pageId,\n      ...(cortexIds.length === 0 ? {} : { cortexIds }),\n      ...(warjackWeaponIds.length === 0 ? {} : { warjackWeaponIds }),\n      ...(vehicleWeaponId.length === 0\n        ? {}\n        : { vehicleWeaponId: vehicleWeaponId[0] }),\n      hidden: true,\n    }));\n}\n\nfunction partitionBy(slice, string) {\n  var strings = [];\n\n  for (let i = 0; i < string.length; i += slice) {\n    strings[strings.length] = string.slice(i, i + slice);\n  }\n\n  return strings;\n}\n","import { all, put } from \"redux-saga/effects\";\nimport { FetchWikiPage, RefreshWikiPages } from \"../../messages\";\nimport { cacheWikiPages } from \"./cacheWikiPages\";\nimport { parseWikiPages } from \"./parseWikiPages\";\nimport { triggerFetchWikiPages } from \"./triggerFetchWikiPages\";\nimport { ui } from \"./ui\";\n\nfunction* processes() {\n  yield all([\n    cacheWikiPages(),\n    parseWikiPages(),\n    triggerFetchWikiPages(),\n    ui(),\n    fetchInitialData(),\n    refresh(),\n  ]);\n}\n\nexport { processes };\n\nfunction* fetchInitialData() {\n  const pages = [\"Warcaster\", \"Wild_Card\", \"Cypher_Codecs\"];\n  for (const page of pages) {\n    yield put(FetchWikiPage({ page }));\n  }\n}\n\nfunction* refresh() {\n  yield put(RefreshWikiPages());\n}\n","import { StateShard } from \"./utils\";\n\nconst Version = StateShard(\"Version\", init, {}, {});\n\nexport { Version };\n\nfunction init(state) {\n  state.version = \"2022-08-28T16:43:31.730Z\";\n}\n","import { AppSync } from \"./AppSync\";\nimport { Cyphers } from \"./Cyphers\";\nimport { CypherCodecs } from \"./CypherCodecs\";\nimport { Dragging } from \"./Dragging\";\nimport { Factions } from \"./Factions\";\nimport { FactionModels } from \"./FactionModels\";\nimport { Lists } from \"./Lists\";\nimport { Models } from \"./Models\";\nimport { PageIds } from \"./PageIds\";\nimport { Url } from \"./Url\";\nimport { Version } from \"./Version\";\nimport { WikiPages } from \"./WikiPages\";\nimport { WildCardModels } from \"./WildCardModels\";\nimport { immer, initAll } from \"./utils\";\n\nconst objects = [\n  AppSync,\n  CypherCodecs,\n  Cyphers,\n  Factions,\n  FactionModels,\n  Models,\n  PageIds,\n  Url,\n  WildCardModels,\n  WikiPages,\n  // UI\n  Dragging,\n  Lists,\n  // General\n  Version,\n];\n\nconst state = initAll(...objects)({});\n\nconst dispatch = immer(({ type, payload }) => {\n  const namespaces = Object.fromEntries(\n    objects.map((group) => [group.namespace, group])\n  );\n\n  const namespace = type.substring(0, type.indexOf(\".\"));\n  if (namespace && namespaces[namespace]) {\n    return redirect({ type, payload }, namespaces[namespace]);\n  }\n  if (type === \"RE\") {\n    return (state) => {\n      state.data.models = {};\n      for (const page of Object.keys(state.data.pages)) {\n        const white_list = [\n          \"Warcaster\",\n          \"Wild_Card\",\n          \"Cypher_Codecs\",\n          \"Aeternus_Continuum\",\n          \"Empyrean\",\n          \"Iron_Star_Alliance\",\n          \"Marcher_Worlds\",\n        ];\n        if (!white_list.includes(page)) {\n          delete state.data.pages[page];\n        }\n      }\n    };\n  }\n  return (state) => state;\n});\n\nexport { dispatch, state };\n\nfunction redirect(action, obj) {\n  return (state) =>\n    immer(({ type, payload }) => {\n      const f = obj.dispatch[type] || ((state, payload) => state);\n      return (state) => f(state, payload);\n    })(state, action);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport \"./index.css\";\nimport App from \"./ui/App\";\nimport { processes } from \"./businessLogic/processes\";\nimport { dispatch, state } from \"./state\";\n\nconst saga = initSaga();\nconst store = initStore(saga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nsaga.run(processes);\n\nfunction initStore(saga) {\n  const persistedState = localStorage.getItem(\"reduxState\")\n    ? JSON.parse(localStorage.getItem(\"reduxState\"))\n    : state;\n\n  const latestState =\n    new Date(persistedState.version) >= new Date(state.version)\n      ? persistedState\n      : state;\n\n  const composedEnhancers = composeWithDevTools(applyMiddleware(saga));\n  const store = createStore(dispatch, latestState, composedEnhancers);\n\n  store.subscribe(() => {\n    localStorage.setItem(\"reduxState\", JSON.stringify(store.getState()));\n  });\n\n  return store;\n}\n\nfunction initSaga() {\n  return createSagaMiddleware();\n}\n"],"sourceRoot":""}